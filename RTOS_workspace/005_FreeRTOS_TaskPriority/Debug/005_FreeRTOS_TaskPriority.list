
005_FreeRTOS_TaskPriority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053e4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08005574  08005574  00006574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056b8  080056b8  0000701c  2**0
                  CONTENTS
  4 .ARM          00000008  080056b8  080056b8  000066b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056c0  080056c0  0000701c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056c0  080056c0  000066c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056c4  080056c4  000066c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080056c8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014414  2000001c  080056e4  0000701c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014430  080056e4  00007430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010994  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b63  00000000  00000000  000179e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  0001a548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ce4  00000000  00000000  0001b638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023323  00000000  00000000  0001c31c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e9a  00000000  00000000  0003f63f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4a41  00000000  00000000  000524d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126f1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004624  00000000  00000000  00126f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b5  00000000  00000000  0012b584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800555c 	.word	0x0800555c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	0800555c 	.word	0x0800555c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e5c 	.word	0x20012e5c

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fb97 	bl	8000c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f85b 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f8c3 	bl	80006ec <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */


  //Enable the CYCCNT counter.
  DWT_CTRL |= ( 1 << 0);
 8000566:	4b22      	ldr	r3, [pc, #136]	@ (80005f0 <main+0x9c>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a21      	ldr	r2, [pc, #132]	@ (80005f0 <main+0x9c>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 8000572:	4820      	ldr	r0, [pc, #128]	@ (80005f4 <main+0xa0>)
 8000574:	f003 fa62 	bl	8003a3c <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000578:	f003 f81a 	bl	80035b0 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 800057c:	f004 fa08 	bl	8004990 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 8000580:	4b1d      	ldr	r3, [pc, #116]	@ (80005f8 <main+0xa4>)
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	2302      	movs	r3, #2
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	4b1c      	ldr	r3, [pc, #112]	@ (80005fc <main+0xa8>)
 800058a:	22c8      	movs	r2, #200	@ 0xc8
 800058c:	491c      	ldr	r1, [pc, #112]	@ (8000600 <main+0xac>)
 800058e:	481d      	ldr	r0, [pc, #116]	@ (8000604 <main+0xb0>)
 8000590:	f001 fded 	bl	800216e <xTaskCreate>
 8000594:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d00b      	beq.n	80005b4 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800059c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005a0:	f383 8811 	msr	BASEPRI, r3
 80005a4:	f3bf 8f6f 	isb	sy
 80005a8:	f3bf 8f4f 	dsb	sy
 80005ac:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005ae:	bf00      	nop
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <main+0x5c>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 3, &task2_handle);
 80005b4:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <main+0xb4>)
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	2303      	movs	r3, #3
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	4b13      	ldr	r3, [pc, #76]	@ (800060c <main+0xb8>)
 80005be:	22c8      	movs	r2, #200	@ 0xc8
 80005c0:	4913      	ldr	r1, [pc, #76]	@ (8000610 <main+0xbc>)
 80005c2:	4814      	ldr	r0, [pc, #80]	@ (8000614 <main+0xc0>)
 80005c4:	f001 fdd3 	bl	800216e <xTaskCreate>
 80005c8:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d00b      	beq.n	80005e8 <main+0x94>
        __asm volatile
 80005d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005d4:	f383 8811 	msr	BASEPRI, r3
 80005d8:	f3bf 8f6f 	isb	sy
 80005dc:	f3bf 8f4f 	dsb	sy
 80005e0:	607b      	str	r3, [r7, #4]
    }
 80005e2:	bf00      	nop
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <main+0x90>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 80005e8:	f001 ffe8 	bl	80025bc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <main+0x98>
 80005f0:	e0001000 	.word	0xe0001000
 80005f4:	0007a120 	.word	0x0007a120
 80005f8:	20000038 	.word	0x20000038
 80005fc:	08005574 	.word	0x08005574
 8000600:	0800558c 	.word	0x0800558c
 8000604:	080009a9 	.word	0x080009a9
 8000608:	2000003c 	.word	0x2000003c
 800060c:	08005594 	.word	0x08005594
 8000610:	080055ac 	.word	0x080055ac
 8000614:	080009f9 	.word	0x080009f9

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	@ 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	@ 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f004 ff5e 	bl	80054e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b28      	ldr	r3, [pc, #160]	@ (80006e4 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000644:	4a27      	ldr	r2, [pc, #156]	@ (80006e4 <SystemClock_Config+0xcc>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	@ 0x40
 800064c:	4b25      	ldr	r3, [pc, #148]	@ (80006e4 <SystemClock_Config+0xcc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b22      	ldr	r3, [pc, #136]	@ (80006e8 <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a21      	ldr	r2, [pc, #132]	@ (80006e8 <SystemClock_Config+0xd0>)
 8000662:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b1f      	ldr	r3, [pc, #124]	@ (80006e8 <SystemClock_Config+0xd0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000674:	2302      	movs	r3, #2
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	2301      	movs	r3, #1
 800067a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067c:	2310      	movs	r3, #16
 800067e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000680:	2302      	movs	r3, #2
 8000682:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000684:	2300      	movs	r3, #0
 8000686:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000688:	2308      	movs	r3, #8
 800068a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800068c:	23a8      	movs	r3, #168	@ 0xa8
 800068e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000694:	2307      	movs	r3, #7
 8000696:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fe01 	bl	80012a4 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a8:	f000 f9fe 	bl	8000aa8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2105      	movs	r1, #5
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 f858 	bl	8001780 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006d6:	f000 f9e7 	bl	8000aa8 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	@ 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08c      	sub	sp, #48	@ 0x30
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	61bb      	str	r3, [r7, #24]
 8000706:	4ba1      	ldr	r3, [pc, #644]	@ (800098c <MX_GPIO_Init+0x2a0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	4aa0      	ldr	r2, [pc, #640]	@ (800098c <MX_GPIO_Init+0x2a0>)
 800070c:	f043 0310 	orr.w	r3, r3, #16
 8000710:	6313      	str	r3, [r2, #48]	@ 0x30
 8000712:	4b9e      	ldr	r3, [pc, #632]	@ (800098c <MX_GPIO_Init+0x2a0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	f003 0310 	and.w	r3, r3, #16
 800071a:	61bb      	str	r3, [r7, #24]
 800071c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
 8000722:	4b9a      	ldr	r3, [pc, #616]	@ (800098c <MX_GPIO_Init+0x2a0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a99      	ldr	r2, [pc, #612]	@ (800098c <MX_GPIO_Init+0x2a0>)
 8000728:	f043 0304 	orr.w	r3, r3, #4
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b97      	ldr	r3, [pc, #604]	@ (800098c <MX_GPIO_Init+0x2a0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0304 	and.w	r3, r3, #4
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b93      	ldr	r3, [pc, #588]	@ (800098c <MX_GPIO_Init+0x2a0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a92      	ldr	r2, [pc, #584]	@ (800098c <MX_GPIO_Init+0x2a0>)
 8000744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b90      	ldr	r3, [pc, #576]	@ (800098c <MX_GPIO_Init+0x2a0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b8c      	ldr	r3, [pc, #560]	@ (800098c <MX_GPIO_Init+0x2a0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a8b      	ldr	r2, [pc, #556]	@ (800098c <MX_GPIO_Init+0x2a0>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b89      	ldr	r3, [pc, #548]	@ (800098c <MX_GPIO_Init+0x2a0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b85      	ldr	r3, [pc, #532]	@ (800098c <MX_GPIO_Init+0x2a0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a84      	ldr	r2, [pc, #528]	@ (800098c <MX_GPIO_Init+0x2a0>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b82      	ldr	r3, [pc, #520]	@ (800098c <MX_GPIO_Init+0x2a0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b7e      	ldr	r3, [pc, #504]	@ (800098c <MX_GPIO_Init+0x2a0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a7d      	ldr	r2, [pc, #500]	@ (800098c <MX_GPIO_Init+0x2a0>)
 8000798:	f043 0308 	orr.w	r3, r3, #8
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b7b      	ldr	r3, [pc, #492]	@ (800098c <MX_GPIO_Init+0x2a0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0308 	and.w	r3, r3, #8
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2108      	movs	r1, #8
 80007ae:	4878      	ldr	r0, [pc, #480]	@ (8000990 <MX_GPIO_Init+0x2a4>)
 80007b0:	f000 fd44 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	2101      	movs	r1, #1
 80007b8:	4876      	ldr	r0, [pc, #472]	@ (8000994 <MX_GPIO_Init+0x2a8>)
 80007ba:	f000 fd3f 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007be:	2200      	movs	r2, #0
 80007c0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80007c4:	4874      	ldr	r0, [pc, #464]	@ (8000998 <MX_GPIO_Init+0x2ac>)
 80007c6:	f000 fd39 	bl	800123c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007ca:	2308      	movs	r3, #8
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	486b      	ldr	r0, [pc, #428]	@ (8000990 <MX_GPIO_Init+0x2a4>)
 80007e2:	f000 fb77 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007e6:	2301      	movs	r3, #1
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	4865      	ldr	r0, [pc, #404]	@ (8000994 <MX_GPIO_Init+0x2a8>)
 80007fe:	f000 fb69 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000802:	2308      	movs	r3, #8
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000812:	2305      	movs	r3, #5
 8000814:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	485d      	ldr	r0, [pc, #372]	@ (8000994 <MX_GPIO_Init+0x2a8>)
 800081e:	f000 fb59 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000822:	2301      	movs	r3, #1
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4859      	ldr	r0, [pc, #356]	@ (800099c <MX_GPIO_Init+0x2b0>)
 8000836:	f000 fb4d 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800083a:	2310      	movs	r3, #16
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800084a:	2306      	movs	r3, #6
 800084c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	4851      	ldr	r0, [pc, #324]	@ (800099c <MX_GPIO_Init+0x2b0>)
 8000856:	f000 fb3d 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800085a:	23e0      	movs	r3, #224	@ 0xe0
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800086a:	2305      	movs	r3, #5
 800086c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	4849      	ldr	r0, [pc, #292]	@ (800099c <MX_GPIO_Init+0x2b0>)
 8000876:	f000 fb2d 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800087a:	2304      	movs	r3, #4
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087e:	2300      	movs	r3, #0
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	4844      	ldr	r0, [pc, #272]	@ (80009a0 <MX_GPIO_Init+0x2b4>)
 800088e:	f000 fb21 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000892:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008a4:	2305      	movs	r3, #5
 80008a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	483c      	ldr	r0, [pc, #240]	@ (80009a0 <MX_GPIO_Init+0x2b4>)
 80008b0:	f000 fb10 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008b4:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008b8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	4832      	ldr	r0, [pc, #200]	@ (8000998 <MX_GPIO_Init+0x2ac>)
 80008ce:	f000 fb01 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008d2:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008e4:	2306      	movs	r3, #6
 80008e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	4829      	ldr	r0, [pc, #164]	@ (8000994 <MX_GPIO_Init+0x2a8>)
 80008f0:	f000 faf0 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	4824      	ldr	r0, [pc, #144]	@ (800099c <MX_GPIO_Init+0x2b0>)
 800090a:	f000 fae3 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800090e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000920:	230a      	movs	r3, #10
 8000922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	481c      	ldr	r0, [pc, #112]	@ (800099c <MX_GPIO_Init+0x2b0>)
 800092c:	f000 fad2 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000930:	2320      	movs	r3, #32
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4815      	ldr	r0, [pc, #84]	@ (8000998 <MX_GPIO_Init+0x2ac>)
 8000944:	f000 fac6 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000948:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800094e:	2312      	movs	r3, #18
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000952:	2301      	movs	r3, #1
 8000954:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800095a:	2304      	movs	r3, #4
 800095c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	480e      	ldr	r0, [pc, #56]	@ (80009a0 <MX_GPIO_Init+0x2b4>)
 8000966:	f000 fab5 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800096a:	2302      	movs	r3, #2
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800096e:	4b0d      	ldr	r3, [pc, #52]	@ (80009a4 <MX_GPIO_Init+0x2b8>)
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4804      	ldr	r0, [pc, #16]	@ (8000990 <MX_GPIO_Init+0x2a4>)
 800097e:	f000 faa9 	bl	8000ed4 <HAL_GPIO_Init>

}
 8000982:	bf00      	nop
 8000984:	3730      	adds	r7, #48	@ 0x30
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800
 8000990:	40021000 	.word	0x40021000
 8000994:	40020800 	.word	0x40020800
 8000998:	40020c00 	.word	0x40020c00
 800099c:	40020000 	.word	0x40020000
 80009a0:	40020400 	.word	0x40020400
 80009a4:	10120000 	.word	0x10120000

080009a8 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b09c      	sub	sp, #112	@ 0x70
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]

	char msg[100];

	while(1)
	{
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1)
 80009b0:	2101      	movs	r1, #1
 80009b2:	480d      	ldr	r0, [pc, #52]	@ (80009e8 <task1_handler+0x40>)
 80009b4:	f000 fc2a 	bl	800120c <HAL_GPIO_ReadPin>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d10b      	bne.n	80009d6 <task1_handler+0x2e>
		{
			vTaskPrioritySet(task2_handle, 3);
 80009be:	4b0b      	ldr	r3, [pc, #44]	@ (80009ec <task1_handler+0x44>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2103      	movs	r1, #3
 80009c4:	4618      	mov	r0, r3
 80009c6:	f001 fd37 	bl	8002438 <vTaskPrioritySet>
			vTaskPrioritySet(task1_handle, 2);
 80009ca:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <task1_handler+0x48>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2102      	movs	r1, #2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 fd31 	bl	8002438 <vTaskPrioritySet>
		}
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80009d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009da:	4806      	ldr	r0, [pc, #24]	@ (80009f4 <task1_handler+0x4c>)
 80009dc:	f000 fc47 	bl	800126e <HAL_GPIO_TogglePin>
		rtos_delay(100);
 80009e0:	2064      	movs	r0, #100	@ 0x64
 80009e2:	f000 f831 	bl	8000a48 <rtos_delay>
	{
 80009e6:	e7e3      	b.n	80009b0 <task1_handler+0x8>
 80009e8:	40020000 	.word	0x40020000
 80009ec:	2000003c 	.word	0x2000003c
 80009f0:	20000038 	.word	0x20000038
 80009f4:	40020c00 	.word	0x40020c00

080009f8 <task2_handler>:

}


static void task2_handler(void* parameters)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b09c      	sub	sp, #112	@ 0x70
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1)
 8000a00:	2101      	movs	r1, #1
 8000a02:	480d      	ldr	r0, [pc, #52]	@ (8000a38 <task2_handler+0x40>)
 8000a04:	f000 fc02 	bl	800120c <HAL_GPIO_ReadPin>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d10b      	bne.n	8000a26 <task2_handler+0x2e>
		{
			vTaskPrioritySet(task1_handle, 3);
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a3c <task2_handler+0x44>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2103      	movs	r1, #3
 8000a14:	4618      	mov	r0, r3
 8000a16:	f001 fd0f 	bl	8002438 <vTaskPrioritySet>
			vTaskPrioritySet(task2_handle, 2);
 8000a1a:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <task2_handler+0x48>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2102      	movs	r1, #2
 8000a20:	4618      	mov	r0, r3
 8000a22:	f001 fd09 	bl	8002438 <vTaskPrioritySet>
		}
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000a26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a2a:	4806      	ldr	r0, [pc, #24]	@ (8000a44 <task2_handler+0x4c>)
 8000a2c:	f000 fc1f 	bl	800126e <HAL_GPIO_TogglePin>
		rtos_delay(200);
 8000a30:	20c8      	movs	r0, #200	@ 0xc8
 8000a32:	f000 f809 	bl	8000a48 <rtos_delay>
	{
 8000a36:	e7e3      	b.n	8000a00 <task2_handler+0x8>
 8000a38:	40020000 	.word	0x40020000
 8000a3c:	20000038 	.word	0x20000038
 8000a40:	2000003c 	.word	0x2000003c
 8000a44:	40020c00 	.word	0x40020c00

08000a48 <rtos_delay>:
	}
}

void rtos_delay(uint32_t ms)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	uint32_t tick = (ms/configTICK_RATE_HZ)/1000;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a0b      	ldr	r2, [pc, #44]	@ (8000a80 <rtos_delay+0x38>)
 8000a54:	fba2 2303 	umull	r2, r3, r2, r3
 8000a58:	0c9b      	lsrs	r3, r3, #18
 8000a5a:	60fb      	str	r3, [r7, #12]
	int current_tick = xTaskGetTickCount();
 8000a5c:	f001 feba 	bl	80027d4 <xTaskGetTickCount>
 8000a60:	4603      	mov	r3, r0
 8000a62:	60bb      	str	r3, [r7, #8]
	while(xTaskGetTickCount() > (current_tick + tick));
 8000a64:	bf00      	nop
 8000a66:	f001 feb5 	bl	80027d4 <xTaskGetTickCount>
 8000a6a:	4601      	mov	r1, r0
 8000a6c:	68ba      	ldr	r2, [r7, #8]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	4413      	add	r3, r2
 8000a72:	4299      	cmp	r1, r3
 8000a74:	d8f7      	bhi.n	8000a66 <rtos_delay+0x1e>
}
 8000a76:	bf00      	nop
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	431bde83 	.word	0x431bde83

08000a84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a04      	ldr	r2, [pc, #16]	@ (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d101      	bne.n	8000a9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a96:	f000 f91b 	bl	8000cd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40001000 	.word	0x40001000

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
	...

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b10      	ldr	r3, [pc, #64]	@ (8000b04 <HAL_MspInit+0x4c>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b04 <HAL_MspInit+0x4c>)
 8000ac8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000acc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ace:	4b0d      	ldr	r3, [pc, #52]	@ (8000b04 <HAL_MspInit+0x4c>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <HAL_MspInit+0x4c>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae2:	4a08      	ldr	r2, [pc, #32]	@ (8000b04 <HAL_MspInit+0x4c>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aea:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <HAL_MspInit+0x4c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000af6:	f002 f999 	bl	8002e2c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800

08000b08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08c      	sub	sp, #48	@ 0x30
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	2036      	movs	r0, #54	@ 0x36
 8000b1e:	f000 f9af 	bl	8000e80 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b22:	2036      	movs	r0, #54	@ 0x36
 8000b24:	f000 f9c8 	bl	8000eb8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bac <HAL_InitTick+0xa4>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b30:	4a1e      	ldr	r2, [pc, #120]	@ (8000bac <HAL_InitTick+0xa4>)
 8000b32:	f043 0310 	orr.w	r3, r3, #16
 8000b36:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b38:	4b1c      	ldr	r3, [pc, #112]	@ (8000bac <HAL_InitTick+0xa4>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3c:	f003 0310 	and.w	r3, r3, #16
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b44:	f107 0210 	add.w	r2, r7, #16
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 f822 	bl	8001b98 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b54:	f001 f80c 	bl	8001b70 <HAL_RCC_GetPCLK1Freq>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b60:	4a13      	ldr	r2, [pc, #76]	@ (8000bb0 <HAL_InitTick+0xa8>)
 8000b62:	fba2 2303 	umull	r2, r3, r2, r3
 8000b66:	0c9b      	lsrs	r3, r3, #18
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	@ (8000bb4 <HAL_InitTick+0xac>)
 8000b6e:	4a12      	ldr	r2, [pc, #72]	@ (8000bb8 <HAL_InitTick+0xb0>)
 8000b70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000b72:	4b10      	ldr	r3, [pc, #64]	@ (8000bb4 <HAL_InitTick+0xac>)
 8000b74:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b78:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb4 <HAL_InitTick+0xac>)
 8000b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b7e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <HAL_InitTick+0xac>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb4 <HAL_InitTick+0xac>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b8c:	4809      	ldr	r0, [pc, #36]	@ (8000bb4 <HAL_InitTick+0xac>)
 8000b8e:	f001 f835 	bl	8001bfc <HAL_TIM_Base_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d104      	bne.n	8000ba2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b98:	4806      	ldr	r0, [pc, #24]	@ (8000bb4 <HAL_InitTick+0xac>)
 8000b9a:	f001 f864 	bl	8001c66 <HAL_TIM_Base_Start_IT>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	e000      	b.n	8000ba4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3730      	adds	r7, #48	@ 0x30
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	431bde83 	.word	0x431bde83
 8000bb4:	20000040 	.word	0x20000040
 8000bb8:	40001000 	.word	0x40001000

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bce:	bf00      	nop
 8000bd0:	e7fd      	b.n	8000bce <HardFault_Handler+0x4>

08000bd2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd6:	bf00      	nop
 8000bd8:	e7fd      	b.n	8000bd6 <MemManage_Handler+0x4>

08000bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bde:	bf00      	nop
 8000be0:	e7fd      	b.n	8000bde <BusFault_Handler+0x4>

08000be2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be6:	bf00      	nop
 8000be8:	e7fd      	b.n	8000be6 <UsageFault_Handler+0x4>

08000bea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bfc:	4802      	ldr	r0, [pc, #8]	@ (8000c08 <TIM6_DAC_IRQHandler+0x10>)
 8000bfe:	f001 f856 	bl	8001cae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000040 	.word	0x20000040

08000c0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c10:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <SystemInit+0x28>)
 8000c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c16:	4a07      	ldr	r2, [pc, #28]	@ (8000c34 <SystemInit+0x28>)
 8000c18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c20:	4b04      	ldr	r3, [pc, #16]	@ (8000c34 <SystemInit+0x28>)
 8000c22:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c26:	609a      	str	r2, [r3, #8]
#endif
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c3e:	e003      	b.n	8000c48 <LoopCopyDataInit>

08000c40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c40:	4b0c      	ldr	r3, [pc, #48]	@ (8000c74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c46:	3104      	adds	r1, #4

08000c48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c48:	480b      	ldr	r0, [pc, #44]	@ (8000c78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c50:	d3f6      	bcc.n	8000c40 <CopyDataInit>
  ldr  r2, =_sbss
 8000c52:	4a0b      	ldr	r2, [pc, #44]	@ (8000c80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c54:	e002      	b.n	8000c5c <LoopFillZerobss>

08000c56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c58:	f842 3b04 	str.w	r3, [r2], #4

08000c5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c5c:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c60:	d3f9      	bcc.n	8000c56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c62:	f7ff ffd3 	bl	8000c0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c66:	f004 fc47 	bl	80054f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6a:	f7ff fc73 	bl	8000554 <main>
  bx  lr    
 8000c6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c70:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c74:	080056c8 	.word	0x080056c8
  ldr  r0, =_sdata
 8000c78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c7c:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8000c80:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8000c84:	20014430 	.word	0x20014430

08000c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC_IRQHandler>
	...

08000c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c90:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ccc <HAL_Init+0x40>)
 8000c96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ccc <HAL_Init+0x40>)
 8000ca2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca8:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a07      	ldr	r2, [pc, #28]	@ (8000ccc <HAL_Init+0x40>)
 8000cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 f8d8 	bl	8000e6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f7ff ff24 	bl	8000b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc0:	f7ff fefa 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40023c00 	.word	0x40023c00

08000cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <HAL_IncTick+0x20>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <HAL_IncTick+0x24>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a04      	ldr	r2, [pc, #16]	@ (8000cf4 <HAL_IncTick+0x24>)
 8000ce2:	6013      	str	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	20000080 	.word	0x20000080

08000cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cfc:	4b03      	ldr	r3, [pc, #12]	@ (8000d0c <HAL_GetTick+0x14>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000080 	.word	0x20000080

08000d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d20:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d42:	4a04      	ldr	r2, [pc, #16]	@ (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	60d3      	str	r3, [r2, #12]
}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d5c:	4b04      	ldr	r3, [pc, #16]	@ (8000d70 <__NVIC_GetPriorityGrouping+0x18>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	0a1b      	lsrs	r3, r3, #8
 8000d62:	f003 0307 	and.w	r3, r3, #7
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	db0b      	blt.n	8000d9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	f003 021f 	and.w	r2, r3, #31
 8000d8c:	4907      	ldr	r1, [pc, #28]	@ (8000dac <__NVIC_EnableIRQ+0x38>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	095b      	lsrs	r3, r3, #5
 8000d94:	2001      	movs	r0, #1
 8000d96:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000e100 	.word	0xe000e100

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db0a      	blt.n	8000dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	490c      	ldr	r1, [pc, #48]	@ (8000dfc <__NVIC_SetPriority+0x4c>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd8:	e00a      	b.n	8000df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4908      	ldr	r1, [pc, #32]	@ (8000e00 <__NVIC_SetPriority+0x50>)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	440b      	add	r3, r1
 8000dee:	761a      	strb	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	@ 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f1c3 0307 	rsb	r3, r3, #7
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf28      	it	cs
 8000e22:	2304      	movcs	r3, #4
 8000e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d902      	bls.n	8000e34 <NVIC_EncodePriority+0x30>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	e000      	b.n	8000e36 <NVIC_EncodePriority+0x32>
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43d9      	mvns	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	4313      	orrs	r3, r2
         );
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	@ 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff ff4c 	bl	8000d10 <__NVIC_SetPriorityGrouping>
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e92:	f7ff ff61 	bl	8000d58 <__NVIC_GetPriorityGrouping>
 8000e96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	68b9      	ldr	r1, [r7, #8]
 8000e9c:	6978      	ldr	r0, [r7, #20]
 8000e9e:	f7ff ffb1 	bl	8000e04 <NVIC_EncodePriority>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff80 	bl	8000db0 <__NVIC_SetPriority>
}
 8000eb0:	bf00      	nop
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff54 	bl	8000d74 <__NVIC_EnableIRQ>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	@ 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
 8000eee:	e16b      	b.n	80011c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	f040 815a 	bne.w	80011c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d00b      	beq.n	8000f2e <HAL_GPIO_Init+0x5a>
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d007      	beq.n	8000f2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f22:	2b11      	cmp	r3, #17
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2b12      	cmp	r3, #18
 8000f2c:	d130      	bne.n	8000f90 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	2203      	movs	r2, #3
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	68da      	ldr	r2, [r3, #12]
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f64:	2201      	movs	r2, #1
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	091b      	lsrs	r3, r3, #4
 8000f7a:	f003 0201 	and.w	r2, r3, #1
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0xfc>
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b12      	cmp	r3, #18
 8000fce:	d123      	bne.n	8001018 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	08da      	lsrs	r2, r3, #3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3208      	adds	r2, #8
 8000fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	f003 0307 	and.w	r3, r3, #7
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	220f      	movs	r2, #15
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	691a      	ldr	r2, [r3, #16]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	08da      	lsrs	r2, r3, #3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3208      	adds	r2, #8
 8001012:	69b9      	ldr	r1, [r7, #24]
 8001014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0203 	and.w	r2, r3, #3
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 80b4 	beq.w	80011c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b60      	ldr	r3, [pc, #384]	@ (80011e0 <HAL_GPIO_Init+0x30c>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001062:	4a5f      	ldr	r2, [pc, #380]	@ (80011e0 <HAL_GPIO_Init+0x30c>)
 8001064:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001068:	6453      	str	r3, [r2, #68]	@ 0x44
 800106a:	4b5d      	ldr	r3, [pc, #372]	@ (80011e0 <HAL_GPIO_Init+0x30c>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001076:	4a5b      	ldr	r2, [pc, #364]	@ (80011e4 <HAL_GPIO_Init+0x310>)
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	089b      	lsrs	r3, r3, #2
 800107c:	3302      	adds	r3, #2
 800107e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	220f      	movs	r2, #15
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a52      	ldr	r2, [pc, #328]	@ (80011e8 <HAL_GPIO_Init+0x314>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d02b      	beq.n	80010fa <HAL_GPIO_Init+0x226>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a51      	ldr	r2, [pc, #324]	@ (80011ec <HAL_GPIO_Init+0x318>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d025      	beq.n	80010f6 <HAL_GPIO_Init+0x222>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a50      	ldr	r2, [pc, #320]	@ (80011f0 <HAL_GPIO_Init+0x31c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d01f      	beq.n	80010f2 <HAL_GPIO_Init+0x21e>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4f      	ldr	r2, [pc, #316]	@ (80011f4 <HAL_GPIO_Init+0x320>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d019      	beq.n	80010ee <HAL_GPIO_Init+0x21a>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4e      	ldr	r2, [pc, #312]	@ (80011f8 <HAL_GPIO_Init+0x324>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d013      	beq.n	80010ea <HAL_GPIO_Init+0x216>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4d      	ldr	r2, [pc, #308]	@ (80011fc <HAL_GPIO_Init+0x328>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d00d      	beq.n	80010e6 <HAL_GPIO_Init+0x212>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4c      	ldr	r2, [pc, #304]	@ (8001200 <HAL_GPIO_Init+0x32c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d007      	beq.n	80010e2 <HAL_GPIO_Init+0x20e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4b      	ldr	r2, [pc, #300]	@ (8001204 <HAL_GPIO_Init+0x330>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d101      	bne.n	80010de <HAL_GPIO_Init+0x20a>
 80010da:	2307      	movs	r3, #7
 80010dc:	e00e      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010de:	2308      	movs	r3, #8
 80010e0:	e00c      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010e2:	2306      	movs	r3, #6
 80010e4:	e00a      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010e6:	2305      	movs	r3, #5
 80010e8:	e008      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010ea:	2304      	movs	r3, #4
 80010ec:	e006      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010ee:	2303      	movs	r3, #3
 80010f0:	e004      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010f2:	2302      	movs	r3, #2
 80010f4:	e002      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010fa:	2300      	movs	r3, #0
 80010fc:	69fa      	ldr	r2, [r7, #28]
 80010fe:	f002 0203 	and.w	r2, r2, #3
 8001102:	0092      	lsls	r2, r2, #2
 8001104:	4093      	lsls	r3, r2
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800110c:	4935      	ldr	r1, [pc, #212]	@ (80011e4 <HAL_GPIO_Init+0x310>)
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	089b      	lsrs	r3, r3, #2
 8001112:	3302      	adds	r3, #2
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800111a:	4b3b      	ldr	r3, [pc, #236]	@ (8001208 <HAL_GPIO_Init+0x334>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800113e:	4a32      	ldr	r2, [pc, #200]	@ (8001208 <HAL_GPIO_Init+0x334>)
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001144:	4b30      	ldr	r3, [pc, #192]	@ (8001208 <HAL_GPIO_Init+0x334>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001168:	4a27      	ldr	r2, [pc, #156]	@ (8001208 <HAL_GPIO_Init+0x334>)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800116e:	4b26      	ldr	r3, [pc, #152]	@ (8001208 <HAL_GPIO_Init+0x334>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001192:	4a1d      	ldr	r2, [pc, #116]	@ (8001208 <HAL_GPIO_Init+0x334>)
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001198:	4b1b      	ldr	r3, [pc, #108]	@ (8001208 <HAL_GPIO_Init+0x334>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011bc:	4a12      	ldr	r2, [pc, #72]	@ (8001208 <HAL_GPIO_Init+0x334>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3301      	adds	r3, #1
 80011c6:	61fb      	str	r3, [r7, #28]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	2b0f      	cmp	r3, #15
 80011cc:	f67f ae90 	bls.w	8000ef0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3724      	adds	r7, #36	@ 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40013800 	.word	0x40013800
 80011e8:	40020000 	.word	0x40020000
 80011ec:	40020400 	.word	0x40020400
 80011f0:	40020800 	.word	0x40020800
 80011f4:	40020c00 	.word	0x40020c00
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40021400 	.word	0x40021400
 8001200:	40021800 	.word	0x40021800
 8001204:	40021c00 	.word	0x40021c00
 8001208:	40013c00 	.word	0x40013c00

0800120c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	887b      	ldrh	r3, [r7, #2]
 800121e:	4013      	ands	r3, r2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001224:	2301      	movs	r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	e001      	b.n	800122e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800122a:	2300      	movs	r3, #0
 800122c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
 8001248:	4613      	mov	r3, r2
 800124a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800124c:	787b      	ldrb	r3, [r7, #1]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001258:	e003      	b.n	8001262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	041a      	lsls	r2, r3, #16
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	619a      	str	r2, [r3, #24]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	460b      	mov	r3, r1
 8001278:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	695a      	ldr	r2, [r3, #20]
 800127e:	887b      	ldrh	r3, [r7, #2]
 8001280:	401a      	ands	r2, r3
 8001282:	887b      	ldrh	r3, [r7, #2]
 8001284:	429a      	cmp	r2, r3
 8001286:	d104      	bne.n	8001292 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001288:	887b      	ldrh	r3, [r7, #2]
 800128a:	041a      	lsls	r2, r3, #16
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001290:	e002      	b.n	8001298 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001292:	887a      	ldrh	r2, [r7, #2]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	619a      	str	r2, [r3, #24]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e25e      	b.n	8001774 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d075      	beq.n	80013ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012c2:	4b88      	ldr	r3, [pc, #544]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d00c      	beq.n	80012e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ce:	4b85      	ldr	r3, [pc, #532]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d112      	bne.n	8001300 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012da:	4b82      	ldr	r3, [pc, #520]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012e6:	d10b      	bne.n	8001300 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e8:	4b7e      	ldr	r3, [pc, #504]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d05b      	beq.n	80013ac <HAL_RCC_OscConfig+0x108>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d157      	bne.n	80013ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e239      	b.n	8001774 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001308:	d106      	bne.n	8001318 <HAL_RCC_OscConfig+0x74>
 800130a:	4b76      	ldr	r3, [pc, #472]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a75      	ldr	r2, [pc, #468]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e01d      	b.n	8001354 <HAL_RCC_OscConfig+0xb0>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001320:	d10c      	bne.n	800133c <HAL_RCC_OscConfig+0x98>
 8001322:	4b70      	ldr	r3, [pc, #448]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a6f      	ldr	r2, [pc, #444]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001328:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	4b6d      	ldr	r3, [pc, #436]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a6c      	ldr	r2, [pc, #432]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	e00b      	b.n	8001354 <HAL_RCC_OscConfig+0xb0>
 800133c:	4b69      	ldr	r3, [pc, #420]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a68      	ldr	r2, [pc, #416]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b66      	ldr	r3, [pc, #408]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a65      	ldr	r2, [pc, #404]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 800134e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d013      	beq.n	8001384 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff fccc 	bl	8000cf8 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001364:	f7ff fcc8 	bl	8000cf8 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b64      	cmp	r3, #100	@ 0x64
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e1fe      	b.n	8001774 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001376:	4b5b      	ldr	r3, [pc, #364]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f0      	beq.n	8001364 <HAL_RCC_OscConfig+0xc0>
 8001382:	e014      	b.n	80013ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff fcb8 	bl	8000cf8 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800138c:	f7ff fcb4 	bl	8000cf8 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b64      	cmp	r3, #100	@ 0x64
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e1ea      	b.n	8001774 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139e:	4b51      	ldr	r3, [pc, #324]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0xe8>
 80013aa:	e000      	b.n	80013ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d063      	beq.n	8001482 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ba:	4b4a      	ldr	r3, [pc, #296]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00b      	beq.n	80013de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013c6:	4b47      	ldr	r3, [pc, #284]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d11c      	bne.n	800140c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013d2:	4b44      	ldr	r3, [pc, #272]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d116      	bne.n	800140c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013de:	4b41      	ldr	r3, [pc, #260]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d005      	beq.n	80013f6 <HAL_RCC_OscConfig+0x152>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d001      	beq.n	80013f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e1be      	b.n	8001774 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f6:	4b3b      	ldr	r3, [pc, #236]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4937      	ldr	r1, [pc, #220]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001406:	4313      	orrs	r3, r2
 8001408:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140a:	e03a      	b.n	8001482 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d020      	beq.n	8001456 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001414:	4b34      	ldr	r3, [pc, #208]	@ (80014e8 <HAL_RCC_OscConfig+0x244>)
 8001416:	2201      	movs	r2, #1
 8001418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141a:	f7ff fc6d 	bl	8000cf8 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001422:	f7ff fc69 	bl	8000cf8 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e19f      	b.n	8001774 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001434:	4b2b      	ldr	r3, [pc, #172]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001440:	4b28      	ldr	r3, [pc, #160]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	4925      	ldr	r1, [pc, #148]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001450:	4313      	orrs	r3, r2
 8001452:	600b      	str	r3, [r1, #0]
 8001454:	e015      	b.n	8001482 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001456:	4b24      	ldr	r3, [pc, #144]	@ (80014e8 <HAL_RCC_OscConfig+0x244>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145c:	f7ff fc4c 	bl	8000cf8 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001464:	f7ff fc48 	bl	8000cf8 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e17e      	b.n	8001774 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001476:	4b1b      	ldr	r3, [pc, #108]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	2b00      	cmp	r3, #0
 800148c:	d036      	beq.n	80014fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d016      	beq.n	80014c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001496:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <HAL_RCC_OscConfig+0x248>)
 8001498:	2201      	movs	r2, #1
 800149a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149c:	f7ff fc2c 	bl	8000cf8 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a4:	f7ff fc28 	bl	8000cf8 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e15e      	b.n	8001774 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b6:	4b0b      	ldr	r3, [pc, #44]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 80014b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0x200>
 80014c2:	e01b      	b.n	80014fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c4:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <HAL_RCC_OscConfig+0x248>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ca:	f7ff fc15 	bl	8000cf8 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d0:	e00e      	b.n	80014f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d2:	f7ff fc11 	bl	8000cf8 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d907      	bls.n	80014f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e147      	b.n	8001774 <HAL_RCC_OscConfig+0x4d0>
 80014e4:	40023800 	.word	0x40023800
 80014e8:	42470000 	.word	0x42470000
 80014ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f0:	4b88      	ldr	r3, [pc, #544]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 80014f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1ea      	bne.n	80014d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 8097 	beq.w	8001638 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800150a:	2300      	movs	r3, #0
 800150c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800150e:	4b81      	ldr	r3, [pc, #516]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10f      	bne.n	800153a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	4b7d      	ldr	r3, [pc, #500]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	4a7c      	ldr	r2, [pc, #496]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001528:	6413      	str	r3, [r2, #64]	@ 0x40
 800152a:	4b7a      	ldr	r3, [pc, #488]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001536:	2301      	movs	r3, #1
 8001538:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153a:	4b77      	ldr	r3, [pc, #476]	@ (8001718 <HAL_RCC_OscConfig+0x474>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001542:	2b00      	cmp	r3, #0
 8001544:	d118      	bne.n	8001578 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001546:	4b74      	ldr	r3, [pc, #464]	@ (8001718 <HAL_RCC_OscConfig+0x474>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a73      	ldr	r2, [pc, #460]	@ (8001718 <HAL_RCC_OscConfig+0x474>)
 800154c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001552:	f7ff fbd1 	bl	8000cf8 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800155a:	f7ff fbcd 	bl	8000cf8 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e103      	b.n	8001774 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156c:	4b6a      	ldr	r3, [pc, #424]	@ (8001718 <HAL_RCC_OscConfig+0x474>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f0      	beq.n	800155a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d106      	bne.n	800158e <HAL_RCC_OscConfig+0x2ea>
 8001580:	4b64      	ldr	r3, [pc, #400]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 8001582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001584:	4a63      	ldr	r2, [pc, #396]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6713      	str	r3, [r2, #112]	@ 0x70
 800158c:	e01c      	b.n	80015c8 <HAL_RCC_OscConfig+0x324>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2b05      	cmp	r3, #5
 8001594:	d10c      	bne.n	80015b0 <HAL_RCC_OscConfig+0x30c>
 8001596:	4b5f      	ldr	r3, [pc, #380]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 8001598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800159a:	4a5e      	ldr	r2, [pc, #376]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80015a2:	4b5c      	ldr	r3, [pc, #368]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 80015a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a6:	4a5b      	ldr	r2, [pc, #364]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80015ae:	e00b      	b.n	80015c8 <HAL_RCC_OscConfig+0x324>
 80015b0:	4b58      	ldr	r3, [pc, #352]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 80015b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b4:	4a57      	ldr	r2, [pc, #348]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 80015b6:	f023 0301 	bic.w	r3, r3, #1
 80015ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80015bc:	4b55      	ldr	r3, [pc, #340]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 80015be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c0:	4a54      	ldr	r2, [pc, #336]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 80015c2:	f023 0304 	bic.w	r3, r3, #4
 80015c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d015      	beq.n	80015fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d0:	f7ff fb92 	bl	8000cf8 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d6:	e00a      	b.n	80015ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d8:	f7ff fb8e 	bl	8000cf8 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e0c2      	b.n	8001774 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ee:	4b49      	ldr	r3, [pc, #292]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 80015f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0ee      	beq.n	80015d8 <HAL_RCC_OscConfig+0x334>
 80015fa:	e014      	b.n	8001626 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fc:	f7ff fb7c 	bl	8000cf8 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001602:	e00a      	b.n	800161a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001604:	f7ff fb78 	bl	8000cf8 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001612:	4293      	cmp	r3, r2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e0ac      	b.n	8001774 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161a:	4b3e      	ldr	r3, [pc, #248]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 800161c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1ee      	bne.n	8001604 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001626:	7dfb      	ldrb	r3, [r7, #23]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d105      	bne.n	8001638 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800162c:	4b39      	ldr	r3, [pc, #228]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 800162e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001630:	4a38      	ldr	r2, [pc, #224]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 8001632:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001636:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 8098 	beq.w	8001772 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001642:	4b34      	ldr	r3, [pc, #208]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b08      	cmp	r3, #8
 800164c:	d05c      	beq.n	8001708 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d141      	bne.n	80016da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001656:	4b31      	ldr	r3, [pc, #196]	@ (800171c <HAL_RCC_OscConfig+0x478>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7ff fb4c 	bl	8000cf8 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001664:	f7ff fb48 	bl	8000cf8 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e07e      	b.n	8001774 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001676:	4b27      	ldr	r3, [pc, #156]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69da      	ldr	r2, [r3, #28]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001690:	019b      	lsls	r3, r3, #6
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001698:	085b      	lsrs	r3, r3, #1
 800169a:	3b01      	subs	r3, #1
 800169c:	041b      	lsls	r3, r3, #16
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a4:	061b      	lsls	r3, r3, #24
 80016a6:	491b      	ldr	r1, [pc, #108]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ac:	4b1b      	ldr	r3, [pc, #108]	@ (800171c <HAL_RCC_OscConfig+0x478>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b2:	f7ff fb21 	bl	8000cf8 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ba:	f7ff fb1d 	bl	8000cf8 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e053      	b.n	8001774 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016cc:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x416>
 80016d8:	e04b      	b.n	8001772 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016da:	4b10      	ldr	r3, [pc, #64]	@ (800171c <HAL_RCC_OscConfig+0x478>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fb0a 	bl	8000cf8 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e8:	f7ff fb06 	bl	8000cf8 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e03c      	b.n	8001774 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fa:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x444>
 8001706:	e034      	b.n	8001772 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d107      	bne.n	8001720 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e02f      	b.n	8001774 <HAL_RCC_OscConfig+0x4d0>
 8001714:	40023800 	.word	0x40023800
 8001718:	40007000 	.word	0x40007000
 800171c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001720:	4b16      	ldr	r3, [pc, #88]	@ (800177c <HAL_RCC_OscConfig+0x4d8>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	429a      	cmp	r2, r3
 8001732:	d11c      	bne.n	800176e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800173e:	429a      	cmp	r2, r3
 8001740:	d115      	bne.n	800176e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001748:	4013      	ands	r3, r2
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800174e:	4293      	cmp	r3, r2
 8001750:	d10d      	bne.n	800176e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800175c:	429a      	cmp	r2, r3
 800175e:	d106      	bne.n	800176e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800176a:	429a      	cmp	r2, r3
 800176c:	d001      	beq.n	8001772 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40023800 	.word	0x40023800

08001780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e0cc      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001794:	4b68      	ldr	r3, [pc, #416]	@ (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 030f 	and.w	r3, r3, #15
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d90c      	bls.n	80017bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a2:	4b65      	ldr	r3, [pc, #404]	@ (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017aa:	4b63      	ldr	r3, [pc, #396]	@ (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d001      	beq.n	80017bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0b8      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d020      	beq.n	800180a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017d4:	4b59      	ldr	r3, [pc, #356]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4a58      	ldr	r2, [pc, #352]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017ec:	4b53      	ldr	r3, [pc, #332]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4a52      	ldr	r2, [pc, #328]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f8:	4b50      	ldr	r3, [pc, #320]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	494d      	ldr	r1, [pc, #308]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	4313      	orrs	r3, r2
 8001808:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d044      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d107      	bne.n	800182e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181e:	4b47      	ldr	r3, [pc, #284]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d119      	bne.n	800185e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e07f      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d003      	beq.n	800183e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800183a:	2b03      	cmp	r3, #3
 800183c:	d107      	bne.n	800184e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183e:	4b3f      	ldr	r3, [pc, #252]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d109      	bne.n	800185e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e06f      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184e:	4b3b      	ldr	r3, [pc, #236]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e067      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800185e:	4b37      	ldr	r3, [pc, #220]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f023 0203 	bic.w	r2, r3, #3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4934      	ldr	r1, [pc, #208]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	4313      	orrs	r3, r2
 800186e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001870:	f7ff fa42 	bl	8000cf8 <HAL_GetTick>
 8001874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001876:	e00a      	b.n	800188e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001878:	f7ff fa3e 	bl	8000cf8 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001886:	4293      	cmp	r3, r2
 8001888:	d901      	bls.n	800188e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e04f      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188e:	4b2b      	ldr	r3, [pc, #172]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 020c 	and.w	r2, r3, #12
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	429a      	cmp	r2, r3
 800189e:	d1eb      	bne.n	8001878 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018a0:	4b25      	ldr	r3, [pc, #148]	@ (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 030f 	and.w	r3, r3, #15
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d20c      	bcs.n	80018c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ae:	4b22      	ldr	r3, [pc, #136]	@ (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b6:	4b20      	ldr	r3, [pc, #128]	@ (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d001      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e032      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d008      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018d4:	4b19      	ldr	r3, [pc, #100]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	4916      	ldr	r1, [pc, #88]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d009      	beq.n	8001906 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018f2:	4b12      	ldr	r3, [pc, #72]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	490e      	ldr	r1, [pc, #56]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	4313      	orrs	r3, r2
 8001904:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001906:	f000 f821 	bl	800194c <HAL_RCC_GetSysClockFreq>
 800190a:	4602      	mov	r2, r0
 800190c:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	091b      	lsrs	r3, r3, #4
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	490a      	ldr	r1, [pc, #40]	@ (8001940 <HAL_RCC_ClockConfig+0x1c0>)
 8001918:	5ccb      	ldrb	r3, [r1, r3]
 800191a:	fa22 f303 	lsr.w	r3, r2, r3
 800191e:	4a09      	ldr	r2, [pc, #36]	@ (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 8001920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001922:	4b09      	ldr	r3, [pc, #36]	@ (8001948 <HAL_RCC_ClockConfig+0x1c8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff f8ee 	bl	8000b08 <HAL_InitTick>

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023c00 	.word	0x40023c00
 800193c:	40023800 	.word	0x40023800
 8001940:	08005688 	.word	0x08005688
 8001944:	20000000 	.word	0x20000000
 8001948:	20000004 	.word	0x20000004

0800194c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800194c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001950:	b094      	sub	sp, #80	@ 0x50
 8001952:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	647b      	str	r3, [r7, #68]	@ 0x44
 8001958:	2300      	movs	r3, #0
 800195a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800195c:	2300      	movs	r3, #0
 800195e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001964:	4b79      	ldr	r3, [pc, #484]	@ (8001b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	2b08      	cmp	r3, #8
 800196e:	d00d      	beq.n	800198c <HAL_RCC_GetSysClockFreq+0x40>
 8001970:	2b08      	cmp	r3, #8
 8001972:	f200 80e1 	bhi.w	8001b38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001976:	2b00      	cmp	r3, #0
 8001978:	d002      	beq.n	8001980 <HAL_RCC_GetSysClockFreq+0x34>
 800197a:	2b04      	cmp	r3, #4
 800197c:	d003      	beq.n	8001986 <HAL_RCC_GetSysClockFreq+0x3a>
 800197e:	e0db      	b.n	8001b38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001980:	4b73      	ldr	r3, [pc, #460]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x204>)
 8001982:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001984:	e0db      	b.n	8001b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001986:	4b73      	ldr	r3, [pc, #460]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x208>)
 8001988:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800198a:	e0d8      	b.n	8001b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800198c:	4b6f      	ldr	r3, [pc, #444]	@ (8001b4c <HAL_RCC_GetSysClockFreq+0x200>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001994:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001996:	4b6d      	ldr	r3, [pc, #436]	@ (8001b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d063      	beq.n	8001a6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a2:	4b6a      	ldr	r3, [pc, #424]	@ (8001b4c <HAL_RCC_GetSysClockFreq+0x200>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	099b      	lsrs	r3, r3, #6
 80019a8:	2200      	movs	r2, #0
 80019aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80019b6:	2300      	movs	r3, #0
 80019b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80019ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019be:	4622      	mov	r2, r4
 80019c0:	462b      	mov	r3, r5
 80019c2:	f04f 0000 	mov.w	r0, #0
 80019c6:	f04f 0100 	mov.w	r1, #0
 80019ca:	0159      	lsls	r1, r3, #5
 80019cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019d0:	0150      	lsls	r0, r2, #5
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4621      	mov	r1, r4
 80019d8:	1a51      	subs	r1, r2, r1
 80019da:	6139      	str	r1, [r7, #16]
 80019dc:	4629      	mov	r1, r5
 80019de:	eb63 0301 	sbc.w	r3, r3, r1
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	f04f 0300 	mov.w	r3, #0
 80019ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019f0:	4659      	mov	r1, fp
 80019f2:	018b      	lsls	r3, r1, #6
 80019f4:	4651      	mov	r1, sl
 80019f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019fa:	4651      	mov	r1, sl
 80019fc:	018a      	lsls	r2, r1, #6
 80019fe:	4651      	mov	r1, sl
 8001a00:	ebb2 0801 	subs.w	r8, r2, r1
 8001a04:	4659      	mov	r1, fp
 8001a06:	eb63 0901 	sbc.w	r9, r3, r1
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a1e:	4690      	mov	r8, r2
 8001a20:	4699      	mov	r9, r3
 8001a22:	4623      	mov	r3, r4
 8001a24:	eb18 0303 	adds.w	r3, r8, r3
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	462b      	mov	r3, r5
 8001a2c:	eb49 0303 	adc.w	r3, r9, r3
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a3e:	4629      	mov	r1, r5
 8001a40:	024b      	lsls	r3, r1, #9
 8001a42:	4621      	mov	r1, r4
 8001a44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a48:	4621      	mov	r1, r4
 8001a4a:	024a      	lsls	r2, r1, #9
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a52:	2200      	movs	r2, #0
 8001a54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a5c:	f7fe fc02 	bl	8000264 <__aeabi_uldivmod>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4613      	mov	r3, r2
 8001a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a68:	e058      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a6a:	4b38      	ldr	r3, [pc, #224]	@ (8001b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	099b      	lsrs	r3, r3, #6
 8001a70:	2200      	movs	r2, #0
 8001a72:	4618      	mov	r0, r3
 8001a74:	4611      	mov	r1, r2
 8001a76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a7a:	623b      	str	r3, [r7, #32]
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a84:	4642      	mov	r2, r8
 8001a86:	464b      	mov	r3, r9
 8001a88:	f04f 0000 	mov.w	r0, #0
 8001a8c:	f04f 0100 	mov.w	r1, #0
 8001a90:	0159      	lsls	r1, r3, #5
 8001a92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a96:	0150      	lsls	r0, r2, #5
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4641      	mov	r1, r8
 8001a9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001aa2:	4649      	mov	r1, r9
 8001aa4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ab4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ab8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001abc:	ebb2 040a 	subs.w	r4, r2, sl
 8001ac0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	00eb      	lsls	r3, r5, #3
 8001ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ad2:	00e2      	lsls	r2, r4, #3
 8001ad4:	4614      	mov	r4, r2
 8001ad6:	461d      	mov	r5, r3
 8001ad8:	4643      	mov	r3, r8
 8001ada:	18e3      	adds	r3, r4, r3
 8001adc:	603b      	str	r3, [r7, #0]
 8001ade:	464b      	mov	r3, r9
 8001ae0:	eb45 0303 	adc.w	r3, r5, r3
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	f04f 0300 	mov.w	r3, #0
 8001aee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001af2:	4629      	mov	r1, r5
 8001af4:	028b      	lsls	r3, r1, #10
 8001af6:	4621      	mov	r1, r4
 8001af8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001afc:	4621      	mov	r1, r4
 8001afe:	028a      	lsls	r2, r1, #10
 8001b00:	4610      	mov	r0, r2
 8001b02:	4619      	mov	r1, r3
 8001b04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b06:	2200      	movs	r2, #0
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	61fa      	str	r2, [r7, #28]
 8001b0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b10:	f7fe fba8 	bl	8000264 <__aeabi_uldivmod>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4613      	mov	r3, r2
 8001b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	0c1b      	lsrs	r3, r3, #16
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	3301      	adds	r3, #1
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001b2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b36:	e002      	b.n	8001b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b38:	4b05      	ldr	r3, [pc, #20]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3750      	adds	r7, #80	@ 0x50
 8001b44:	46bd      	mov	sp, r7
 8001b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	00f42400 	.word	0x00f42400
 8001b54:	007a1200 	.word	0x007a1200

08001b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b5c:	4b03      	ldr	r3, [pc, #12]	@ (8001b6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000000 	.word	0x20000000

08001b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b74:	f7ff fff0 	bl	8001b58 <HAL_RCC_GetHCLKFreq>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	4b05      	ldr	r3, [pc, #20]	@ (8001b90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	0a9b      	lsrs	r3, r3, #10
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	4903      	ldr	r1, [pc, #12]	@ (8001b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b86:	5ccb      	ldrb	r3, [r1, r3]
 8001b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40023800 	.word	0x40023800
 8001b94:	08005698 	.word	0x08005698

08001b98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	220f      	movs	r2, #15
 8001ba6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ba8:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 0203 	and.w	r2, r3, #3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bcc:	4b09      	ldr	r3, [pc, #36]	@ (8001bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	08db      	lsrs	r3, r3, #3
 8001bd2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bda:	4b07      	ldr	r3, [pc, #28]	@ (8001bf8 <HAL_RCC_GetClockConfig+0x60>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 020f 	and.w	r2, r3, #15
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	601a      	str	r2, [r3, #0]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40023c00 	.word	0x40023c00

08001bfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e01d      	b.n	8001c4a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d106      	bne.n	8001c28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f815 	bl	8001c52 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3304      	adds	r3, #4
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	f000 f968 	bl	8001f10 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b085      	sub	sp, #20
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68da      	ldr	r2, [r3, #12]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f042 0201 	orr.w	r2, r2, #1
 8001c7c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2b06      	cmp	r3, #6
 8001c8e:	d007      	beq.n	8001ca0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d122      	bne.n	8001d0a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d11b      	bne.n	8001d0a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f06f 0202 	mvn.w	r2, #2
 8001cda:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f8ee 	bl	8001ed2 <HAL_TIM_IC_CaptureCallback>
 8001cf6:	e005      	b.n	8001d04 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f8e0 	bl	8001ebe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f8f1 	bl	8001ee6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d122      	bne.n	8001d5e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	f003 0304 	and.w	r3, r3, #4
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	d11b      	bne.n	8001d5e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f06f 0204 	mvn.w	r2, #4
 8001d2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2202      	movs	r2, #2
 8001d34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f8c4 	bl	8001ed2 <HAL_TIM_IC_CaptureCallback>
 8001d4a:	e005      	b.n	8001d58 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f8b6 	bl	8001ebe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f8c7 	bl	8001ee6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d122      	bne.n	8001db2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b08      	cmp	r3, #8
 8001d78:	d11b      	bne.n	8001db2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f06f 0208 	mvn.w	r2, #8
 8001d82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2204      	movs	r2, #4
 8001d88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f89a 	bl	8001ed2 <HAL_TIM_IC_CaptureCallback>
 8001d9e:	e005      	b.n	8001dac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f88c 	bl	8001ebe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f89d 	bl	8001ee6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	2b10      	cmp	r3, #16
 8001dbe:	d122      	bne.n	8001e06 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	f003 0310 	and.w	r3, r3, #16
 8001dca:	2b10      	cmp	r3, #16
 8001dcc:	d11b      	bne.n	8001e06 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f06f 0210 	mvn.w	r2, #16
 8001dd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2208      	movs	r2, #8
 8001ddc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f870 	bl	8001ed2 <HAL_TIM_IC_CaptureCallback>
 8001df2:	e005      	b.n	8001e00 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f862 	bl	8001ebe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f873 	bl	8001ee6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d10e      	bne.n	8001e32 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d107      	bne.n	8001e32 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f06f 0201 	mvn.w	r2, #1
 8001e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7fe fe29 	bl	8000a84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e3c:	2b80      	cmp	r3, #128	@ 0x80
 8001e3e:	d10e      	bne.n	8001e5e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e4a:	2b80      	cmp	r3, #128	@ 0x80
 8001e4c:	d107      	bne.n	8001e5e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f903 	bl	8002064 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e68:	2b40      	cmp	r3, #64	@ 0x40
 8001e6a:	d10e      	bne.n	8001e8a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e76:	2b40      	cmp	r3, #64	@ 0x40
 8001e78:	d107      	bne.n	8001e8a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f838 	bl	8001efa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	f003 0320 	and.w	r3, r3, #32
 8001e94:	2b20      	cmp	r3, #32
 8001e96:	d10e      	bne.n	8001eb6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	f003 0320 	and.w	r3, r3, #32
 8001ea2:	2b20      	cmp	r3, #32
 8001ea4:	d107      	bne.n	8001eb6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f06f 0220 	mvn.w	r2, #32
 8001eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f8cd 	bl	8002050 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
	...

08001f10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a40      	ldr	r2, [pc, #256]	@ (8002024 <TIM_Base_SetConfig+0x114>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d013      	beq.n	8001f50 <TIM_Base_SetConfig+0x40>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f2e:	d00f      	beq.n	8001f50 <TIM_Base_SetConfig+0x40>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a3d      	ldr	r2, [pc, #244]	@ (8002028 <TIM_Base_SetConfig+0x118>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d00b      	beq.n	8001f50 <TIM_Base_SetConfig+0x40>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a3c      	ldr	r2, [pc, #240]	@ (800202c <TIM_Base_SetConfig+0x11c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d007      	beq.n	8001f50 <TIM_Base_SetConfig+0x40>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a3b      	ldr	r2, [pc, #236]	@ (8002030 <TIM_Base_SetConfig+0x120>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d003      	beq.n	8001f50 <TIM_Base_SetConfig+0x40>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a3a      	ldr	r2, [pc, #232]	@ (8002034 <TIM_Base_SetConfig+0x124>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d108      	bne.n	8001f62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a2f      	ldr	r2, [pc, #188]	@ (8002024 <TIM_Base_SetConfig+0x114>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d02b      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f70:	d027      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a2c      	ldr	r2, [pc, #176]	@ (8002028 <TIM_Base_SetConfig+0x118>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d023      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a2b      	ldr	r2, [pc, #172]	@ (800202c <TIM_Base_SetConfig+0x11c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d01f      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a2a      	ldr	r2, [pc, #168]	@ (8002030 <TIM_Base_SetConfig+0x120>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d01b      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a29      	ldr	r2, [pc, #164]	@ (8002034 <TIM_Base_SetConfig+0x124>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d017      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a28      	ldr	r2, [pc, #160]	@ (8002038 <TIM_Base_SetConfig+0x128>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d013      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a27      	ldr	r2, [pc, #156]	@ (800203c <TIM_Base_SetConfig+0x12c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d00f      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a26      	ldr	r2, [pc, #152]	@ (8002040 <TIM_Base_SetConfig+0x130>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d00b      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a25      	ldr	r2, [pc, #148]	@ (8002044 <TIM_Base_SetConfig+0x134>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d007      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a24      	ldr	r2, [pc, #144]	@ (8002048 <TIM_Base_SetConfig+0x138>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d003      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a23      	ldr	r2, [pc, #140]	@ (800204c <TIM_Base_SetConfig+0x13c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d108      	bne.n	8001fd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8002024 <TIM_Base_SetConfig+0x114>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d003      	beq.n	8002008 <TIM_Base_SetConfig+0xf8>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a0c      	ldr	r2, [pc, #48]	@ (8002034 <TIM_Base_SetConfig+0x124>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d103      	bne.n	8002010 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	691a      	ldr	r2, [r3, #16]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	615a      	str	r2, [r3, #20]
}
 8002016:	bf00      	nop
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40010000 	.word	0x40010000
 8002028:	40000400 	.word	0x40000400
 800202c:	40000800 	.word	0x40000800
 8002030:	40000c00 	.word	0x40000c00
 8002034:	40010400 	.word	0x40010400
 8002038:	40014000 	.word	0x40014000
 800203c:	40014400 	.word	0x40014400
 8002040:	40014800 	.word	0x40014800
 8002044:	40001800 	.word	0x40001800
 8002048:	40001c00 	.word	0x40001c00
 800204c:	40002000 	.word	0x40002000

08002050 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f103 0208 	add.w	r2, r3, #8
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f04f 32ff 	mov.w	r2, #4294967295
 8002090:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f103 0208 	add.w	r2, r3, #8
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f103 0208 	add.w	r2, r3, #8
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80020d2:	b480      	push	{r7}
 80020d4:	b085      	sub	sp, #20
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	601a      	str	r2, [r3, #0]
}
 800210e:	bf00      	nop
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800211a:	b480      	push	{r7}
 800211c:	b085      	sub	sp, #20
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6892      	ldr	r2, [r2, #8]
 8002130:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6852      	ldr	r2, [r2, #4]
 800213a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	429a      	cmp	r2, r3
 8002144:	d103      	bne.n	800214e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	1e5a      	subs	r2, r3, #1
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800216e:	b580      	push	{r7, lr}
 8002170:	b08c      	sub	sp, #48	@ 0x30
 8002172:	af04      	add	r7, sp, #16
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	603b      	str	r3, [r7, #0]
 800217a:	4613      	mov	r3, r2
 800217c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4618      	mov	r0, r3
 8002184:	f001 f804 	bl	8003190 <pvPortMalloc>
 8002188:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00e      	beq.n	80021ae <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002190:	2058      	movs	r0, #88	@ 0x58
 8002192:	f000 fffd 	bl	8003190 <pvPortMalloc>
 8002196:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80021a4:	e005      	b.n	80021b2 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80021a6:	6978      	ldr	r0, [r7, #20]
 80021a8:	f001 f8d4 	bl	8003354 <vPortFree>
 80021ac:	e001      	b.n	80021b2 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d013      	beq.n	80021e0 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80021b8:	88fa      	ldrh	r2, [r7, #6]
 80021ba:	2300      	movs	r3, #0
 80021bc:	9303      	str	r3, [sp, #12]
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	9302      	str	r3, [sp, #8]
 80021c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021c4:	9301      	str	r3, [sp, #4]
 80021c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 f80e 	bl	80021f0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80021d4:	69f8      	ldr	r0, [r7, #28]
 80021d6:	f000 f8a3 	bl	8002320 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80021da:	2301      	movs	r3, #1
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	e002      	b.n	80021e6 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80021e0:	f04f 33ff 	mov.w	r3, #4294967295
 80021e4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80021e6:	69bb      	ldr	r3, [r7, #24]
    }
 80021e8:	4618      	mov	r0, r3
 80021ea:	3720      	adds	r7, #32
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
 80021fc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80021fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002200:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	461a      	mov	r2, r3
 8002208:	21a5      	movs	r1, #165	@ 0xa5
 800220a:	f003 f96d 	bl	80054e8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800220e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002210:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002218:	3b01      	subs	r3, #1
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	f023 0307 	bic.w	r3, r3, #7
 8002226:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00b      	beq.n	800224a <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002236:	f383 8811 	msr	BASEPRI, r3
 800223a:	f3bf 8f6f 	isb	sy
 800223e:	f3bf 8f4f 	dsb	sy
 8002242:	617b      	str	r3, [r7, #20]
    }
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	e7fd      	b.n	8002246 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d01f      	beq.n	8002290 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002250:	2300      	movs	r3, #0
 8002252:	61fb      	str	r3, [r7, #28]
 8002254:	e012      	b.n	800227c <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	4413      	add	r3, r2
 800225c:	7819      	ldrb	r1, [r3, #0]
 800225e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	4413      	add	r3, r2
 8002264:	3334      	adds	r3, #52	@ 0x34
 8002266:	460a      	mov	r2, r1
 8002268:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	4413      	add	r3, r2
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d006      	beq.n	8002284 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3301      	adds	r3, #1
 800227a:	61fb      	str	r3, [r7, #28]
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	2b09      	cmp	r3, #9
 8002280:	d9e9      	bls.n	8002256 <prvInitialiseNewTask+0x66>
 8002282:	e000      	b.n	8002286 <prvInitialiseNewTask+0x96>
            {
                break;
 8002284:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800228e:	e003      	b.n	8002298 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800229a:	2b04      	cmp	r3, #4
 800229c:	d901      	bls.n	80022a2 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800229e:	2304      	movs	r3, #4
 80022a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80022a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80022a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80022a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80022ac:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80022ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b0:	2200      	movs	r2, #0
 80022b2:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80022b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b6:	3304      	adds	r3, #4
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fefd 	bl	80020b8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80022be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c0:	3318      	adds	r3, #24
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fef8 	bl	80020b8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80022c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022cc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d0:	f1c3 0205 	rsb	r2, r3, #5
 80022d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80022d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022dc:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80022de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e0:	3350      	adds	r3, #80	@ 0x50
 80022e2:	2204      	movs	r2, #4
 80022e4:	2100      	movs	r1, #0
 80022e6:	4618      	mov	r0, r3
 80022e8:	f003 f8fe 	bl	80054e8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80022ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ee:	3354      	adds	r3, #84	@ 0x54
 80022f0:	2201      	movs	r2, #1
 80022f2:	2100      	movs	r1, #0
 80022f4:	4618      	mov	r0, r3
 80022f6:	f003 f8f7 	bl	80054e8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	68f9      	ldr	r1, [r7, #12]
 80022fe:	69b8      	ldr	r0, [r7, #24]
 8002300:	f000 fc64 	bl	8002bcc <pxPortInitialiseStack>
 8002304:	4602      	mov	r2, r0
 8002306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002308:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800230a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800230c:	2b00      	cmp	r3, #0
 800230e:	d002      	beq.n	8002316 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002312:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002314:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002316:	bf00      	nop
 8002318:	3720      	adds	r7, #32
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002320:	b5b0      	push	{r4, r5, r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af02      	add	r7, sp, #8
 8002326:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002328:	f000 fe00 	bl	8002f2c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800232c:	4b3b      	ldr	r3, [pc, #236]	@ (800241c <prvAddNewTaskToReadyList+0xfc>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	3301      	adds	r3, #1
 8002332:	4a3a      	ldr	r2, [pc, #232]	@ (800241c <prvAddNewTaskToReadyList+0xfc>)
 8002334:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002336:	4b3a      	ldr	r3, [pc, #232]	@ (8002420 <prvAddNewTaskToReadyList+0x100>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d109      	bne.n	8002352 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800233e:	4a38      	ldr	r2, [pc, #224]	@ (8002420 <prvAddNewTaskToReadyList+0x100>)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002344:	4b35      	ldr	r3, [pc, #212]	@ (800241c <prvAddNewTaskToReadyList+0xfc>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d110      	bne.n	800236e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800234c:	f000 fba4 	bl	8002a98 <prvInitialiseTaskLists>
 8002350:	e00d      	b.n	800236e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002352:	4b34      	ldr	r3, [pc, #208]	@ (8002424 <prvAddNewTaskToReadyList+0x104>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d109      	bne.n	800236e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800235a:	4b31      	ldr	r3, [pc, #196]	@ (8002420 <prvAddNewTaskToReadyList+0x100>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002364:	429a      	cmp	r2, r3
 8002366:	d802      	bhi.n	800236e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002368:	4a2d      	ldr	r2, [pc, #180]	@ (8002420 <prvAddNewTaskToReadyList+0x100>)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800236e:	4b2e      	ldr	r3, [pc, #184]	@ (8002428 <prvAddNewTaskToReadyList+0x108>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	3301      	adds	r3, #1
 8002374:	4a2c      	ldr	r2, [pc, #176]	@ (8002428 <prvAddNewTaskToReadyList+0x108>)
 8002376:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002378:	4b2b      	ldr	r3, [pc, #172]	@ (8002428 <prvAddNewTaskToReadyList+0x108>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d016      	beq.n	80023b4 <prvAddNewTaskToReadyList+0x94>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4618      	mov	r0, r3
 800238a:	f002 fe61 	bl	8005050 <SEGGER_SYSVIEW_OnTaskCreate>
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239e:	461d      	mov	r5, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	461c      	mov	r4, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	1ae3      	subs	r3, r4, r3
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	462b      	mov	r3, r5
 80023b0:	f001 f9a0 	bl	80036f4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f002 fece 	bl	8005158 <SEGGER_SYSVIEW_OnTaskStartReady>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c0:	2201      	movs	r2, #1
 80023c2:	409a      	lsls	r2, r3
 80023c4:	4b19      	ldr	r3, [pc, #100]	@ (800242c <prvAddNewTaskToReadyList+0x10c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	4a18      	ldr	r2, [pc, #96]	@ (800242c <prvAddNewTaskToReadyList+0x10c>)
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4a15      	ldr	r2, [pc, #84]	@ (8002430 <prvAddNewTaskToReadyList+0x110>)
 80023dc:	441a      	add	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3304      	adds	r3, #4
 80023e2:	4619      	mov	r1, r3
 80023e4:	4610      	mov	r0, r2
 80023e6:	f7ff fe74 	bl	80020d2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80023ea:	f000 fdd1 	bl	8002f90 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80023ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002424 <prvAddNewTaskToReadyList+0x104>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00e      	beq.n	8002414 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80023f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002420 <prvAddNewTaskToReadyList+0x100>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002400:	429a      	cmp	r2, r3
 8002402:	d207      	bcs.n	8002414 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002404:	4b0b      	ldr	r3, [pc, #44]	@ (8002434 <prvAddNewTaskToReadyList+0x114>)
 8002406:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	f3bf 8f4f 	dsb	sy
 8002410:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bdb0      	pop	{r4, r5, r7, pc}
 800241c:	2000015c 	.word	0x2000015c
 8002420:	20000084 	.word	0x20000084
 8002424:	20000168 	.word	0x20000168
 8002428:	20000178 	.word	0x20000178
 800242c:	20000164 	.word	0x20000164
 8002430:	20000088 	.word	0x20000088
 8002434:	e000ed04 	.word	0xe000ed04

08002438 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8002438:	b580      	push	{r7, lr}
 800243a:	b08a      	sub	sp, #40	@ 0x28
 800243c:	af02      	add	r7, sp, #8
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]

        configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b04      	cmp	r3, #4
 800244a:	d90b      	bls.n	8002464 <vTaskPrioritySet+0x2c>
        __asm volatile
 800244c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002450:	f383 8811 	msr	BASEPRI, r3
 8002454:	f3bf 8f6f 	isb	sy
 8002458:	f3bf 8f4f 	dsb	sy
 800245c:	60fb      	str	r3, [r7, #12]
    }
 800245e:	bf00      	nop
 8002460:	bf00      	nop
 8002462:	e7fd      	b.n	8002460 <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	2b04      	cmp	r3, #4
 8002468:	d901      	bls.n	800246e <vTaskPrioritySet+0x36>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800246a:	2304      	movs	r3, #4
 800246c:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 800246e:	f000 fd5d 	bl	8002f2c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d102      	bne.n	800247e <vTaskPrioritySet+0x46>
 8002478:	4b4c      	ldr	r3, [pc, #304]	@ (80025ac <vTaskPrioritySet+0x174>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	e000      	b.n	8002480 <vTaskPrioritySet+0x48>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	4618      	mov	r0, r3
 8002486:	f002 fea9 	bl	80051dc <SEGGER_SYSVIEW_ShrinkId>
 800248a:	4603      	mov	r3, r0
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	4619      	mov	r1, r3
 8002490:	2028      	movs	r0, #40	@ 0x28
 8002492:	f002 fa23 	bl	80048dc <SEGGER_SYSVIEW_RecordU32x2>
 8002496:	69b8      	ldr	r0, [r7, #24]
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a2:	461a      	mov	r2, r3
 80024a4:	2300      	movs	r3, #0
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	4613      	mov	r3, r2
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	f001 f98a 	bl	80037c4 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
                {
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024b4:	617b      	str	r3, [r7, #20]
                {
                    uxCurrentBasePriority = pxTCB->uxPriority;
                }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d06f      	beq.n	800259e <vTaskPrioritySet+0x166>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d90d      	bls.n	80024e2 <vTaskPrioritySet+0xaa>
                {
                    if( pxTCB != pxCurrentTCB )
 80024c6:	4b39      	ldr	r3, [pc, #228]	@ (80025ac <vTaskPrioritySet+0x174>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d00f      	beq.n	80024f0 <vTaskPrioritySet+0xb8>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80024d0:	4b36      	ldr	r3, [pc, #216]	@ (80025ac <vTaskPrioritySet+0x174>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d309      	bcc.n	80024f0 <vTaskPrioritySet+0xb8>
                        {
                            xYieldRequired = pdTRUE;
 80024dc:	2301      	movs	r3, #1
 80024de:	61fb      	str	r3, [r7, #28]
 80024e0:	e006      	b.n	80024f0 <vTaskPrioritySet+0xb8>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 80024e2:	4b32      	ldr	r3, [pc, #200]	@ (80025ac <vTaskPrioritySet+0x174>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d101      	bne.n	80024f0 <vTaskPrioritySet+0xb8>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 80024ec:	2301      	movs	r3, #1
 80024ee:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f4:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* Only change the priority being used if the task is not
                         * currently using an inherited priority. */
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fe:	429a      	cmp	r2, r3
 8002500:	d102      	bne.n	8002508 <vTaskPrioritySet+0xd0>
                        {
                            pxTCB->uxPriority = uxNewPriority;
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	62da      	str	r2, [r3, #44]	@ 0x2c
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        /* The base priority gets set whatever. */
                        pxTCB->uxBasePriority = uxNewPriority;
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	649a      	str	r2, [r3, #72]	@ 0x48
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	2b00      	cmp	r3, #0
 8002514:	db04      	blt.n	8002520 <vTaskPrioritySet+0xe8>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	f1c3 0205 	rsb	r2, r3, #5
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	6959      	ldr	r1, [r3, #20]
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4613      	mov	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4a20      	ldr	r2, [pc, #128]	@ (80025b0 <vTaskPrioritySet+0x178>)
 8002530:	4413      	add	r3, r2
 8002532:	4299      	cmp	r1, r3
 8002534:	d128      	bne.n	8002588 <vTaskPrioritySet+0x150>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to it's new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	3304      	adds	r3, #4
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff fded 	bl	800211a <uxListRemove>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <vTaskPrioritySet+0x122>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8002546:	2201      	movs	r2, #1
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43da      	mvns	r2, r3
 8002550:	4b18      	ldr	r3, [pc, #96]	@ (80025b4 <vTaskPrioritySet+0x17c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4013      	ands	r3, r2
 8002556:	4a17      	ldr	r2, [pc, #92]	@ (80025b4 <vTaskPrioritySet+0x17c>)
 8002558:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

					prvReaddTaskToReadyList( pxTCB );
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255e:	2201      	movs	r2, #1
 8002560:	409a      	lsls	r2, r3
 8002562:	4b14      	ldr	r3, [pc, #80]	@ (80025b4 <vTaskPrioritySet+0x17c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4313      	orrs	r3, r2
 8002568:	4a12      	ldr	r2, [pc, #72]	@ (80025b4 <vTaskPrioritySet+0x17c>)
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4a0d      	ldr	r2, [pc, #52]	@ (80025b0 <vTaskPrioritySet+0x178>)
 800257a:	441a      	add	r2, r3
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	3304      	adds	r3, #4
 8002580:	4619      	mov	r1, r3
 8002582:	4610      	mov	r0, r2
 8002584:	f7ff fda5 	bl	80020d2 <vListInsertEnd>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d007      	beq.n	800259e <vTaskPrioritySet+0x166>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 800258e:	4b0a      	ldr	r3, [pc, #40]	@ (80025b8 <vTaskPrioritySet+0x180>)
 8002590:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	f3bf 8f4f 	dsb	sy
 800259a:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 800259e:	f000 fcf7 	bl	8002f90 <vPortExitCritical>
    }
 80025a2:	bf00      	nop
 80025a4:	3720      	adds	r7, #32
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20000084 	.word	0x20000084
 80025b0:	20000088 	.word	0x20000088
 80025b4:	20000164 	.word	0x20000164
 80025b8:	e000ed04 	.word	0xe000ed04

080025bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80025c2:	4b24      	ldr	r3, [pc, #144]	@ (8002654 <vTaskStartScheduler+0x98>)
 80025c4:	9301      	str	r3, [sp, #4]
 80025c6:	2300      	movs	r3, #0
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	2300      	movs	r3, #0
 80025cc:	2282      	movs	r2, #130	@ 0x82
 80025ce:	4922      	ldr	r1, [pc, #136]	@ (8002658 <vTaskStartScheduler+0x9c>)
 80025d0:	4822      	ldr	r0, [pc, #136]	@ (800265c <vTaskStartScheduler+0xa0>)
 80025d2:	f7ff fdcc 	bl	800216e <xTaskCreate>
 80025d6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d124      	bne.n	8002628 <vTaskStartScheduler+0x6c>
        __asm volatile
 80025de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025e2:	f383 8811 	msr	BASEPRI, r3
 80025e6:	f3bf 8f6f 	isb	sy
 80025ea:	f3bf 8f4f 	dsb	sy
 80025ee:	60bb      	str	r3, [r7, #8]
    }
 80025f0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80025f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002660 <vTaskStartScheduler+0xa4>)
 80025f4:	f04f 32ff 	mov.w	r2, #4294967295
 80025f8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80025fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002664 <vTaskStartScheduler+0xa8>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002600:	4b19      	ldr	r3, [pc, #100]	@ (8002668 <vTaskStartScheduler+0xac>)
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002606:	4b19      	ldr	r3, [pc, #100]	@ (800266c <vTaskStartScheduler+0xb0>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	4b12      	ldr	r3, [pc, #72]	@ (8002654 <vTaskStartScheduler+0x98>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d102      	bne.n	8002618 <vTaskStartScheduler+0x5c>
 8002612:	f002 fd01 	bl	8005018 <SEGGER_SYSVIEW_OnIdle>
 8002616:	e004      	b.n	8002622 <vTaskStartScheduler+0x66>
 8002618:	4b14      	ldr	r3, [pc, #80]	@ (800266c <vTaskStartScheduler+0xb0>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f002 fd59 	bl	80050d4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002622:	f000 fb5f 	bl	8002ce4 <xPortStartScheduler>
 8002626:	e00f      	b.n	8002648 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262e:	d10b      	bne.n	8002648 <vTaskStartScheduler+0x8c>
        __asm volatile
 8002630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002634:	f383 8811 	msr	BASEPRI, r3
 8002638:	f3bf 8f6f 	isb	sy
 800263c:	f3bf 8f4f 	dsb	sy
 8002640:	607b      	str	r3, [r7, #4]
    }
 8002642:	bf00      	nop
 8002644:	bf00      	nop
 8002646:	e7fd      	b.n	8002644 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002648:	4b09      	ldr	r3, [pc, #36]	@ (8002670 <vTaskStartScheduler+0xb4>)
 800264a:	681b      	ldr	r3, [r3, #0]
}
 800264c:	bf00      	nop
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20000180 	.word	0x20000180
 8002658:	080055b4 	.word	0x080055b4
 800265c:	08002a69 	.word	0x08002a69
 8002660:	2000017c 	.word	0x2000017c
 8002664:	20000168 	.word	0x20000168
 8002668:	20000160 	.word	0x20000160
 800266c:	20000084 	.word	0x20000084
 8002670:	2000000c 	.word	0x2000000c

08002674 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002678:	4b04      	ldr	r3, [pc, #16]	@ (800268c <vTaskSuspendAll+0x18>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	3301      	adds	r3, #1
 800267e:	4a03      	ldr	r2, [pc, #12]	@ (800268c <vTaskSuspendAll+0x18>)
 8002680:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002682:	bf00      	nop
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	20000184 	.word	0x20000184

08002690 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800269a:	2300      	movs	r3, #0
 800269c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800269e:	4b44      	ldr	r3, [pc, #272]	@ (80027b0 <xTaskResumeAll+0x120>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10b      	bne.n	80026be <xTaskResumeAll+0x2e>
        __asm volatile
 80026a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026aa:	f383 8811 	msr	BASEPRI, r3
 80026ae:	f3bf 8f6f 	isb	sy
 80026b2:	f3bf 8f4f 	dsb	sy
 80026b6:	603b      	str	r3, [r7, #0]
    }
 80026b8:	bf00      	nop
 80026ba:	bf00      	nop
 80026bc:	e7fd      	b.n	80026ba <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80026be:	f000 fc35 	bl	8002f2c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80026c2:	4b3b      	ldr	r3, [pc, #236]	@ (80027b0 <xTaskResumeAll+0x120>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	4a39      	ldr	r2, [pc, #228]	@ (80027b0 <xTaskResumeAll+0x120>)
 80026ca:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026cc:	4b38      	ldr	r3, [pc, #224]	@ (80027b0 <xTaskResumeAll+0x120>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d165      	bne.n	80027a0 <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80026d4:	4b37      	ldr	r3, [pc, #220]	@ (80027b4 <xTaskResumeAll+0x124>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d061      	beq.n	80027a0 <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026dc:	e032      	b.n	8002744 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026de:	4b36      	ldr	r3, [pc, #216]	@ (80027b8 <xTaskResumeAll+0x128>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	3318      	adds	r3, #24
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff fd15 	bl	800211a <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	3304      	adds	r3, #4
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff fd10 	bl	800211a <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f002 fd2b 	bl	8005158 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002706:	2201      	movs	r2, #1
 8002708:	409a      	lsls	r2, r3
 800270a:	4b2c      	ldr	r3, [pc, #176]	@ (80027bc <xTaskResumeAll+0x12c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4313      	orrs	r3, r2
 8002710:	4a2a      	ldr	r2, [pc, #168]	@ (80027bc <xTaskResumeAll+0x12c>)
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4a27      	ldr	r2, [pc, #156]	@ (80027c0 <xTaskResumeAll+0x130>)
 8002722:	441a      	add	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	3304      	adds	r3, #4
 8002728:	4619      	mov	r1, r3
 800272a:	4610      	mov	r0, r2
 800272c:	f7ff fcd1 	bl	80020d2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002734:	4b23      	ldr	r3, [pc, #140]	@ (80027c4 <xTaskResumeAll+0x134>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800273a:	429a      	cmp	r2, r3
 800273c:	d302      	bcc.n	8002744 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 800273e:	4b22      	ldr	r3, [pc, #136]	@ (80027c8 <xTaskResumeAll+0x138>)
 8002740:	2201      	movs	r2, #1
 8002742:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002744:	4b1c      	ldr	r3, [pc, #112]	@ (80027b8 <xTaskResumeAll+0x128>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1c8      	bne.n	80026de <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002752:	f000 fa1f 	bl	8002b94 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002756:	4b1d      	ldr	r3, [pc, #116]	@ (80027cc <xTaskResumeAll+0x13c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d010      	beq.n	8002784 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002762:	f000 f859 	bl	8002818 <xTaskIncrementTick>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d002      	beq.n	8002772 <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 800276c:	4b16      	ldr	r3, [pc, #88]	@ (80027c8 <xTaskResumeAll+0x138>)
 800276e:	2201      	movs	r2, #1
 8002770:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3b01      	subs	r3, #1
 8002776:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f1      	bne.n	8002762 <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 800277e:	4b13      	ldr	r3, [pc, #76]	@ (80027cc <xTaskResumeAll+0x13c>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002784:	4b10      	ldr	r3, [pc, #64]	@ (80027c8 <xTaskResumeAll+0x138>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d009      	beq.n	80027a0 <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800278c:	2301      	movs	r3, #1
 800278e:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002790:	4b0f      	ldr	r3, [pc, #60]	@ (80027d0 <xTaskResumeAll+0x140>)
 8002792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	f3bf 8f4f 	dsb	sy
 800279c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80027a0:	f000 fbf6 	bl	8002f90 <vPortExitCritical>

    return xAlreadyYielded;
 80027a4:	68bb      	ldr	r3, [r7, #8]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000184 	.word	0x20000184
 80027b4:	2000015c 	.word	0x2000015c
 80027b8:	2000011c 	.word	0x2000011c
 80027bc:	20000164 	.word	0x20000164
 80027c0:	20000088 	.word	0x20000088
 80027c4:	20000084 	.word	0x20000084
 80027c8:	20000170 	.word	0x20000170
 80027cc:	2000016c 	.word	0x2000016c
 80027d0:	e000ed04 	.word	0xe000ed04

080027d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80027da:	4b05      	ldr	r3, [pc, #20]	@ (80027f0 <xTaskGetTickCount+0x1c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80027e0:	687b      	ldr	r3, [r7, #4]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	20000160 	.word	0x20000160

080027f4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80027fa:	f000 fc87 	bl	800310c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80027fe:	2300      	movs	r3, #0
 8002800:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002802:	4b04      	ldr	r3, [pc, #16]	@ (8002814 <xTaskGetTickCountFromISR+0x20>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002808:	683b      	ldr	r3, [r7, #0]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20000160 	.word	0x20000160

08002818 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002822:	4b51      	ldr	r3, [pc, #324]	@ (8002968 <xTaskIncrementTick+0x150>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f040 8093 	bne.w	8002952 <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800282c:	4b4f      	ldr	r3, [pc, #316]	@ (800296c <xTaskIncrementTick+0x154>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	3301      	adds	r3, #1
 8002832:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002834:	4a4d      	ldr	r2, [pc, #308]	@ (800296c <xTaskIncrementTick+0x154>)
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d121      	bne.n	8002884 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002840:	4b4b      	ldr	r3, [pc, #300]	@ (8002970 <xTaskIncrementTick+0x158>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00b      	beq.n	8002862 <xTaskIncrementTick+0x4a>
        __asm volatile
 800284a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800284e:	f383 8811 	msr	BASEPRI, r3
 8002852:	f3bf 8f6f 	isb	sy
 8002856:	f3bf 8f4f 	dsb	sy
 800285a:	603b      	str	r3, [r7, #0]
    }
 800285c:	bf00      	nop
 800285e:	bf00      	nop
 8002860:	e7fd      	b.n	800285e <xTaskIncrementTick+0x46>
 8002862:	4b43      	ldr	r3, [pc, #268]	@ (8002970 <xTaskIncrementTick+0x158>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	4b42      	ldr	r3, [pc, #264]	@ (8002974 <xTaskIncrementTick+0x15c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a40      	ldr	r2, [pc, #256]	@ (8002970 <xTaskIncrementTick+0x158>)
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	4a40      	ldr	r2, [pc, #256]	@ (8002974 <xTaskIncrementTick+0x15c>)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	4b40      	ldr	r3, [pc, #256]	@ (8002978 <xTaskIncrementTick+0x160>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	3301      	adds	r3, #1
 800287c:	4a3e      	ldr	r2, [pc, #248]	@ (8002978 <xTaskIncrementTick+0x160>)
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	f000 f988 	bl	8002b94 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002884:	4b3d      	ldr	r3, [pc, #244]	@ (800297c <xTaskIncrementTick+0x164>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	429a      	cmp	r2, r3
 800288c:	d34c      	bcc.n	8002928 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800288e:	4b38      	ldr	r3, [pc, #224]	@ (8002970 <xTaskIncrementTick+0x158>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d104      	bne.n	80028a2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002898:	4b38      	ldr	r3, [pc, #224]	@ (800297c <xTaskIncrementTick+0x164>)
 800289a:	f04f 32ff 	mov.w	r2, #4294967295
 800289e:	601a      	str	r2, [r3, #0]
                    break;
 80028a0:	e042      	b.n	8002928 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028a2:	4b33      	ldr	r3, [pc, #204]	@ (8002970 <xTaskIncrementTick+0x158>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d203      	bcs.n	80028c2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80028ba:	4a30      	ldr	r2, [pc, #192]	@ (800297c <xTaskIncrementTick+0x164>)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80028c0:	e032      	b.n	8002928 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	3304      	adds	r3, #4
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff fc27 	bl	800211a <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d004      	beq.n	80028de <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	3318      	adds	r3, #24
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff fc1e 	bl	800211a <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f002 fc39 	bl	8005158 <SEGGER_SYSVIEW_OnTaskStartReady>
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ea:	2201      	movs	r2, #1
 80028ec:	409a      	lsls	r2, r3
 80028ee:	4b24      	ldr	r3, [pc, #144]	@ (8002980 <xTaskIncrementTick+0x168>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	4a22      	ldr	r2, [pc, #136]	@ (8002980 <xTaskIncrementTick+0x168>)
 80028f6:	6013      	str	r3, [r2, #0]
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4a1f      	ldr	r2, [pc, #124]	@ (8002984 <xTaskIncrementTick+0x16c>)
 8002906:	441a      	add	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	3304      	adds	r3, #4
 800290c:	4619      	mov	r1, r3
 800290e:	4610      	mov	r0, r2
 8002910:	f7ff fbdf 	bl	80020d2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002918:	4b1b      	ldr	r3, [pc, #108]	@ (8002988 <xTaskIncrementTick+0x170>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291e:	429a      	cmp	r2, r3
 8002920:	d3b5      	bcc.n	800288e <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002922:	2301      	movs	r3, #1
 8002924:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002926:	e7b2      	b.n	800288e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002928:	4b17      	ldr	r3, [pc, #92]	@ (8002988 <xTaskIncrementTick+0x170>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800292e:	4915      	ldr	r1, [pc, #84]	@ (8002984 <xTaskIncrementTick+0x16c>)
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d901      	bls.n	8002944 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 8002940:	2301      	movs	r3, #1
 8002942:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002944:	4b11      	ldr	r3, [pc, #68]	@ (800298c <xTaskIncrementTick+0x174>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d007      	beq.n	800295c <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 800294c:	2301      	movs	r3, #1
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	e004      	b.n	800295c <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002952:	4b0f      	ldr	r3, [pc, #60]	@ (8002990 <xTaskIncrementTick+0x178>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	3301      	adds	r3, #1
 8002958:	4a0d      	ldr	r2, [pc, #52]	@ (8002990 <xTaskIncrementTick+0x178>)
 800295a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800295c:	697b      	ldr	r3, [r7, #20]
}
 800295e:	4618      	mov	r0, r3
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20000184 	.word	0x20000184
 800296c:	20000160 	.word	0x20000160
 8002970:	20000114 	.word	0x20000114
 8002974:	20000118 	.word	0x20000118
 8002978:	20000174 	.word	0x20000174
 800297c:	2000017c 	.word	0x2000017c
 8002980:	20000164 	.word	0x20000164
 8002984:	20000088 	.word	0x20000088
 8002988:	20000084 	.word	0x20000084
 800298c:	20000170 	.word	0x20000170
 8002990:	2000016c 	.word	0x2000016c

08002994 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800299a:	4b2d      	ldr	r3, [pc, #180]	@ (8002a50 <vTaskSwitchContext+0xbc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80029a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002a54 <vTaskSwitchContext+0xc0>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80029a8:	e04e      	b.n	8002a48 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 80029aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002a54 <vTaskSwitchContext+0xc0>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029b0:	4b29      	ldr	r3, [pc, #164]	@ (8002a58 <vTaskSwitchContext+0xc4>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	fab3 f383 	clz	r3, r3
 80029bc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80029be:	7afb      	ldrb	r3, [r7, #11]
 80029c0:	f1c3 031f 	rsb	r3, r3, #31
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	4925      	ldr	r1, [pc, #148]	@ (8002a5c <vTaskSwitchContext+0xc8>)
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10b      	bne.n	80029f2 <vTaskSwitchContext+0x5e>
        __asm volatile
 80029da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029de:	f383 8811 	msr	BASEPRI, r3
 80029e2:	f3bf 8f6f 	isb	sy
 80029e6:	f3bf 8f4f 	dsb	sy
 80029ea:	607b      	str	r3, [r7, #4]
    }
 80029ec:	bf00      	nop
 80029ee:	bf00      	nop
 80029f0:	e7fd      	b.n	80029ee <vTaskSwitchContext+0x5a>
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4a17      	ldr	r2, [pc, #92]	@ (8002a5c <vTaskSwitchContext+0xc8>)
 80029fe:	4413      	add	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	605a      	str	r2, [r3, #4]
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	3308      	adds	r3, #8
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d104      	bne.n	8002a22 <vTaskSwitchContext+0x8e>
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4a0d      	ldr	r2, [pc, #52]	@ (8002a60 <vTaskSwitchContext+0xcc>)
 8002a2a:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a60 <vTaskSwitchContext+0xcc>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	4b0c      	ldr	r3, [pc, #48]	@ (8002a64 <vTaskSwitchContext+0xd0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d102      	bne.n	8002a3e <vTaskSwitchContext+0xaa>
 8002a38:	f002 faee 	bl	8005018 <SEGGER_SYSVIEW_OnIdle>
}
 8002a3c:	e004      	b.n	8002a48 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8002a3e:	4b08      	ldr	r3, [pc, #32]	@ (8002a60 <vTaskSwitchContext+0xcc>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f002 fb46 	bl	80050d4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002a48:	bf00      	nop
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20000184 	.word	0x20000184
 8002a54:	20000170 	.word	0x20000170
 8002a58:	20000164 	.word	0x20000164
 8002a5c:	20000088 	.word	0x20000088
 8002a60:	20000084 	.word	0x20000084
 8002a64:	20000180 	.word	0x20000180

08002a68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002a70:	f000 f852 	bl	8002b18 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002a74:	4b06      	ldr	r3, [pc, #24]	@ (8002a90 <prvIdleTask+0x28>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d9f9      	bls.n	8002a70 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002a7c:	4b05      	ldr	r3, [pc, #20]	@ (8002a94 <prvIdleTask+0x2c>)
 8002a7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	f3bf 8f4f 	dsb	sy
 8002a88:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002a8c:	e7f0      	b.n	8002a70 <prvIdleTask+0x8>
 8002a8e:	bf00      	nop
 8002a90:	20000088 	.word	0x20000088
 8002a94:	e000ed04 	.word	0xe000ed04

08002a98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	607b      	str	r3, [r7, #4]
 8002aa2:	e00c      	b.n	8002abe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4a12      	ldr	r2, [pc, #72]	@ (8002af8 <prvInitialiseTaskLists+0x60>)
 8002ab0:	4413      	add	r3, r2
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fae0 	bl	8002078 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3301      	adds	r3, #1
 8002abc:	607b      	str	r3, [r7, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b04      	cmp	r3, #4
 8002ac2:	d9ef      	bls.n	8002aa4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002ac4:	480d      	ldr	r0, [pc, #52]	@ (8002afc <prvInitialiseTaskLists+0x64>)
 8002ac6:	f7ff fad7 	bl	8002078 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002aca:	480d      	ldr	r0, [pc, #52]	@ (8002b00 <prvInitialiseTaskLists+0x68>)
 8002acc:	f7ff fad4 	bl	8002078 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002ad0:	480c      	ldr	r0, [pc, #48]	@ (8002b04 <prvInitialiseTaskLists+0x6c>)
 8002ad2:	f7ff fad1 	bl	8002078 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002ad6:	480c      	ldr	r0, [pc, #48]	@ (8002b08 <prvInitialiseTaskLists+0x70>)
 8002ad8:	f7ff face 	bl	8002078 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002adc:	480b      	ldr	r0, [pc, #44]	@ (8002b0c <prvInitialiseTaskLists+0x74>)
 8002ade:	f7ff facb 	bl	8002078 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8002b10 <prvInitialiseTaskLists+0x78>)
 8002ae4:	4a05      	ldr	r2, [pc, #20]	@ (8002afc <prvInitialiseTaskLists+0x64>)
 8002ae6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8002b14 <prvInitialiseTaskLists+0x7c>)
 8002aea:	4a05      	ldr	r2, [pc, #20]	@ (8002b00 <prvInitialiseTaskLists+0x68>)
 8002aec:	601a      	str	r2, [r3, #0]
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000088 	.word	0x20000088
 8002afc:	200000ec 	.word	0x200000ec
 8002b00:	20000100 	.word	0x20000100
 8002b04:	2000011c 	.word	0x2000011c
 8002b08:	20000130 	.word	0x20000130
 8002b0c:	20000148 	.word	0x20000148
 8002b10:	20000114 	.word	0x20000114
 8002b14:	20000118 	.word	0x20000118

08002b18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b1e:	e019      	b.n	8002b54 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002b20:	f000 fa04 	bl	8002f2c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b24:	4b10      	ldr	r3, [pc, #64]	@ (8002b68 <prvCheckTasksWaitingTermination+0x50>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3304      	adds	r3, #4
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff faf2 	bl	800211a <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002b36:	4b0d      	ldr	r3, [pc, #52]	@ (8002b6c <prvCheckTasksWaitingTermination+0x54>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	4a0b      	ldr	r2, [pc, #44]	@ (8002b6c <prvCheckTasksWaitingTermination+0x54>)
 8002b3e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002b40:	4b0b      	ldr	r3, [pc, #44]	@ (8002b70 <prvCheckTasksWaitingTermination+0x58>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	4a0a      	ldr	r2, [pc, #40]	@ (8002b70 <prvCheckTasksWaitingTermination+0x58>)
 8002b48:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002b4a:	f000 fa21 	bl	8002f90 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f810 	bl	8002b74 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b54:	4b06      	ldr	r3, [pc, #24]	@ (8002b70 <prvCheckTasksWaitingTermination+0x58>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1e1      	bne.n	8002b20 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002b5c:	bf00      	nop
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20000130 	.word	0x20000130
 8002b6c:	2000015c 	.word	0x2000015c
 8002b70:	20000144 	.word	0x20000144

08002b74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 fbe7 	bl	8003354 <vPortFree>
                vPortFree( pxTCB );
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fbe4 	bl	8003354 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b98:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc4 <prvResetNextTaskUnblockTime+0x30>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d104      	bne.n	8002bac <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002ba2:	4b09      	ldr	r3, [pc, #36]	@ (8002bc8 <prvResetNextTaskUnblockTime+0x34>)
 8002ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002baa:	e005      	b.n	8002bb8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002bac:	4b05      	ldr	r3, [pc, #20]	@ (8002bc4 <prvResetNextTaskUnblockTime+0x30>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a04      	ldr	r2, [pc, #16]	@ (8002bc8 <prvResetNextTaskUnblockTime+0x34>)
 8002bb6:	6013      	str	r3, [r2, #0]
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	20000114 	.word	0x20000114
 8002bc8:	2000017c 	.word	0x2000017c

08002bcc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	3b04      	subs	r3, #4
 8002bdc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002be4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	3b04      	subs	r3, #4
 8002bea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f023 0201 	bic.w	r2, r3, #1
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	3b04      	subs	r3, #4
 8002bfa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002bfc:	4a0c      	ldr	r2, [pc, #48]	@ (8002c30 <pxPortInitialiseStack+0x64>)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	3b14      	subs	r3, #20
 8002c06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	3b04      	subs	r3, #4
 8002c12:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f06f 0202 	mvn.w	r2, #2
 8002c1a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	3b20      	subs	r3, #32
 8002c20:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002c22:	68fb      	ldr	r3, [r7, #12]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	08002c35 	.word	0x08002c35

08002c34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002c3e:	4b13      	ldr	r3, [pc, #76]	@ (8002c8c <prvTaskExitError+0x58>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c46:	d00b      	beq.n	8002c60 <prvTaskExitError+0x2c>
        __asm volatile
 8002c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c4c:	f383 8811 	msr	BASEPRI, r3
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	60fb      	str	r3, [r7, #12]
    }
 8002c5a:	bf00      	nop
 8002c5c:	bf00      	nop
 8002c5e:	e7fd      	b.n	8002c5c <prvTaskExitError+0x28>
        __asm volatile
 8002c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c64:	f383 8811 	msr	BASEPRI, r3
 8002c68:	f3bf 8f6f 	isb	sy
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	60bb      	str	r3, [r7, #8]
    }
 8002c72:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002c74:	bf00      	nop
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0fc      	beq.n	8002c76 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002c7c:	bf00      	nop
 8002c7e:	bf00      	nop
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	20000010 	.word	0x20000010

08002c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002c90:	4b07      	ldr	r3, [pc, #28]	@ (8002cb0 <pxCurrentTCBConst2>)
 8002c92:	6819      	ldr	r1, [r3, #0]
 8002c94:	6808      	ldr	r0, [r1, #0]
 8002c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c9a:	f380 8809 	msr	PSP, r0
 8002c9e:	f3bf 8f6f 	isb	sy
 8002ca2:	f04f 0000 	mov.w	r0, #0
 8002ca6:	f380 8811 	msr	BASEPRI, r0
 8002caa:	4770      	bx	lr
 8002cac:	f3af 8000 	nop.w

08002cb0 <pxCurrentTCBConst2>:
 8002cb0:	20000084 	.word	0x20000084
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop

08002cb8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002cb8:	4808      	ldr	r0, [pc, #32]	@ (8002cdc <prvPortStartFirstTask+0x24>)
 8002cba:	6800      	ldr	r0, [r0, #0]
 8002cbc:	6800      	ldr	r0, [r0, #0]
 8002cbe:	f380 8808 	msr	MSP, r0
 8002cc2:	f04f 0000 	mov.w	r0, #0
 8002cc6:	f380 8814 	msr	CONTROL, r0
 8002cca:	b662      	cpsie	i
 8002ccc:	b661      	cpsie	f
 8002cce:	f3bf 8f4f 	dsb	sy
 8002cd2:	f3bf 8f6f 	isb	sy
 8002cd6:	df00      	svc	0
 8002cd8:	bf00      	nop
 8002cda:	0000      	.short	0x0000
 8002cdc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002ce0:	bf00      	nop
 8002ce2:	bf00      	nop

08002ce4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002cea:	4b47      	ldr	r3, [pc, #284]	@ (8002e08 <xPortStartScheduler+0x124>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a47      	ldr	r2, [pc, #284]	@ (8002e0c <xPortStartScheduler+0x128>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d10b      	bne.n	8002d0c <xPortStartScheduler+0x28>
        __asm volatile
 8002cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf8:	f383 8811 	msr	BASEPRI, r3
 8002cfc:	f3bf 8f6f 	isb	sy
 8002d00:	f3bf 8f4f 	dsb	sy
 8002d04:	613b      	str	r3, [r7, #16]
    }
 8002d06:	bf00      	nop
 8002d08:	bf00      	nop
 8002d0a:	e7fd      	b.n	8002d08 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002d0c:	4b3e      	ldr	r3, [pc, #248]	@ (8002e08 <xPortStartScheduler+0x124>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a3f      	ldr	r2, [pc, #252]	@ (8002e10 <xPortStartScheduler+0x12c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d10b      	bne.n	8002d2e <xPortStartScheduler+0x4a>
        __asm volatile
 8002d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d1a:	f383 8811 	msr	BASEPRI, r3
 8002d1e:	f3bf 8f6f 	isb	sy
 8002d22:	f3bf 8f4f 	dsb	sy
 8002d26:	60fb      	str	r3, [r7, #12]
    }
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
 8002d2c:	e7fd      	b.n	8002d2a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002d2e:	4b39      	ldr	r3, [pc, #228]	@ (8002e14 <xPortStartScheduler+0x130>)
 8002d30:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	22ff      	movs	r2, #255	@ 0xff
 8002d3e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	4b31      	ldr	r3, [pc, #196]	@ (8002e18 <xPortStartScheduler+0x134>)
 8002d54:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002d56:	4b31      	ldr	r3, [pc, #196]	@ (8002e1c <xPortStartScheduler+0x138>)
 8002d58:	2207      	movs	r2, #7
 8002d5a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d5c:	e009      	b.n	8002d72 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8002d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8002e1c <xPortStartScheduler+0x138>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	4a2d      	ldr	r2, [pc, #180]	@ (8002e1c <xPortStartScheduler+0x138>)
 8002d66:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d72:	78fb      	ldrb	r3, [r7, #3]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d7a:	2b80      	cmp	r3, #128	@ 0x80
 8002d7c:	d0ef      	beq.n	8002d5e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002d7e:	4b27      	ldr	r3, [pc, #156]	@ (8002e1c <xPortStartScheduler+0x138>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f1c3 0307 	rsb	r3, r3, #7
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d00b      	beq.n	8002da2 <xPortStartScheduler+0xbe>
        __asm volatile
 8002d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d8e:	f383 8811 	msr	BASEPRI, r3
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	f3bf 8f4f 	dsb	sy
 8002d9a:	60bb      	str	r3, [r7, #8]
    }
 8002d9c:	bf00      	nop
 8002d9e:	bf00      	nop
 8002da0:	e7fd      	b.n	8002d9e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002da2:	4b1e      	ldr	r3, [pc, #120]	@ (8002e1c <xPortStartScheduler+0x138>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	021b      	lsls	r3, r3, #8
 8002da8:	4a1c      	ldr	r2, [pc, #112]	@ (8002e1c <xPortStartScheduler+0x138>)
 8002daa:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002dac:	4b1b      	ldr	r3, [pc, #108]	@ (8002e1c <xPortStartScheduler+0x138>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002db4:	4a19      	ldr	r2, [pc, #100]	@ (8002e1c <xPortStartScheduler+0x138>)
 8002db6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002dc0:	4b17      	ldr	r3, [pc, #92]	@ (8002e20 <xPortStartScheduler+0x13c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a16      	ldr	r2, [pc, #88]	@ (8002e20 <xPortStartScheduler+0x13c>)
 8002dc6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002dca:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002dcc:	4b14      	ldr	r3, [pc, #80]	@ (8002e20 <xPortStartScheduler+0x13c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a13      	ldr	r2, [pc, #76]	@ (8002e20 <xPortStartScheduler+0x13c>)
 8002dd2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002dd6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002dd8:	f000 f968 	bl	80030ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002ddc:	4b11      	ldr	r3, [pc, #68]	@ (8002e24 <xPortStartScheduler+0x140>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002de2:	f000 f987 	bl	80030f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002de6:	4b10      	ldr	r3, [pc, #64]	@ (8002e28 <xPortStartScheduler+0x144>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a0f      	ldr	r2, [pc, #60]	@ (8002e28 <xPortStartScheduler+0x144>)
 8002dec:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002df0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002df2:	f7ff ff61 	bl	8002cb8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002df6:	f7ff fdcd 	bl	8002994 <vTaskSwitchContext>
    prvTaskExitError();
 8002dfa:	f7ff ff1b 	bl	8002c34 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	e000ed00 	.word	0xe000ed00
 8002e0c:	410fc271 	.word	0x410fc271
 8002e10:	410fc270 	.word	0x410fc270
 8002e14:	e000e400 	.word	0xe000e400
 8002e18:	20000188 	.word	0x20000188
 8002e1c:	2000018c 	.word	0x2000018c
 8002e20:	e000ed20 	.word	0xe000ed20
 8002e24:	20000010 	.word	0x20000010
 8002e28:	e000ef34 	.word	0xe000ef34

08002e2c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002e32:	4b38      	ldr	r3, [pc, #224]	@ (8002f14 <vInitPrioGroupValue+0xe8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a38      	ldr	r2, [pc, #224]	@ (8002f18 <vInitPrioGroupValue+0xec>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d10b      	bne.n	8002e54 <vInitPrioGroupValue+0x28>
        __asm volatile
 8002e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e40:	f383 8811 	msr	BASEPRI, r3
 8002e44:	f3bf 8f6f 	isb	sy
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	613b      	str	r3, [r7, #16]
    }
 8002e4e:	bf00      	nop
 8002e50:	bf00      	nop
 8002e52:	e7fd      	b.n	8002e50 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002e54:	4b2f      	ldr	r3, [pc, #188]	@ (8002f14 <vInitPrioGroupValue+0xe8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a30      	ldr	r2, [pc, #192]	@ (8002f1c <vInitPrioGroupValue+0xf0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d10b      	bne.n	8002e76 <vInitPrioGroupValue+0x4a>
        __asm volatile
 8002e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e62:	f383 8811 	msr	BASEPRI, r3
 8002e66:	f3bf 8f6f 	isb	sy
 8002e6a:	f3bf 8f4f 	dsb	sy
 8002e6e:	60fb      	str	r3, [r7, #12]
    }
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop
 8002e74:	e7fd      	b.n	8002e72 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002e76:	4b2a      	ldr	r3, [pc, #168]	@ (8002f20 <vInitPrioGroupValue+0xf4>)
 8002e78:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	22ff      	movs	r2, #255	@ 0xff
 8002e86:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	4b22      	ldr	r3, [pc, #136]	@ (8002f24 <vInitPrioGroupValue+0xf8>)
 8002e9c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002e9e:	4b22      	ldr	r3, [pc, #136]	@ (8002f28 <vInitPrioGroupValue+0xfc>)
 8002ea0:	2207      	movs	r2, #7
 8002ea2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ea4:	e009      	b.n	8002eba <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8002ea6:	4b20      	ldr	r3, [pc, #128]	@ (8002f28 <vInitPrioGroupValue+0xfc>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	4a1e      	ldr	r2, [pc, #120]	@ (8002f28 <vInitPrioGroupValue+0xfc>)
 8002eae:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002eb0:	78fb      	ldrb	r3, [r7, #3]
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002eba:	78fb      	ldrb	r3, [r7, #3]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec2:	2b80      	cmp	r3, #128	@ 0x80
 8002ec4:	d0ef      	beq.n	8002ea6 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002ec6:	4b18      	ldr	r3, [pc, #96]	@ (8002f28 <vInitPrioGroupValue+0xfc>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f1c3 0307 	rsb	r3, r3, #7
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d00b      	beq.n	8002eea <vInitPrioGroupValue+0xbe>
        __asm volatile
 8002ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ed6:	f383 8811 	msr	BASEPRI, r3
 8002eda:	f3bf 8f6f 	isb	sy
 8002ede:	f3bf 8f4f 	dsb	sy
 8002ee2:	60bb      	str	r3, [r7, #8]
    }
 8002ee4:	bf00      	nop
 8002ee6:	bf00      	nop
 8002ee8:	e7fd      	b.n	8002ee6 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002eea:	4b0f      	ldr	r3, [pc, #60]	@ (8002f28 <vInitPrioGroupValue+0xfc>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	021b      	lsls	r3, r3, #8
 8002ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8002f28 <vInitPrioGroupValue+0xfc>)
 8002ef2:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f28 <vInitPrioGroupValue+0xfc>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002efc:	4a0a      	ldr	r2, [pc, #40]	@ (8002f28 <vInitPrioGroupValue+0xfc>)
 8002efe:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002f08:	bf00      	nop
 8002f0a:	371c      	adds	r7, #28
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	e000ed00 	.word	0xe000ed00
 8002f18:	410fc271 	.word	0x410fc271
 8002f1c:	410fc270 	.word	0x410fc270
 8002f20:	e000e400 	.word	0xe000e400
 8002f24:	20000188 	.word	0x20000188
 8002f28:	2000018c 	.word	0x2000018c

08002f2c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
        __asm volatile
 8002f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f36:	f383 8811 	msr	BASEPRI, r3
 8002f3a:	f3bf 8f6f 	isb	sy
 8002f3e:	f3bf 8f4f 	dsb	sy
 8002f42:	607b      	str	r3, [r7, #4]
    }
 8002f44:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002f46:	4b10      	ldr	r3, [pc, #64]	@ (8002f88 <vPortEnterCritical+0x5c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	4a0e      	ldr	r2, [pc, #56]	@ (8002f88 <vPortEnterCritical+0x5c>)
 8002f4e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002f50:	4b0d      	ldr	r3, [pc, #52]	@ (8002f88 <vPortEnterCritical+0x5c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d110      	bne.n	8002f7a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002f58:	4b0c      	ldr	r3, [pc, #48]	@ (8002f8c <vPortEnterCritical+0x60>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00b      	beq.n	8002f7a <vPortEnterCritical+0x4e>
        __asm volatile
 8002f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f66:	f383 8811 	msr	BASEPRI, r3
 8002f6a:	f3bf 8f6f 	isb	sy
 8002f6e:	f3bf 8f4f 	dsb	sy
 8002f72:	603b      	str	r3, [r7, #0]
    }
 8002f74:	bf00      	nop
 8002f76:	bf00      	nop
 8002f78:	e7fd      	b.n	8002f76 <vPortEnterCritical+0x4a>
    }
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	20000010 	.word	0x20000010
 8002f8c:	e000ed04 	.word	0xe000ed04

08002f90 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002f96:	4b12      	ldr	r3, [pc, #72]	@ (8002fe0 <vPortExitCritical+0x50>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10b      	bne.n	8002fb6 <vPortExitCritical+0x26>
        __asm volatile
 8002f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa2:	f383 8811 	msr	BASEPRI, r3
 8002fa6:	f3bf 8f6f 	isb	sy
 8002faa:	f3bf 8f4f 	dsb	sy
 8002fae:	607b      	str	r3, [r7, #4]
    }
 8002fb0:	bf00      	nop
 8002fb2:	bf00      	nop
 8002fb4:	e7fd      	b.n	8002fb2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe0 <vPortExitCritical+0x50>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	4a08      	ldr	r2, [pc, #32]	@ (8002fe0 <vPortExitCritical+0x50>)
 8002fbe:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002fc0:	4b07      	ldr	r3, [pc, #28]	@ (8002fe0 <vPortExitCritical+0x50>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d105      	bne.n	8002fd4 <vPortExitCritical+0x44>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002fd2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	20000010 	.word	0x20000010
	...

08002ff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002ff0:	f3ef 8009 	mrs	r0, PSP
 8002ff4:	f3bf 8f6f 	isb	sy
 8002ff8:	4b15      	ldr	r3, [pc, #84]	@ (8003050 <pxCurrentTCBConst>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	f01e 0f10 	tst.w	lr, #16
 8003000:	bf08      	it	eq
 8003002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800300a:	6010      	str	r0, [r2, #0]
 800300c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003010:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003014:	f380 8811 	msr	BASEPRI, r0
 8003018:	f3bf 8f4f 	dsb	sy
 800301c:	f3bf 8f6f 	isb	sy
 8003020:	f7ff fcb8 	bl	8002994 <vTaskSwitchContext>
 8003024:	f04f 0000 	mov.w	r0, #0
 8003028:	f380 8811 	msr	BASEPRI, r0
 800302c:	bc09      	pop	{r0, r3}
 800302e:	6819      	ldr	r1, [r3, #0]
 8003030:	6808      	ldr	r0, [r1, #0]
 8003032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003036:	f01e 0f10 	tst.w	lr, #16
 800303a:	bf08      	it	eq
 800303c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003040:	f380 8809 	msr	PSP, r0
 8003044:	f3bf 8f6f 	isb	sy
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	f3af 8000 	nop.w

08003050 <pxCurrentTCBConst>:
 8003050:	20000084 	.word	0x20000084
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003054:	bf00      	nop
 8003056:	bf00      	nop

08003058 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
        __asm volatile
 800305e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003062:	f383 8811 	msr	BASEPRI, r3
 8003066:	f3bf 8f6f 	isb	sy
 800306a:	f3bf 8f4f 	dsb	sy
 800306e:	607b      	str	r3, [r7, #4]
    }
 8003070:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003072:	f001 ff57 	bl	8004f24 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003076:	f7ff fbcf 	bl	8002818 <xTaskIncrementTick>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d006      	beq.n	800308e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003080:	f001 ffae 	bl	8004fe0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003084:	4b08      	ldr	r3, [pc, #32]	@ (80030a8 <SysTick_Handler+0x50>)
 8003086:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	e001      	b.n	8003092 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800308e:	f001 ff8b 	bl	8004fa8 <SEGGER_SYSVIEW_RecordExitISR>
 8003092:	2300      	movs	r3, #0
 8003094:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	f383 8811 	msr	BASEPRI, r3
    }
 800309c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800309e:	bf00      	nop
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	e000ed04 	.word	0xe000ed04

080030ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80030b0:	4b0b      	ldr	r3, [pc, #44]	@ (80030e0 <vPortSetupTimerInterrupt+0x34>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80030b6:	4b0b      	ldr	r3, [pc, #44]	@ (80030e4 <vPortSetupTimerInterrupt+0x38>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80030bc:	4b0a      	ldr	r3, [pc, #40]	@ (80030e8 <vPortSetupTimerInterrupt+0x3c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a0a      	ldr	r2, [pc, #40]	@ (80030ec <vPortSetupTimerInterrupt+0x40>)
 80030c2:	fba2 2303 	umull	r2, r3, r2, r3
 80030c6:	099b      	lsrs	r3, r3, #6
 80030c8:	4a09      	ldr	r2, [pc, #36]	@ (80030f0 <vPortSetupTimerInterrupt+0x44>)
 80030ca:	3b01      	subs	r3, #1
 80030cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80030ce:	4b04      	ldr	r3, [pc, #16]	@ (80030e0 <vPortSetupTimerInterrupt+0x34>)
 80030d0:	2207      	movs	r2, #7
 80030d2:	601a      	str	r2, [r3, #0]
}
 80030d4:	bf00      	nop
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	e000e010 	.word	0xe000e010
 80030e4:	e000e018 	.word	0xe000e018
 80030e8:	20000000 	.word	0x20000000
 80030ec:	10624dd3 	.word	0x10624dd3
 80030f0:	e000e014 	.word	0xe000e014

080030f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80030f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003104 <vPortEnableVFP+0x10>
 80030f8:	6801      	ldr	r1, [r0, #0]
 80030fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80030fe:	6001      	str	r1, [r0, #0]
 8003100:	4770      	bx	lr
 8003102:	0000      	.short	0x0000
 8003104:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003108:	bf00      	nop
 800310a:	bf00      	nop

0800310c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003112:	f3ef 8305 	mrs	r3, IPSR
 8003116:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b0f      	cmp	r3, #15
 800311c:	d915      	bls.n	800314a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800311e:	4a18      	ldr	r2, [pc, #96]	@ (8003180 <vPortValidateInterruptPriority+0x74>)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4413      	add	r3, r2
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003128:	4b16      	ldr	r3, [pc, #88]	@ (8003184 <vPortValidateInterruptPriority+0x78>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	7afa      	ldrb	r2, [r7, #11]
 800312e:	429a      	cmp	r2, r3
 8003130:	d20b      	bcs.n	800314a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8003132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003136:	f383 8811 	msr	BASEPRI, r3
 800313a:	f3bf 8f6f 	isb	sy
 800313e:	f3bf 8f4f 	dsb	sy
 8003142:	607b      	str	r3, [r7, #4]
    }
 8003144:	bf00      	nop
 8003146:	bf00      	nop
 8003148:	e7fd      	b.n	8003146 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800314a:	4b0f      	ldr	r3, [pc, #60]	@ (8003188 <vPortValidateInterruptPriority+0x7c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003152:	4b0e      	ldr	r3, [pc, #56]	@ (800318c <vPortValidateInterruptPriority+0x80>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d90b      	bls.n	8003172 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800315a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800315e:	f383 8811 	msr	BASEPRI, r3
 8003162:	f3bf 8f6f 	isb	sy
 8003166:	f3bf 8f4f 	dsb	sy
 800316a:	603b      	str	r3, [r7, #0]
    }
 800316c:	bf00      	nop
 800316e:	bf00      	nop
 8003170:	e7fd      	b.n	800316e <vPortValidateInterruptPriority+0x62>
    }
 8003172:	bf00      	nop
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	e000e3f0 	.word	0xe000e3f0
 8003184:	20000188 	.word	0x20000188
 8003188:	e000ed0c 	.word	0xe000ed0c
 800318c:	2000018c 	.word	0x2000018c

08003190 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08a      	sub	sp, #40	@ 0x28
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003198:	2300      	movs	r3, #0
 800319a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800319c:	f7ff fa6a 	bl	8002674 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80031a0:	4b66      	ldr	r3, [pc, #408]	@ (800333c <pvPortMalloc+0x1ac>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80031a8:	f000 f938 	bl	800341c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80031ac:	4b64      	ldr	r3, [pc, #400]	@ (8003340 <pvPortMalloc+0x1b0>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f040 80a9 	bne.w	800330c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d02e      	beq.n	800321e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80031c0:	2208      	movs	r2, #8
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d228      	bcs.n	800321e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 80031cc:	2208      	movs	r2, #8
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4413      	add	r3, r2
 80031d2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d022      	beq.n	8003224 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f023 0307 	bic.w	r3, r3, #7
 80031e4:	3308      	adds	r3, #8
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d215      	bcs.n	8003218 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f023 0307 	bic.w	r3, r3, #7
 80031f2:	3308      	adds	r3, #8
 80031f4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d011      	beq.n	8003224 <pvPortMalloc+0x94>
        __asm volatile
 8003200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003204:	f383 8811 	msr	BASEPRI, r3
 8003208:	f3bf 8f6f 	isb	sy
 800320c:	f3bf 8f4f 	dsb	sy
 8003210:	617b      	str	r3, [r7, #20]
    }
 8003212:	bf00      	nop
 8003214:	bf00      	nop
 8003216:	e7fd      	b.n	8003214 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003218:	2300      	movs	r3, #0
 800321a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800321c:	e002      	b.n	8003224 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800321e:	2300      	movs	r3, #0
 8003220:	607b      	str	r3, [r7, #4]
 8003222:	e000      	b.n	8003226 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003224:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d06f      	beq.n	800330c <pvPortMalloc+0x17c>
 800322c:	4b45      	ldr	r3, [pc, #276]	@ (8003344 <pvPortMalloc+0x1b4>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	429a      	cmp	r2, r3
 8003234:	d86a      	bhi.n	800330c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003236:	4b44      	ldr	r3, [pc, #272]	@ (8003348 <pvPortMalloc+0x1b8>)
 8003238:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800323a:	4b43      	ldr	r3, [pc, #268]	@ (8003348 <pvPortMalloc+0x1b8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003240:	e004      	b.n	800324c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8003242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003244:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800324c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	429a      	cmp	r2, r3
 8003254:	d903      	bls.n	800325e <pvPortMalloc+0xce>
 8003256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f1      	bne.n	8003242 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800325e:	4b37      	ldr	r3, [pc, #220]	@ (800333c <pvPortMalloc+0x1ac>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003264:	429a      	cmp	r2, r3
 8003266:	d051      	beq.n	800330c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2208      	movs	r2, #8
 800326e:	4413      	add	r3, r2
 8003270:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	1ad2      	subs	r2, r2, r3
 8003282:	2308      	movs	r3, #8
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	429a      	cmp	r2, r3
 8003288:	d920      	bls.n	80032cc <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800328a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4413      	add	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00b      	beq.n	80032b4 <pvPortMalloc+0x124>
        __asm volatile
 800329c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a0:	f383 8811 	msr	BASEPRI, r3
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	613b      	str	r3, [r7, #16]
    }
 80032ae:	bf00      	nop
 80032b0:	bf00      	nop
 80032b2:	e7fd      	b.n	80032b0 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80032b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	1ad2      	subs	r2, r2, r3
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80032c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80032c6:	69b8      	ldr	r0, [r7, #24]
 80032c8:	f000 f90a 	bl	80034e0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80032cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003344 <pvPortMalloc+0x1b4>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003344 <pvPortMalloc+0x1b4>)
 80032d8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80032da:	4b1a      	ldr	r3, [pc, #104]	@ (8003344 <pvPortMalloc+0x1b4>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4b1b      	ldr	r3, [pc, #108]	@ (800334c <pvPortMalloc+0x1bc>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d203      	bcs.n	80032ee <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80032e6:	4b17      	ldr	r3, [pc, #92]	@ (8003344 <pvPortMalloc+0x1b4>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a18      	ldr	r2, [pc, #96]	@ (800334c <pvPortMalloc+0x1bc>)
 80032ec:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80032ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	4b13      	ldr	r3, [pc, #76]	@ (8003340 <pvPortMalloc+0x1b0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	431a      	orrs	r2, r3
 80032f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80032fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003302:	4b13      	ldr	r3, [pc, #76]	@ (8003350 <pvPortMalloc+0x1c0>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	3301      	adds	r3, #1
 8003308:	4a11      	ldr	r2, [pc, #68]	@ (8003350 <pvPortMalloc+0x1c0>)
 800330a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800330c:	f7ff f9c0 	bl	8002690 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00b      	beq.n	8003332 <pvPortMalloc+0x1a2>
        __asm volatile
 800331a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800331e:	f383 8811 	msr	BASEPRI, r3
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	60fb      	str	r3, [r7, #12]
    }
 800332c:	bf00      	nop
 800332e:	bf00      	nop
 8003330:	e7fd      	b.n	800332e <pvPortMalloc+0x19e>
    return pvReturn;
 8003332:	69fb      	ldr	r3, [r7, #28]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3728      	adds	r7, #40	@ 0x28
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	20012d98 	.word	0x20012d98
 8003340:	20012dac 	.word	0x20012dac
 8003344:	20012d9c 	.word	0x20012d9c
 8003348:	20012d90 	.word	0x20012d90
 800334c:	20012da0 	.word	0x20012da0
 8003350:	20012da4 	.word	0x20012da4

08003354 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d04f      	beq.n	8003406 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003366:	2308      	movs	r3, #8
 8003368:	425b      	negs	r3, r3
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	4413      	add	r3, r2
 800336e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	4b25      	ldr	r3, [pc, #148]	@ (8003410 <vPortFree+0xbc>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4013      	ands	r3, r2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10b      	bne.n	800339a <vPortFree+0x46>
        __asm volatile
 8003382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003386:	f383 8811 	msr	BASEPRI, r3
 800338a:	f3bf 8f6f 	isb	sy
 800338e:	f3bf 8f4f 	dsb	sy
 8003392:	60fb      	str	r3, [r7, #12]
    }
 8003394:	bf00      	nop
 8003396:	bf00      	nop
 8003398:	e7fd      	b.n	8003396 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00b      	beq.n	80033ba <vPortFree+0x66>
        __asm volatile
 80033a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033a6:	f383 8811 	msr	BASEPRI, r3
 80033aa:	f3bf 8f6f 	isb	sy
 80033ae:	f3bf 8f4f 	dsb	sy
 80033b2:	60bb      	str	r3, [r7, #8]
    }
 80033b4:	bf00      	nop
 80033b6:	bf00      	nop
 80033b8:	e7fd      	b.n	80033b6 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	4b14      	ldr	r3, [pc, #80]	@ (8003410 <vPortFree+0xbc>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d01e      	beq.n	8003406 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d11a      	bne.n	8003406 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003410 <vPortFree+0xbc>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	43db      	mvns	r3, r3
 80033da:	401a      	ands	r2, r3
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80033e0:	f7ff f948 	bl	8002674 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003414 <vPortFree+0xc0>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4413      	add	r3, r2
 80033ee:	4a09      	ldr	r2, [pc, #36]	@ (8003414 <vPortFree+0xc0>)
 80033f0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80033f2:	6938      	ldr	r0, [r7, #16]
 80033f4:	f000 f874 	bl	80034e0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80033f8:	4b07      	ldr	r3, [pc, #28]	@ (8003418 <vPortFree+0xc4>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3301      	adds	r3, #1
 80033fe:	4a06      	ldr	r2, [pc, #24]	@ (8003418 <vPortFree+0xc4>)
 8003400:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003402:	f7ff f945 	bl	8002690 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003406:	bf00      	nop
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20012dac 	.word	0x20012dac
 8003414:	20012d9c 	.word	0x20012d9c
 8003418:	20012da8 	.word	0x20012da8

0800341c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003422:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8003426:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003428:	4b27      	ldr	r3, [pc, #156]	@ (80034c8 <prvHeapInit+0xac>)
 800342a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00c      	beq.n	8003450 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	3307      	adds	r3, #7
 800343a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f023 0307 	bic.w	r3, r3, #7
 8003442:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	4a1f      	ldr	r2, [pc, #124]	@ (80034c8 <prvHeapInit+0xac>)
 800344c:	4413      	add	r3, r2
 800344e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003454:	4a1d      	ldr	r2, [pc, #116]	@ (80034cc <prvHeapInit+0xb0>)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800345a:	4b1c      	ldr	r3, [pc, #112]	@ (80034cc <prvHeapInit+0xb0>)
 800345c:	2200      	movs	r2, #0
 800345e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	4413      	add	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003468:	2208      	movs	r2, #8
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f023 0307 	bic.w	r3, r3, #7
 8003476:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4a15      	ldr	r2, [pc, #84]	@ (80034d0 <prvHeapInit+0xb4>)
 800347c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800347e:	4b14      	ldr	r3, [pc, #80]	@ (80034d0 <prvHeapInit+0xb4>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2200      	movs	r2, #0
 8003484:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003486:	4b12      	ldr	r3, [pc, #72]	@ (80034d0 <prvHeapInit+0xb4>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	1ad2      	subs	r2, r2, r3
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800349c:	4b0c      	ldr	r3, [pc, #48]	@ (80034d0 <prvHeapInit+0xb4>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	4a0a      	ldr	r2, [pc, #40]	@ (80034d4 <prvHeapInit+0xb8>)
 80034aa:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	4a09      	ldr	r2, [pc, #36]	@ (80034d8 <prvHeapInit+0xbc>)
 80034b2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80034b4:	4b09      	ldr	r3, [pc, #36]	@ (80034dc <prvHeapInit+0xc0>)
 80034b6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80034ba:	601a      	str	r2, [r3, #0]
}
 80034bc:	bf00      	nop
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	20000190 	.word	0x20000190
 80034cc:	20012d90 	.word	0x20012d90
 80034d0:	20012d98 	.word	0x20012d98
 80034d4:	20012da0 	.word	0x20012da0
 80034d8:	20012d9c 	.word	0x20012d9c
 80034dc:	20012dac 	.word	0x20012dac

080034e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80034e8:	4b28      	ldr	r3, [pc, #160]	@ (800358c <prvInsertBlockIntoFreeList+0xac>)
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	e002      	b.n	80034f4 <prvInsertBlockIntoFreeList+0x14>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d8f7      	bhi.n	80034ee <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	4413      	add	r3, r2
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	429a      	cmp	r2, r3
 800350e:	d108      	bne.n	8003522 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	441a      	add	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	441a      	add	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d118      	bne.n	8003568 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	4b15      	ldr	r3, [pc, #84]	@ (8003590 <prvInsertBlockIntoFreeList+0xb0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d00d      	beq.n	800355e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	441a      	add	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	e008      	b.n	8003570 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800355e:	4b0c      	ldr	r3, [pc, #48]	@ (8003590 <prvInsertBlockIntoFreeList+0xb0>)
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	e003      	b.n	8003570 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	429a      	cmp	r2, r3
 8003576:	d002      	beq.n	800357e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800357e:	bf00      	nop
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	20012d90 	.word	0x20012d90
 8003590:	20012d98 	.word	0x20012d98

08003594 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003598:	4803      	ldr	r0, [pc, #12]	@ (80035a8 <_cbSendSystemDesc+0x14>)
 800359a:	f001 fc6d 	bl	8004e78 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800359e:	4803      	ldr	r0, [pc, #12]	@ (80035ac <_cbSendSystemDesc+0x18>)
 80035a0:	f001 fc6a 	bl	8004e78 <SEGGER_SYSVIEW_SendSysDesc>
}
 80035a4:	bf00      	nop
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	080055bc 	.word	0x080055bc
 80035ac:	08005600 	.word	0x08005600

080035b0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80035b4:	4b06      	ldr	r3, [pc, #24]	@ (80035d0 <SEGGER_SYSVIEW_Conf+0x20>)
 80035b6:	6818      	ldr	r0, [r3, #0]
 80035b8:	4b05      	ldr	r3, [pc, #20]	@ (80035d0 <SEGGER_SYSVIEW_Conf+0x20>)
 80035ba:	6819      	ldr	r1, [r3, #0]
 80035bc:	4b05      	ldr	r3, [pc, #20]	@ (80035d4 <SEGGER_SYSVIEW_Conf+0x24>)
 80035be:	4a06      	ldr	r2, [pc, #24]	@ (80035d8 <SEGGER_SYSVIEW_Conf+0x28>)
 80035c0:	f001 f8de 	bl	8004780 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80035c4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80035c8:	f001 f91e 	bl	8004808 <SEGGER_SYSVIEW_SetRAMBase>
}
 80035cc:	bf00      	nop
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	20000000 	.word	0x20000000
 80035d4:	08003595 	.word	0x08003595
 80035d8:	080056a0 	.word	0x080056a0

080035dc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80035dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035de:	b085      	sub	sp, #20
 80035e0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80035e2:	2300      	movs	r3, #0
 80035e4:	607b      	str	r3, [r7, #4]
 80035e6:	e033      	b.n	8003650 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80035e8:	491e      	ldr	r1, [pc, #120]	@ (8003664 <_cbSendTaskList+0x88>)
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	6818      	ldr	r0, [r3, #0]
 80035f8:	491a      	ldr	r1, [pc, #104]	@ (8003664 <_cbSendTaskList+0x88>)
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	3304      	adds	r3, #4
 8003608:	6819      	ldr	r1, [r3, #0]
 800360a:	4c16      	ldr	r4, [pc, #88]	@ (8003664 <_cbSendTaskList+0x88>)
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4423      	add	r3, r4
 8003618:	3308      	adds	r3, #8
 800361a:	681c      	ldr	r4, [r3, #0]
 800361c:	4d11      	ldr	r5, [pc, #68]	@ (8003664 <_cbSendTaskList+0x88>)
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	442b      	add	r3, r5
 800362a:	330c      	adds	r3, #12
 800362c:	681d      	ldr	r5, [r3, #0]
 800362e:	4e0d      	ldr	r6, [pc, #52]	@ (8003664 <_cbSendTaskList+0x88>)
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4433      	add	r3, r6
 800363c:	3310      	adds	r3, #16
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	462b      	mov	r3, r5
 8003644:	4622      	mov	r2, r4
 8003646:	f000 f92d 	bl	80038a4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3301      	adds	r3, #1
 800364e:	607b      	str	r3, [r7, #4]
 8003650:	4b05      	ldr	r3, [pc, #20]	@ (8003668 <_cbSendTaskList+0x8c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	429a      	cmp	r2, r3
 8003658:	d3c6      	bcc.n	80035e8 <_cbSendTaskList+0xc>
  }
}
 800365a:	bf00      	nop
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003664:	20012db0 	.word	0x20012db0
 8003668:	20012e50 	.word	0x20012e50

0800366c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800366c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003674:	f7ff f8be 	bl	80027f4 <xTaskGetTickCountFromISR>
 8003678:	4603      	mov	r3, r0
 800367a:	2200      	movs	r2, #0
 800367c:	469a      	mov	sl, r3
 800367e:	4693      	mov	fp, r2
 8003680:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003684:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	f04f 0a00 	mov.w	sl, #0
 8003690:	f04f 0b00 	mov.w	fp, #0
 8003694:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003698:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800369c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80036a0:	4652      	mov	r2, sl
 80036a2:	465b      	mov	r3, fp
 80036a4:	1a14      	subs	r4, r2, r0
 80036a6:	eb63 0501 	sbc.w	r5, r3, r1
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	f04f 0300 	mov.w	r3, #0
 80036b2:	00ab      	lsls	r3, r5, #2
 80036b4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80036b8:	00a2      	lsls	r2, r4, #2
 80036ba:	4614      	mov	r4, r2
 80036bc:	461d      	mov	r5, r3
 80036be:	eb14 0800 	adds.w	r8, r4, r0
 80036c2:	eb45 0901 	adc.w	r9, r5, r1
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036da:	4690      	mov	r8, r2
 80036dc:	4699      	mov	r9, r3
 80036de:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80036e2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80036e6:	4610      	mov	r0, r2
 80036e8:	4619      	mov	r1, r3
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080036f4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af02      	add	r7, sp, #8
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
 8003700:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003702:	2205      	movs	r2, #5
 8003704:	492b      	ldr	r1, [pc, #172]	@ (80037b4 <SYSVIEW_AddTask+0xc0>)
 8003706:	68b8      	ldr	r0, [r7, #8]
 8003708:	f001 fede 	bl	80054c8 <memcmp>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d04b      	beq.n	80037aa <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003712:	4b29      	ldr	r3, [pc, #164]	@ (80037b8 <SYSVIEW_AddTask+0xc4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b07      	cmp	r3, #7
 8003718:	d903      	bls.n	8003722 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800371a:	4828      	ldr	r0, [pc, #160]	@ (80037bc <SYSVIEW_AddTask+0xc8>)
 800371c:	f001 fe4a 	bl	80053b4 <SEGGER_SYSVIEW_Warn>
    return;
 8003720:	e044      	b.n	80037ac <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003722:	4b25      	ldr	r3, [pc, #148]	@ (80037b8 <SYSVIEW_AddTask+0xc4>)
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	4926      	ldr	r1, [pc, #152]	@ (80037c0 <SYSVIEW_AddTask+0xcc>)
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003736:	4b20      	ldr	r3, [pc, #128]	@ (80037b8 <SYSVIEW_AddTask+0xc4>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4921      	ldr	r1, [pc, #132]	@ (80037c0 <SYSVIEW_AddTask+0xcc>)
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	3304      	adds	r3, #4
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800374c:	4b1a      	ldr	r3, [pc, #104]	@ (80037b8 <SYSVIEW_AddTask+0xc4>)
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	491b      	ldr	r1, [pc, #108]	@ (80037c0 <SYSVIEW_AddTask+0xcc>)
 8003752:	4613      	mov	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	440b      	add	r3, r1
 800375c:	3308      	adds	r3, #8
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003762:	4b15      	ldr	r3, [pc, #84]	@ (80037b8 <SYSVIEW_AddTask+0xc4>)
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	4916      	ldr	r1, [pc, #88]	@ (80037c0 <SYSVIEW_AddTask+0xcc>)
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	330c      	adds	r3, #12
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003778:	4b0f      	ldr	r3, [pc, #60]	@ (80037b8 <SYSVIEW_AddTask+0xc4>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	4910      	ldr	r1, [pc, #64]	@ (80037c0 <SYSVIEW_AddTask+0xcc>)
 800377e:	4613      	mov	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	3310      	adds	r3, #16
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800378e:	4b0a      	ldr	r3, [pc, #40]	@ (80037b8 <SYSVIEW_AddTask+0xc4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	3301      	adds	r3, #1
 8003794:	4a08      	ldr	r2, [pc, #32]	@ (80037b8 <SYSVIEW_AddTask+0xc4>)
 8003796:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	68b9      	ldr	r1, [r7, #8]
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f87e 	bl	80038a4 <SYSVIEW_SendTaskInfo>
 80037a8:	e000      	b.n	80037ac <SYSVIEW_AddTask+0xb8>
    return;
 80037aa:	bf00      	nop

}
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	08005610 	.word	0x08005610
 80037b8:	20012e50 	.word	0x20012e50
 80037bc:	08005618 	.word	0x08005618
 80037c0:	20012db0 	.word	0x20012db0

080037c4 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af02      	add	r7, sp, #8
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
 80037d0:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80037d2:	2205      	movs	r2, #5
 80037d4:	4930      	ldr	r1, [pc, #192]	@ (8003898 <SYSVIEW_UpdateTask+0xd4>)
 80037d6:	68b8      	ldr	r0, [r7, #8]
 80037d8:	f001 fe76 	bl	80054c8 <memcmp>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d056      	beq.n	8003890 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	e00d      	b.n	8003804 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 80037e8:	492c      	ldr	r1, [pc, #176]	@ (800389c <SYSVIEW_UpdateTask+0xd8>)
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d008      	beq.n	8003810 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	3301      	adds	r3, #1
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	4b26      	ldr	r3, [pc, #152]	@ (80038a0 <SYSVIEW_UpdateTask+0xdc>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	429a      	cmp	r2, r3
 800380c:	d3ec      	bcc.n	80037e8 <SYSVIEW_UpdateTask+0x24>
 800380e:	e000      	b.n	8003812 <SYSVIEW_UpdateTask+0x4e>
      break;
 8003810:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 8003812:	4b23      	ldr	r3, [pc, #140]	@ (80038a0 <SYSVIEW_UpdateTask+0xdc>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	429a      	cmp	r2, r3
 800381a:	d230      	bcs.n	800387e <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 800381c:	491f      	ldr	r1, [pc, #124]	@ (800389c <SYSVIEW_UpdateTask+0xd8>)
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	4613      	mov	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4413      	add	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	3304      	adds	r3, #4
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 8003830:	491a      	ldr	r1, [pc, #104]	@ (800389c <SYSVIEW_UpdateTask+0xd8>)
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	3308      	adds	r3, #8
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 8003844:	4915      	ldr	r1, [pc, #84]	@ (800389c <SYSVIEW_UpdateTask+0xd8>)
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	4613      	mov	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	330c      	adds	r3, #12
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 8003858:	4910      	ldr	r1, [pc, #64]	@ (800389c <SYSVIEW_UpdateTask+0xd8>)
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4613      	mov	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	3310      	adds	r3, #16
 8003868:	6a3a      	ldr	r2, [r7, #32]
 800386a:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	68b9      	ldr	r1, [r7, #8]
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 f814 	bl	80038a4 <SYSVIEW_SendTaskInfo>
 800387c:	e009      	b.n	8003892 <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	68b9      	ldr	r1, [r7, #8]
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f7ff ff33 	bl	80036f4 <SYSVIEW_AddTask>
 800388e:	e000      	b.n	8003892 <SYSVIEW_UpdateTask+0xce>
    return;
 8003890:	bf00      	nop
  }
}
 8003892:	3718      	adds	r7, #24
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	08005610 	.word	0x08005610
 800389c:	20012db0 	.word	0x20012db0
 80038a0:	20012e50 	.word	0x20012e50

080038a4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08a      	sub	sp, #40	@ 0x28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80038b2:	f107 0314 	add.w	r3, r7, #20
 80038b6:	2214      	movs	r2, #20
 80038b8:	2100      	movs	r1, #0
 80038ba:	4618      	mov	r0, r3
 80038bc:	f001 fe14 	bl	80054e8 <memset>
  TaskInfo.TaskID     = TaskID;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80038d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d2:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80038d4:	f107 0314 	add.w	r3, r7, #20
 80038d8:	4618      	mov	r0, r3
 80038da:	f001 f9d5 	bl	8004c88 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80038de:	bf00      	nop
 80038e0:	3728      	adds	r7, #40	@ 0x28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <__NVIC_EnableIRQ>:
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	db0b      	blt.n	8003912 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038fa:	79fb      	ldrb	r3, [r7, #7]
 80038fc:	f003 021f 	and.w	r2, r3, #31
 8003900:	4907      	ldr	r1, [pc, #28]	@ (8003920 <__NVIC_EnableIRQ+0x38>)
 8003902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	2001      	movs	r0, #1
 800390a:	fa00 f202 	lsl.w	r2, r0, r2
 800390e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	e000e100 	.word	0xe000e100

08003924 <__NVIC_SetPriority>:
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	6039      	str	r1, [r7, #0]
 800392e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003934:	2b00      	cmp	r3, #0
 8003936:	db0a      	blt.n	800394e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	b2da      	uxtb	r2, r3
 800393c:	490c      	ldr	r1, [pc, #48]	@ (8003970 <__NVIC_SetPriority+0x4c>)
 800393e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003942:	0112      	lsls	r2, r2, #4
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	440b      	add	r3, r1
 8003948:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800394c:	e00a      	b.n	8003964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	b2da      	uxtb	r2, r3
 8003952:	4908      	ldr	r1, [pc, #32]	@ (8003974 <__NVIC_SetPriority+0x50>)
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	3b04      	subs	r3, #4
 800395c:	0112      	lsls	r2, r2, #4
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	440b      	add	r3, r1
 8003962:	761a      	strb	r2, [r3, #24]
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	e000e100 	.word	0xe000e100
 8003974:	e000ed00 	.word	0xe000ed00

08003978 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800397e:	f001 fd75 	bl	800546c <SEGGER_SYSVIEW_IsStarted>
 8003982:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800398a:	f001 f801 	bl	8004990 <SEGGER_SYSVIEW_Start>
  }
}
 800398e:	bf00      	nop
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80039a2:	4b0c      	ldr	r3, [pc, #48]	@ (80039d4 <_cbOnUARTRx+0x3c>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	d806      	bhi.n	80039b8 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80039aa:	4b0a      	ldr	r3, [pc, #40]	@ (80039d4 <_cbOnUARTRx+0x3c>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	3301      	adds	r3, #1
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	4b08      	ldr	r3, [pc, #32]	@ (80039d4 <_cbOnUARTRx+0x3c>)
 80039b4:	701a      	strb	r2, [r3, #0]
    goto Done;
 80039b6:	e009      	b.n	80039cc <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80039b8:	f7ff ffde 	bl	8003978 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80039bc:	4b05      	ldr	r3, [pc, #20]	@ (80039d4 <_cbOnUARTRx+0x3c>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	4618      	mov	r0, r3
 80039c2:	1dfb      	adds	r3, r7, #7
 80039c4:	2201      	movs	r2, #1
 80039c6:	4619      	mov	r1, r3
 80039c8:	f000 fb9a 	bl	8004100 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80039cc:	bf00      	nop
}
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	20000014 	.word	0x20000014

080039d8 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80039e0:	4b14      	ldr	r3, [pc, #80]	@ (8003a34 <_cbOnUARTTx+0x5c>)
 80039e2:	785b      	ldrb	r3, [r3, #1]
 80039e4:	2b03      	cmp	r3, #3
 80039e6:	d80f      	bhi.n	8003a08 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80039e8:	4b12      	ldr	r3, [pc, #72]	@ (8003a34 <_cbOnUARTTx+0x5c>)
 80039ea:	785b      	ldrb	r3, [r3, #1]
 80039ec:	461a      	mov	r2, r3
 80039ee:	4b12      	ldr	r3, [pc, #72]	@ (8003a38 <_cbOnUARTTx+0x60>)
 80039f0:	5c9a      	ldrb	r2, [r3, r2]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80039f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003a34 <_cbOnUARTTx+0x5c>)
 80039f8:	785b      	ldrb	r3, [r3, #1]
 80039fa:	3301      	adds	r3, #1
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003a34 <_cbOnUARTTx+0x5c>)
 8003a00:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003a02:	2301      	movs	r3, #1
 8003a04:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003a06:	e00f      	b.n	8003a28 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003a08:	4b0a      	ldr	r3, [pc, #40]	@ (8003a34 <_cbOnUARTTx+0x5c>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 fa19 	bl	8003e48 <SEGGER_RTT_ReadUpBufferNoLock>
 8003a16:	4603      	mov	r3, r0
 8003a18:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	da02      	bge.n	8003a26 <_cbOnUARTTx+0x4e>
    r = 0;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	e000      	b.n	8003a28 <_cbOnUARTTx+0x50>
  }
Done:
 8003a26:	bf00      	nop
  return r;
 8003a28:	68fb      	ldr	r3, [r7, #12]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	20000014 	.word	0x20000014
 8003a38:	080056a8 	.word	0x080056a8

08003a3c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003a44:	4a04      	ldr	r2, [pc, #16]	@ (8003a58 <SEGGER_UART_init+0x1c>)
 8003a46:	4905      	ldr	r1, [pc, #20]	@ (8003a5c <SEGGER_UART_init+0x20>)
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f863 	bl	8003b14 <HIF_UART_Init>
}
 8003a4e:	bf00      	nop
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	08003999 	.word	0x08003999
 8003a5c:	080039d9 	.word	0x080039d9

08003a60 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003a66:	4b1e      	ldr	r3, [pc, #120]	@ (8003ae0 <USART2_IRQHandler+0x80>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 0320 	and.w	r3, r3, #32
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d011      	beq.n	8003a9a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003a76:	4b1b      	ldr	r3, [pc, #108]	@ (8003ae4 <USART2_IRQHandler+0x84>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f003 030b 	and.w	r3, r3, #11
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d108      	bne.n	8003a9a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003a88:	4b17      	ldr	r3, [pc, #92]	@ (8003ae8 <USART2_IRQHandler+0x88>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d004      	beq.n	8003a9a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003a90:	4b15      	ldr	r3, [pc, #84]	@ (8003ae8 <USART2_IRQHandler+0x88>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	79fa      	ldrb	r2, [r7, #7]
 8003a96:	4610      	mov	r0, r2
 8003a98:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d01a      	beq.n	8003ada <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003aa4:	4b11      	ldr	r3, [pc, #68]	@ (8003aec <USART2_IRQHandler+0x8c>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d015      	beq.n	8003ad8 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003aac:	4b0f      	ldr	r3, [pc, #60]	@ (8003aec <USART2_IRQHandler+0x8c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	1dfa      	adds	r2, r7, #7
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	4798      	blx	r3
 8003ab6:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d106      	bne.n	8003acc <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003abe:	4b0c      	ldr	r3, [pc, #48]	@ (8003af0 <USART2_IRQHandler+0x90>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a0b      	ldr	r2, [pc, #44]	@ (8003af0 <USART2_IRQHandler+0x90>)
 8003ac4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	e006      	b.n	8003ada <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003acc:	4b04      	ldr	r3, [pc, #16]	@ (8003ae0 <USART2_IRQHandler+0x80>)
 8003ace:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003ad0:	79fa      	ldrb	r2, [r7, #7]
 8003ad2:	4b04      	ldr	r3, [pc, #16]	@ (8003ae4 <USART2_IRQHandler+0x84>)
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	e000      	b.n	8003ada <USART2_IRQHandler+0x7a>
      return;
 8003ad8:	bf00      	nop
    }
  }
}
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40004400 	.word	0x40004400
 8003ae4:	40004404 	.word	0x40004404
 8003ae8:	20012e54 	.word	0x20012e54
 8003aec:	20012e58 	.word	0x20012e58
 8003af0:	4000440c 	.word	0x4000440c

08003af4 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003af8:	4b05      	ldr	r3, [pc, #20]	@ (8003b10 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a04      	ldr	r2, [pc, #16]	@ (8003b10 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003afe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b02:	6013      	str	r3, [r2, #0]
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	4000440c 	.word	0x4000440c

08003b14 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003b20:	4b2e      	ldr	r3, [pc, #184]	@ (8003bdc <HIF_UART_Init+0xc8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a2d      	ldr	r2, [pc, #180]	@ (8003bdc <HIF_UART_Init+0xc8>)
 8003b26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b2a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003b2c:	4b2c      	ldr	r3, [pc, #176]	@ (8003be0 <HIF_UART_Init+0xcc>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a2b      	ldr	r2, [pc, #172]	@ (8003be0 <HIF_UART_Init+0xcc>)
 8003b32:	f043 0301 	orr.w	r3, r3, #1
 8003b36:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8003b38:	4b2a      	ldr	r3, [pc, #168]	@ (8003be4 <HIF_UART_Init+0xd0>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b44:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8003b4c:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003b4e:	4a25      	ldr	r2, [pc, #148]	@ (8003be4 <HIF_UART_Init+0xd0>)
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003b54:	4b24      	ldr	r3, [pc, #144]	@ (8003be8 <HIF_UART_Init+0xd4>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b60:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8003b68:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8003b6a:	4a1f      	ldr	r2, [pc, #124]	@ (8003be8 <HIF_UART_Init+0xd4>)
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003b70:	4b1e      	ldr	r3, [pc, #120]	@ (8003bec <HIF_UART_Init+0xd8>)
 8003b72:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 8003b76:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003b78:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf0 <HIF_UART_Init+0xdc>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf4 <HIF_UART_Init+0xe0>)
 8003b80:	2280      	movs	r2, #128	@ 0x80
 8003b82:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8003b8a:	4a1b      	ldr	r2, [pc, #108]	@ (8003bf8 <HIF_UART_Init+0xe4>)
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b92:	3301      	adds	r3, #1
 8003b94:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	085b      	lsrs	r3, r3, #1
 8003b9a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ba2:	d302      	bcc.n	8003baa <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003ba4:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8003ba8:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d004      	beq.n	8003bba <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	4a11      	ldr	r2, [pc, #68]	@ (8003bfc <HIF_UART_Init+0xe8>)
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003bba:	4a11      	ldr	r2, [pc, #68]	@ (8003c00 <HIF_UART_Init+0xec>)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003bc0:	4a10      	ldr	r2, [pc, #64]	@ (8003c04 <HIF_UART_Init+0xf0>)
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003bc6:	2106      	movs	r1, #6
 8003bc8:	2026      	movs	r0, #38	@ 0x26
 8003bca:	f7ff feab 	bl	8003924 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003bce:	2026      	movs	r0, #38	@ 0x26
 8003bd0:	f7ff fe8a 	bl	80038e8 <__NVIC_EnableIRQ>
}
 8003bd4:	bf00      	nop
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40023840 	.word	0x40023840
 8003be0:	40023830 	.word	0x40023830
 8003be4:	40020020 	.word	0x40020020
 8003be8:	40020000 	.word	0x40020000
 8003bec:	4000440c 	.word	0x4000440c
 8003bf0:	40004410 	.word	0x40004410
 8003bf4:	40004414 	.word	0x40004414
 8003bf8:	0501bd00 	.word	0x0501bd00
 8003bfc:	40004408 	.word	0x40004408
 8003c00:	20012e54 	.word	0x20012e54
 8003c04:	20012e58 	.word	0x20012e58

08003c08 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003c0e:	4b24      	ldr	r3, [pc, #144]	@ (8003ca0 <_DoInit+0x98>)
 8003c10:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2203      	movs	r2, #3
 8003c16:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2203      	movs	r2, #3
 8003c1c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a20      	ldr	r2, [pc, #128]	@ (8003ca4 <_DoInit+0x9c>)
 8003c22:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a20      	ldr	r2, [pc, #128]	@ (8003ca8 <_DoInit+0xa0>)
 8003c28:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c30:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a17      	ldr	r2, [pc, #92]	@ (8003ca4 <_DoInit+0x9c>)
 8003c48:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a17      	ldr	r2, [pc, #92]	@ (8003cac <_DoInit+0xa4>)
 8003c4e:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2210      	movs	r2, #16
 8003c54:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3307      	adds	r3, #7
 8003c6c:	4a10      	ldr	r2, [pc, #64]	@ (8003cb0 <_DoInit+0xa8>)
 8003c6e:	6810      	ldr	r0, [r2, #0]
 8003c70:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003c72:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a0e      	ldr	r2, [pc, #56]	@ (8003cb4 <_DoInit+0xac>)
 8003c7a:	6810      	ldr	r0, [r2, #0]
 8003c7c:	6018      	str	r0, [r3, #0]
 8003c7e:	8891      	ldrh	r1, [r2, #4]
 8003c80:	7992      	ldrb	r2, [r2, #6]
 8003c82:	8099      	strh	r1, [r3, #4]
 8003c84:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003c86:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003c90:	f3bf 8f5f 	dmb	sy
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	20012e5c 	.word	0x20012e5c
 8003ca4:	08005668 	.word	0x08005668
 8003ca8:	20012f04 	.word	0x20012f04
 8003cac:	20013304 	.word	0x20013304
 8003cb0:	08005674 	.word	0x08005674
 8003cb4:	08005678 	.word	0x08005678

08003cb8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08a      	sub	sp, #40	@ 0x28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d905      	bls.n	8003ce8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ce6:	e007      	b.n	8003cf8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	69b9      	ldr	r1, [r7, #24]
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	1acb      	subs	r3, r1, r3
 8003cf2:	4413      	add	r3, r2
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d02:	4293      	cmp	r3, r2
 8003d04:	bf28      	it	cs
 8003d06:	4613      	movcs	r3, r2
 8003d08:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	bf28      	it	cs
 8003d12:	4613      	movcs	r3, r2
 8003d14:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d22:	68b9      	ldr	r1, [r7, #8]
 8003d24:	6978      	ldr	r0, [r7, #20]
 8003d26:	f001 fc0b 	bl	8005540 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003d2a:	6a3a      	ldr	r2, [r7, #32]
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2e:	4413      	add	r3, r2
 8003d30:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d36:	4413      	add	r3, r2
 8003d38:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003d42:	69fa      	ldr	r2, [r7, #28]
 8003d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d46:	4413      	add	r3, r2
 8003d48:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	69fa      	ldr	r2, [r7, #28]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d101      	bne.n	8003d58 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003d54:	2300      	movs	r3, #0
 8003d56:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003d58:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	69fa      	ldr	r2, [r7, #28]
 8003d60:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1b2      	bne.n	8003cce <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003d68:	6a3b      	ldr	r3, [r7, #32]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3728      	adds	r7, #40	@ 0x28
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b088      	sub	sp, #32
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	60f8      	str	r0, [r7, #12]
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d911      	bls.n	8003dba <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	68b9      	ldr	r1, [r7, #8]
 8003da4:	6938      	ldr	r0, [r7, #16]
 8003da6:	f001 fbcb 	bl	8005540 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003daa:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003dae:	69fa      	ldr	r2, [r7, #28]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	441a      	add	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003db8:	e01f      	b.n	8003dfa <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	68b9      	ldr	r1, [r7, #8]
 8003dcc:	6938      	ldr	r0, [r7, #16]
 8003dce:	f001 fbb7 	bl	8005540 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	4413      	add	r3, r2
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	4619      	mov	r1, r3
 8003dea:	6938      	ldr	r0, [r7, #16]
 8003dec:	f001 fba8 	bl	8005540 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003df0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	60da      	str	r2, [r3, #12]
}
 8003dfa:	bf00      	nop
 8003dfc:	3720      	adds	r7, #32
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003e02:	b480      	push	{r7}
 8003e04:	b087      	sub	sp, #28
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d808      	bhi.n	8003e30 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689a      	ldr	r2, [r3, #8]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	1ad2      	subs	r2, r2, r3
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	4413      	add	r3, r2
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	617b      	str	r3, [r7, #20]
 8003e2e:	e004      	b.n	8003e3a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	3b01      	subs	r3, #1
 8003e38:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003e3a:	697b      	ldr	r3, [r7, #20]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	371c      	adds	r7, #28
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08c      	sub	sp, #48	@ 0x30
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003e54:	4b3e      	ldr	r3, [pc, #248]	@ (8003f50 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003e56:	623b      	str	r3, [r7, #32]
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003e62:	f7ff fed1 	bl	8003c08 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	4413      	add	r3, r2
 8003e70:	00db      	lsls	r3, r3, #3
 8003e72:	4a37      	ldr	r2, [pc, #220]	@ (8003f50 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003e74:	4413      	add	r3, r2
 8003e76:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003e8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d92b      	bls.n	8003eec <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	bf28      	it	cs
 8003ea6:	4613      	movcs	r3, r2
 8003ea8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb0:	4413      	add	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	6939      	ldr	r1, [r7, #16]
 8003eb8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003eba:	f001 fb41 	bl	8005540 <memcpy>
    NumBytesRead += NumBytesRem;
 8003ebe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	4413      	add	r3, r2
 8003ecc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003ed6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	4413      	add	r3, r2
 8003edc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d101      	bne.n	8003eec <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	bf28      	it	cs
 8003efc:	4613      	movcs	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d019      	beq.n	8003f3a <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0c:	4413      	add	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	6939      	ldr	r1, [r7, #16]
 8003f14:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f16:	f001 fb13 	bl	8005540 <memcpy>
    NumBytesRead += NumBytesRem;
 8003f1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	4413      	add	r3, r2
 8003f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	4413      	add	r3, r2
 8003f28:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003f32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	4413      	add	r3, r2
 8003f38:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f44:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3730      	adds	r7, #48	@ 0x30
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	20012e5c 	.word	0x20012e5c

08003f54 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08c      	sub	sp, #48	@ 0x30
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003f60:	4b3e      	ldr	r3, [pc, #248]	@ (800405c <SEGGER_RTT_ReadNoLock+0x108>)
 8003f62:	623b      	str	r3, [r7, #32]
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <SEGGER_RTT_ReadNoLock+0x1e>
 8003f6e:	f7ff fe4b 	bl	8003c08 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	4613      	mov	r3, r2
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	4413      	add	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	3360      	adds	r3, #96	@ 0x60
 8003f7e:	4a37      	ldr	r2, [pc, #220]	@ (800405c <SEGGER_RTT_ReadNoLock+0x108>)
 8003f80:	4413      	add	r3, r2
 8003f82:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003f94:	2300      	movs	r3, #0
 8003f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003f98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d92b      	bls.n	8003ff8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	bf28      	it	cs
 8003fb2:	4613      	movcs	r3, r2
 8003fb4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fbc:	4413      	add	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	6939      	ldr	r1, [r7, #16]
 8003fc4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003fc6:	f001 fabb 	bl	8005540 <memcpy>
    NumBytesRead += NumBytesRem;
 8003fca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	4413      	add	r3, r2
 8003fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003fe2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d101      	bne.n	8003ff8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4293      	cmp	r3, r2
 8004006:	bf28      	it	cs
 8004008:	4613      	movcs	r3, r2
 800400a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d019      	beq.n	8004046 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004018:	4413      	add	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	6939      	ldr	r1, [r7, #16]
 8004020:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004022:	f001 fa8d 	bl	8005540 <memcpy>
    NumBytesRead += NumBytesRem;
 8004026:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	4413      	add	r3, r2
 800402c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800402e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	4413      	add	r3, r2
 8004034:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800403e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	4413      	add	r3, r2
 8004044:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8004046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004050:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004054:	4618      	mov	r0, r3
 8004056:	3730      	adds	r7, #48	@ 0x30
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	20012e5c 	.word	0x20012e5c

08004060 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004060:	b580      	push	{r7, lr}
 8004062:	b088      	sub	sp, #32
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	4613      	mov	r3, r2
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	4413      	add	r3, r2
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	3360      	adds	r3, #96	@ 0x60
 800407c:	4a1f      	ldr	r2, [pc, #124]	@ (80040fc <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800407e:	4413      	add	r3, r2
 8004080:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d029      	beq.n	80040de <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800408a:	2b02      	cmp	r3, #2
 800408c:	d82e      	bhi.n	80040ec <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8004092:	2b01      	cmp	r3, #1
 8004094:	d013      	beq.n	80040be <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8004096:	e029      	b.n	80040ec <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004098:	6978      	ldr	r0, [r7, #20]
 800409a:	f7ff feb2 	bl	8003e02 <_GetAvailWriteSpace>
 800409e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d202      	bcs.n	80040ae <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80040a8:	2300      	movs	r3, #0
 80040aa:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80040ac:	e021      	b.n	80040f2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	69b9      	ldr	r1, [r7, #24]
 80040b6:	6978      	ldr	r0, [r7, #20]
 80040b8:	f7ff fe5b 	bl	8003d72 <_WriteNoCheck>
    break;
 80040bc:	e019      	b.n	80040f2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80040be:	6978      	ldr	r0, [r7, #20]
 80040c0:	f7ff fe9f 	bl	8003e02 <_GetAvailWriteSpace>
 80040c4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	4293      	cmp	r3, r2
 80040cc:	bf28      	it	cs
 80040ce:	4613      	movcs	r3, r2
 80040d0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80040d2:	69fa      	ldr	r2, [r7, #28]
 80040d4:	69b9      	ldr	r1, [r7, #24]
 80040d6:	6978      	ldr	r0, [r7, #20]
 80040d8:	f7ff fe4b 	bl	8003d72 <_WriteNoCheck>
    break;
 80040dc:	e009      	b.n	80040f2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	69b9      	ldr	r1, [r7, #24]
 80040e2:	6978      	ldr	r0, [r7, #20]
 80040e4:	f7ff fde8 	bl	8003cb8 <_WriteBlocking>
 80040e8:	61f8      	str	r0, [r7, #28]
    break;
 80040ea:	e002      	b.n	80040f2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80040ec:	2300      	movs	r3, #0
 80040ee:	61fb      	str	r3, [r7, #28]
    break;
 80040f0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80040f2:	69fb      	ldr	r3, [r7, #28]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3720      	adds	r7, #32
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20012e5c 	.word	0x20012e5c

08004100 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004100:	b580      	push	{r7, lr}
 8004102:	b088      	sub	sp, #32
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800410c:	4b0e      	ldr	r3, [pc, #56]	@ (8004148 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800410e:	61fb      	str	r3, [r7, #28]
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <SEGGER_RTT_WriteDownBuffer+0x1e>
 800411a:	f7ff fd75 	bl	8003c08 <_DoInit>
  SEGGER_RTT_LOCK();
 800411e:	f3ef 8311 	mrs	r3, BASEPRI
 8004122:	f04f 0120 	mov.w	r1, #32
 8004126:	f381 8811 	msr	BASEPRI, r1
 800412a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	68b9      	ldr	r1, [r7, #8]
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f7ff ff95 	bl	8004060 <SEGGER_RTT_WriteDownBufferNoLock>
 8004136:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800413e:	697b      	ldr	r3, [r7, #20]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3720      	adds	r7, #32
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	20012e5c 	.word	0x20012e5c

0800414c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800415a:	4b3d      	ldr	r3, [pc, #244]	@ (8004250 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800415c:	61bb      	str	r3, [r7, #24]
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <SEGGER_RTT_AllocUpBuffer+0x20>
 8004168:	f7ff fd4e 	bl	8003c08 <_DoInit>
  SEGGER_RTT_LOCK();
 800416c:	f3ef 8311 	mrs	r3, BASEPRI
 8004170:	f04f 0120 	mov.w	r1, #32
 8004174:	f381 8811 	msr	BASEPRI, r1
 8004178:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800417a:	4b35      	ldr	r3, [pc, #212]	@ (8004250 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800417c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800417e:	2300      	movs	r3, #0
 8004180:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004182:	6939      	ldr	r1, [r7, #16]
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	4613      	mov	r3, r2
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	4413      	add	r3, r2
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	440b      	add	r3, r1
 8004192:	3304      	adds	r3, #4
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d008      	beq.n	80041ac <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	3301      	adds	r3, #1
 800419e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	69fa      	ldr	r2, [r7, #28]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	dbeb      	blt.n	8004182 <SEGGER_RTT_AllocUpBuffer+0x36>
 80041aa:	e000      	b.n	80041ae <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80041ac:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	69fa      	ldr	r2, [r7, #28]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	da3f      	bge.n	8004238 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80041b8:	6939      	ldr	r1, [r7, #16]
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	4613      	mov	r3, r2
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	4413      	add	r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	440b      	add	r3, r1
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80041cc:	6939      	ldr	r1, [r7, #16]
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	4613      	mov	r3, r2
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	4413      	add	r3, r2
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	440b      	add	r3, r1
 80041dc:	3304      	adds	r3, #4
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80041e2:	6939      	ldr	r1, [r7, #16]
 80041e4:	69fa      	ldr	r2, [r7, #28]
 80041e6:	4613      	mov	r3, r2
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	4413      	add	r3, r2
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	440b      	add	r3, r1
 80041f0:	3320      	adds	r3, #32
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80041f6:	6939      	ldr	r1, [r7, #16]
 80041f8:	69fa      	ldr	r2, [r7, #28]
 80041fa:	4613      	mov	r3, r2
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	4413      	add	r3, r2
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	440b      	add	r3, r1
 8004204:	3328      	adds	r3, #40	@ 0x28
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800420a:	6939      	ldr	r1, [r7, #16]
 800420c:	69fa      	ldr	r2, [r7, #28]
 800420e:	4613      	mov	r3, r2
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	4413      	add	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	440b      	add	r3, r1
 8004218:	3324      	adds	r3, #36	@ 0x24
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800421e:	6939      	ldr	r1, [r7, #16]
 8004220:	69fa      	ldr	r2, [r7, #28]
 8004222:	4613      	mov	r3, r2
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	4413      	add	r3, r2
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	440b      	add	r3, r1
 800422c:	332c      	adds	r3, #44	@ 0x2c
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004232:	f3bf 8f5f 	dmb	sy
 8004236:	e002      	b.n	800423e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004238:	f04f 33ff 	mov.w	r3, #4294967295
 800423c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004244:	69fb      	ldr	r3, [r7, #28]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3720      	adds	r7, #32
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	20012e5c 	.word	0x20012e5c

08004254 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004262:	4b33      	ldr	r3, [pc, #204]	@ (8004330 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004264:	61bb      	str	r3, [r7, #24]
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004270:	f7ff fcca 	bl	8003c08 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004274:	4b2e      	ldr	r3, [pc, #184]	@ (8004330 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004276:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	461a      	mov	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4293      	cmp	r3, r2
 8004282:	d24d      	bcs.n	8004320 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8004284:	f3ef 8311 	mrs	r3, BASEPRI
 8004288:	f04f 0120 	mov.w	r1, #32
 800428c:	f381 8811 	msr	BASEPRI, r1
 8004290:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d031      	beq.n	80042fc <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8004298:	6979      	ldr	r1, [r7, #20]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4613      	mov	r3, r2
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	4413      	add	r3, r2
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	440b      	add	r3, r1
 80042a6:	3360      	adds	r3, #96	@ 0x60
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80042ac:	6979      	ldr	r1, [r7, #20]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	4613      	mov	r3, r2
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	4413      	add	r3, r2
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	440b      	add	r3, r1
 80042ba:	3364      	adds	r3, #100	@ 0x64
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80042c0:	6979      	ldr	r1, [r7, #20]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4613      	mov	r3, r2
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	4413      	add	r3, r2
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	440b      	add	r3, r1
 80042ce:	3368      	adds	r3, #104	@ 0x68
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80042d4:	6979      	ldr	r1, [r7, #20]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4613      	mov	r3, r2
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	4413      	add	r3, r2
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	440b      	add	r3, r1
 80042e2:	3370      	adds	r3, #112	@ 0x70
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80042e8:	6979      	ldr	r1, [r7, #20]
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	4613      	mov	r3, r2
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	4413      	add	r3, r2
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	440b      	add	r3, r1
 80042f6:	336c      	adds	r3, #108	@ 0x6c
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80042fc:	6979      	ldr	r1, [r7, #20]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	4613      	mov	r3, r2
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	4413      	add	r3, r2
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	440b      	add	r3, r1
 800430a:	3374      	adds	r3, #116	@ 0x74
 800430c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800430e:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004310:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800431a:	2300      	movs	r3, #0
 800431c:	61fb      	str	r3, [r7, #28]
 800431e:	e002      	b.n	8004326 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8004320:	f04f 33ff 	mov.w	r3, #4294967295
 8004324:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8004326:	69fb      	ldr	r3, [r7, #28]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3720      	adds	r7, #32
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	20012e5c 	.word	0x20012e5c

08004334 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004344:	e002      	b.n	800434c <_EncodeStr+0x18>
    Len++;
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	3301      	adds	r3, #1
 800434a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	4413      	add	r3, r2
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1f6      	bne.n	8004346 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	429a      	cmp	r2, r3
 800435e:	d901      	bls.n	8004364 <_EncodeStr+0x30>
    Len = Limit;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	2bfe      	cmp	r3, #254	@ 0xfe
 8004368:	d806      	bhi.n	8004378 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	1c5a      	adds	r2, r3, #1
 800436e:	60fa      	str	r2, [r7, #12]
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	701a      	strb	r2, [r3, #0]
 8004376:	e011      	b.n	800439c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	60fa      	str	r2, [r7, #12]
 800437e:	22ff      	movs	r2, #255	@ 0xff
 8004380:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	60fa      	str	r2, [r7, #12]
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	b2d2      	uxtb	r2, r2
 800438c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	0a19      	lsrs	r1, r3, #8
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	60fa      	str	r2, [r7, #12]
 8004398:	b2ca      	uxtb	r2, r1
 800439a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800439c:	2300      	movs	r3, #0
 800439e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80043a0:	e00a      	b.n	80043b8 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	1c53      	adds	r3, r2, #1
 80043a6:	60bb      	str	r3, [r7, #8]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	1c59      	adds	r1, r3, #1
 80043ac:	60f9      	str	r1, [r7, #12]
 80043ae:	7812      	ldrb	r2, [r2, #0]
 80043b0:	701a      	strb	r2, [r3, #0]
    n++;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	3301      	adds	r3, #1
 80043b6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d3f0      	bcc.n	80043a2 <_EncodeStr+0x6e>
  }
  return pPayload;
 80043c0:	68fb      	ldr	r3, [r7, #12]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	371c      	adds	r7, #28
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	3304      	adds	r3, #4
}
 80043da:	4618      	mov	r0, r3
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
	...

080043e8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80043ee:	4b35      	ldr	r3, [pc, #212]	@ (80044c4 <_HandleIncomingPacket+0xdc>)
 80043f0:	7e1b      	ldrb	r3, [r3, #24]
 80043f2:	4618      	mov	r0, r3
 80043f4:	1cfb      	adds	r3, r7, #3
 80043f6:	2201      	movs	r2, #1
 80043f8:	4619      	mov	r1, r3
 80043fa:	f7ff fdab 	bl	8003f54 <SEGGER_RTT_ReadNoLock>
 80043fe:	4603      	mov	r3, r0
 8004400:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	dd59      	ble.n	80044bc <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8004408:	78fb      	ldrb	r3, [r7, #3]
 800440a:	2b80      	cmp	r3, #128	@ 0x80
 800440c:	d032      	beq.n	8004474 <_HandleIncomingPacket+0x8c>
 800440e:	2b80      	cmp	r3, #128	@ 0x80
 8004410:	dc42      	bgt.n	8004498 <_HandleIncomingPacket+0xb0>
 8004412:	2b07      	cmp	r3, #7
 8004414:	dc16      	bgt.n	8004444 <_HandleIncomingPacket+0x5c>
 8004416:	2b00      	cmp	r3, #0
 8004418:	dd3e      	ble.n	8004498 <_HandleIncomingPacket+0xb0>
 800441a:	3b01      	subs	r3, #1
 800441c:	2b06      	cmp	r3, #6
 800441e:	d83b      	bhi.n	8004498 <_HandleIncomingPacket+0xb0>
 8004420:	a201      	add	r2, pc, #4	@ (adr r2, 8004428 <_HandleIncomingPacket+0x40>)
 8004422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004426:	bf00      	nop
 8004428:	0800444b 	.word	0x0800444b
 800442c:	08004451 	.word	0x08004451
 8004430:	08004457 	.word	0x08004457
 8004434:	0800445d 	.word	0x0800445d
 8004438:	08004463 	.word	0x08004463
 800443c:	08004469 	.word	0x08004469
 8004440:	0800446f 	.word	0x0800446f
 8004444:	2b7f      	cmp	r3, #127	@ 0x7f
 8004446:	d034      	beq.n	80044b2 <_HandleIncomingPacket+0xca>
 8004448:	e026      	b.n	8004498 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800444a:	f000 faa1 	bl	8004990 <SEGGER_SYSVIEW_Start>
      break;
 800444e:	e035      	b.n	80044bc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004450:	f000 fb5a 	bl	8004b08 <SEGGER_SYSVIEW_Stop>
      break;
 8004454:	e032      	b.n	80044bc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004456:	f000 fd33 	bl	8004ec0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800445a:	e02f      	b.n	80044bc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800445c:	f000 fcf8 	bl	8004e50 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004460:	e02c      	b.n	80044bc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004462:	f000 fb77 	bl	8004b54 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004466:	e029      	b.n	80044bc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004468:	f000 ff66 	bl	8005338 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800446c:	e026      	b.n	80044bc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800446e:	f000 ff45 	bl	80052fc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004472:	e023      	b.n	80044bc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004474:	4b13      	ldr	r3, [pc, #76]	@ (80044c4 <_HandleIncomingPacket+0xdc>)
 8004476:	7e1b      	ldrb	r3, [r3, #24]
 8004478:	4618      	mov	r0, r3
 800447a:	1cfb      	adds	r3, r7, #3
 800447c:	2201      	movs	r2, #1
 800447e:	4619      	mov	r1, r3
 8004480:	f7ff fd68 	bl	8003f54 <SEGGER_RTT_ReadNoLock>
 8004484:	4603      	mov	r3, r0
 8004486:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	dd13      	ble.n	80044b6 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800448e:	78fb      	ldrb	r3, [r7, #3]
 8004490:	4618      	mov	r0, r3
 8004492:	f000 feb3 	bl	80051fc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004496:	e00e      	b.n	80044b6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004498:	78fb      	ldrb	r3, [r7, #3]
 800449a:	b25b      	sxtb	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	da0c      	bge.n	80044ba <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80044a0:	4b08      	ldr	r3, [pc, #32]	@ (80044c4 <_HandleIncomingPacket+0xdc>)
 80044a2:	7e1b      	ldrb	r3, [r3, #24]
 80044a4:	4618      	mov	r0, r3
 80044a6:	1cfb      	adds	r3, r7, #3
 80044a8:	2201      	movs	r2, #1
 80044aa:	4619      	mov	r1, r3
 80044ac:	f7ff fd52 	bl	8003f54 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80044b0:	e003      	b.n	80044ba <_HandleIncomingPacket+0xd2>
      break;
 80044b2:	bf00      	nop
 80044b4:	e002      	b.n	80044bc <_HandleIncomingPacket+0xd4>
      break;
 80044b6:	bf00      	nop
 80044b8:	e000      	b.n	80044bc <_HandleIncomingPacket+0xd4>
      break;
 80044ba:	bf00      	nop
    }
  }
}
 80044bc:	bf00      	nop
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	2001431c 	.word	0x2001431c

080044c8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08c      	sub	sp, #48	@ 0x30
 80044cc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80044ce:	2301      	movs	r3, #1
 80044d0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80044d2:	1d3b      	adds	r3, r7, #4
 80044d4:	3301      	adds	r3, #1
 80044d6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044dc:	4b32      	ldr	r3, [pc, #200]	@ (80045a8 <_TrySendOverflowPacket+0xe0>)
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044e2:	e00b      	b.n	80044fc <_TrySendOverflowPacket+0x34>
 80044e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ea:	1c59      	adds	r1, r3, #1
 80044ec:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80044ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	701a      	strb	r2, [r3, #0]
 80044f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f8:	09db      	lsrs	r3, r3, #7
 80044fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8004500:	d8f0      	bhi.n	80044e4 <_TrySendOverflowPacket+0x1c>
 8004502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004508:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	701a      	strb	r2, [r3, #0]
 800450e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004510:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004512:	4b26      	ldr	r3, [pc, #152]	@ (80045ac <_TrySendOverflowPacket+0xe4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004518:	4b23      	ldr	r3, [pc, #140]	@ (80045a8 <_TrySendOverflowPacket+0xe0>)
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	627b      	str	r3, [r7, #36]	@ 0x24
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	623b      	str	r3, [r7, #32]
 800452a:	e00b      	b.n	8004544 <_TrySendOverflowPacket+0x7c>
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	b2da      	uxtb	r2, r3
 8004530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004532:	1c59      	adds	r1, r3, #1
 8004534:	6279      	str	r1, [r7, #36]	@ 0x24
 8004536:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	701a      	strb	r2, [r3, #0]
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	09db      	lsrs	r3, r3, #7
 8004542:	623b      	str	r3, [r7, #32]
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	2b7f      	cmp	r3, #127	@ 0x7f
 8004548:	d8f0      	bhi.n	800452c <_TrySendOverflowPacket+0x64>
 800454a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004550:	6a3a      	ldr	r2, [r7, #32]
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	701a      	strb	r2, [r3, #0]
 8004556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004558:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800455a:	4b13      	ldr	r3, [pc, #76]	@ (80045a8 <_TrySendOverflowPacket+0xe0>)
 800455c:	785b      	ldrb	r3, [r3, #1]
 800455e:	4618      	mov	r0, r3
 8004560:	1d3b      	adds	r3, r7, #4
 8004562:	69fa      	ldr	r2, [r7, #28]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	461a      	mov	r2, r3
 8004568:	1d3b      	adds	r3, r7, #4
 800456a:	4619      	mov	r1, r3
 800456c:	f7fb fe30 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004570:	4603      	mov	r3, r0
 8004572:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004574:	f7ff fabe 	bl	8003af4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d009      	beq.n	8004592 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800457e:	4a0a      	ldr	r2, [pc, #40]	@ (80045a8 <_TrySendOverflowPacket+0xe0>)
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004584:	4b08      	ldr	r3, [pc, #32]	@ (80045a8 <_TrySendOverflowPacket+0xe0>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	3b01      	subs	r3, #1
 800458a:	b2da      	uxtb	r2, r3
 800458c:	4b06      	ldr	r3, [pc, #24]	@ (80045a8 <_TrySendOverflowPacket+0xe0>)
 800458e:	701a      	strb	r2, [r3, #0]
 8004590:	e004      	b.n	800459c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004592:	4b05      	ldr	r3, [pc, #20]	@ (80045a8 <_TrySendOverflowPacket+0xe0>)
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	3301      	adds	r3, #1
 8004598:	4a03      	ldr	r2, [pc, #12]	@ (80045a8 <_TrySendOverflowPacket+0xe0>)
 800459a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800459c:	693b      	ldr	r3, [r7, #16]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3730      	adds	r7, #48	@ 0x30
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	2001431c 	.word	0x2001431c
 80045ac:	e0001004 	.word	0xe0001004

080045b0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b08a      	sub	sp, #40	@ 0x28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80045bc:	4b6d      	ldr	r3, [pc, #436]	@ (8004774 <_SendPacket+0x1c4>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d010      	beq.n	80045e6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80045c4:	4b6b      	ldr	r3, [pc, #428]	@ (8004774 <_SendPacket+0x1c4>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 80a5 	beq.w	8004718 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80045ce:	4b69      	ldr	r3, [pc, #420]	@ (8004774 <_SendPacket+0x1c4>)
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d109      	bne.n	80045ea <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80045d6:	f7ff ff77 	bl	80044c8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80045da:	4b66      	ldr	r3, [pc, #408]	@ (8004774 <_SendPacket+0x1c4>)
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	f040 809c 	bne.w	800471c <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80045e4:	e001      	b.n	80045ea <_SendPacket+0x3a>
    goto Send;
 80045e6:	bf00      	nop
 80045e8:	e000      	b.n	80045ec <_SendPacket+0x3c>
Send:
 80045ea:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b1f      	cmp	r3, #31
 80045f0:	d809      	bhi.n	8004606 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80045f2:	4b60      	ldr	r3, [pc, #384]	@ (8004774 <_SendPacket+0x1c4>)
 80045f4:	69da      	ldr	r2, [r3, #28]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	fa22 f303 	lsr.w	r3, r2, r3
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	f040 808d 	bne.w	8004720 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b17      	cmp	r3, #23
 800460a:	d807      	bhi.n	800461c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	3b01      	subs	r3, #1
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	b2da      	uxtb	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	701a      	strb	r2, [r3, #0]
 800461a:	e03d      	b.n	8004698 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	2b7f      	cmp	r3, #127	@ 0x7f
 8004628:	d912      	bls.n	8004650 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	09da      	lsrs	r2, r3, #7
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3b01      	subs	r3, #1
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	b2db      	uxtb	r3, r3
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	3a01      	subs	r2, #1
 8004642:	60fa      	str	r2, [r7, #12]
 8004644:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004648:	b2da      	uxtb	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	701a      	strb	r2, [r3, #0]
 800464e:	e006      	b.n	800465e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	3b01      	subs	r3, #1
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	b2da      	uxtb	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b7f      	cmp	r3, #127	@ 0x7f
 8004662:	d912      	bls.n	800468a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	09da      	lsrs	r2, r3, #7
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	3b01      	subs	r3, #1
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	b2db      	uxtb	r3, r3
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	3a01      	subs	r2, #1
 800467c:	60fa      	str	r2, [r7, #12]
 800467e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004682:	b2da      	uxtb	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	701a      	strb	r2, [r3, #0]
 8004688:	e006      	b.n	8004698 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	3b01      	subs	r3, #1
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	b2da      	uxtb	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004698:	4b37      	ldr	r3, [pc, #220]	@ (8004778 <_SendPacket+0x1c8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800469e:	4b35      	ldr	r3, [pc, #212]	@ (8004774 <_SendPacket+0x1c4>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	623b      	str	r3, [r7, #32]
 80046b0:	e00b      	b.n	80046ca <_SendPacket+0x11a>
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b8:	1c59      	adds	r1, r3, #1
 80046ba:	6279      	str	r1, [r7, #36]	@ 0x24
 80046bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	701a      	strb	r2, [r3, #0]
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	09db      	lsrs	r3, r3, #7
 80046c8:	623b      	str	r3, [r7, #32]
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80046ce:	d8f0      	bhi.n	80046b2 <_SendPacket+0x102>
 80046d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80046d6:	6a3a      	ldr	r2, [r7, #32]
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	701a      	strb	r2, [r3, #0]
 80046dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046de:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80046e0:	4b24      	ldr	r3, [pc, #144]	@ (8004774 <_SendPacket+0x1c4>)
 80046e2:	785b      	ldrb	r3, [r3, #1]
 80046e4:	4618      	mov	r0, r3
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	461a      	mov	r2, r3
 80046ee:	68f9      	ldr	r1, [r7, #12]
 80046f0:	f7fb fd6e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80046f4:	4603      	mov	r3, r0
 80046f6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80046f8:	f7ff f9fc 	bl	8003af4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004702:	4a1c      	ldr	r2, [pc, #112]	@ (8004774 <_SendPacket+0x1c4>)
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	60d3      	str	r3, [r2, #12]
 8004708:	e00b      	b.n	8004722 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800470a:	4b1a      	ldr	r3, [pc, #104]	@ (8004774 <_SendPacket+0x1c4>)
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	3301      	adds	r3, #1
 8004710:	b2da      	uxtb	r2, r3
 8004712:	4b18      	ldr	r3, [pc, #96]	@ (8004774 <_SendPacket+0x1c4>)
 8004714:	701a      	strb	r2, [r3, #0]
 8004716:	e004      	b.n	8004722 <_SendPacket+0x172>
    goto SendDone;
 8004718:	bf00      	nop
 800471a:	e002      	b.n	8004722 <_SendPacket+0x172>
      goto SendDone;
 800471c:	bf00      	nop
 800471e:	e000      	b.n	8004722 <_SendPacket+0x172>
      goto SendDone;
 8004720:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004722:	4b14      	ldr	r3, [pc, #80]	@ (8004774 <_SendPacket+0x1c4>)
 8004724:	7e1b      	ldrb	r3, [r3, #24]
 8004726:	4619      	mov	r1, r3
 8004728:	4a14      	ldr	r2, [pc, #80]	@ (800477c <_SendPacket+0x1cc>)
 800472a:	460b      	mov	r3, r1
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	440b      	add	r3, r1
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	4413      	add	r3, r2
 8004734:	336c      	adds	r3, #108	@ 0x6c
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	4b0e      	ldr	r3, [pc, #56]	@ (8004774 <_SendPacket+0x1c4>)
 800473a:	7e1b      	ldrb	r3, [r3, #24]
 800473c:	4618      	mov	r0, r3
 800473e:	490f      	ldr	r1, [pc, #60]	@ (800477c <_SendPacket+0x1cc>)
 8004740:	4603      	mov	r3, r0
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	4403      	add	r3, r0
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	440b      	add	r3, r1
 800474a:	3370      	adds	r3, #112	@ 0x70
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d00b      	beq.n	800476a <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004752:	4b08      	ldr	r3, [pc, #32]	@ (8004774 <_SendPacket+0x1c4>)
 8004754:	789b      	ldrb	r3, [r3, #2]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d107      	bne.n	800476a <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800475a:	4b06      	ldr	r3, [pc, #24]	@ (8004774 <_SendPacket+0x1c4>)
 800475c:	2201      	movs	r2, #1
 800475e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004760:	f7ff fe42 	bl	80043e8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004764:	4b03      	ldr	r3, [pc, #12]	@ (8004774 <_SendPacket+0x1c4>)
 8004766:	2200      	movs	r2, #0
 8004768:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800476a:	bf00      	nop
 800476c:	3728      	adds	r7, #40	@ 0x28
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	2001431c 	.word	0x2001431c
 8004778:	e0001004 	.word	0xe0001004
 800477c:	20012e5c 	.word	0x20012e5c

08004780 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af02      	add	r7, sp, #8
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
 800478c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800478e:	2300      	movs	r3, #0
 8004790:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004794:	4917      	ldr	r1, [pc, #92]	@ (80047f4 <SEGGER_SYSVIEW_Init+0x74>)
 8004796:	4818      	ldr	r0, [pc, #96]	@ (80047f8 <SEGGER_SYSVIEW_Init+0x78>)
 8004798:	f7ff fcd8 	bl	800414c <SEGGER_RTT_AllocUpBuffer>
 800479c:	4603      	mov	r3, r0
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	4b16      	ldr	r3, [pc, #88]	@ (80047fc <SEGGER_SYSVIEW_Init+0x7c>)
 80047a2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80047a4:	4b15      	ldr	r3, [pc, #84]	@ (80047fc <SEGGER_SYSVIEW_Init+0x7c>)
 80047a6:	785a      	ldrb	r2, [r3, #1]
 80047a8:	4b14      	ldr	r3, [pc, #80]	@ (80047fc <SEGGER_SYSVIEW_Init+0x7c>)
 80047aa:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80047ac:	4b13      	ldr	r3, [pc, #76]	@ (80047fc <SEGGER_SYSVIEW_Init+0x7c>)
 80047ae:	7e1b      	ldrb	r3, [r3, #24]
 80047b0:	4618      	mov	r0, r3
 80047b2:	2300      	movs	r3, #0
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	2308      	movs	r3, #8
 80047b8:	4a11      	ldr	r2, [pc, #68]	@ (8004800 <SEGGER_SYSVIEW_Init+0x80>)
 80047ba:	490f      	ldr	r1, [pc, #60]	@ (80047f8 <SEGGER_SYSVIEW_Init+0x78>)
 80047bc:	f7ff fd4a 	bl	8004254 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80047c0:	4b0e      	ldr	r3, [pc, #56]	@ (80047fc <SEGGER_SYSVIEW_Init+0x7c>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80047c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004804 <SEGGER_SYSVIEW_Init+0x84>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a0c      	ldr	r2, [pc, #48]	@ (80047fc <SEGGER_SYSVIEW_Init+0x7c>)
 80047cc:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80047ce:	4a0b      	ldr	r2, [pc, #44]	@ (80047fc <SEGGER_SYSVIEW_Init+0x7c>)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80047d4:	4a09      	ldr	r2, [pc, #36]	@ (80047fc <SEGGER_SYSVIEW_Init+0x7c>)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80047da:	4a08      	ldr	r2, [pc, #32]	@ (80047fc <SEGGER_SYSVIEW_Init+0x7c>)
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80047e0:	4a06      	ldr	r2, [pc, #24]	@ (80047fc <SEGGER_SYSVIEW_Init+0x7c>)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80047e6:	4b05      	ldr	r3, [pc, #20]	@ (80047fc <SEGGER_SYSVIEW_Init+0x7c>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80047ec:	bf00      	nop
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	20013314 	.word	0x20013314
 80047f8:	08005680 	.word	0x08005680
 80047fc:	2001431c 	.word	0x2001431c
 8004800:	20014314 	.word	0x20014314
 8004804:	e0001004 	.word	0xe0001004

08004808 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004810:	4a04      	ldr	r2, [pc, #16]	@ (8004824 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6113      	str	r3, [r2, #16]
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	2001431c 	.word	0x2001431c

08004828 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004830:	f3ef 8311 	mrs	r3, BASEPRI
 8004834:	f04f 0120 	mov.w	r1, #32
 8004838:	f381 8811 	msr	BASEPRI, r1
 800483c:	60fb      	str	r3, [r7, #12]
 800483e:	4808      	ldr	r0, [pc, #32]	@ (8004860 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004840:	f7ff fdc5 	bl	80043ce <_PreparePacket>
 8004844:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	68b9      	ldr	r1, [r7, #8]
 800484a:	68b8      	ldr	r0, [r7, #8]
 800484c:	f7ff feb0 	bl	80045b0 <_SendPacket>
  RECORD_END();
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f383 8811 	msr	BASEPRI, r3
}
 8004856:	bf00      	nop
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	2001434c 	.word	0x2001434c

08004864 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004864:	b580      	push	{r7, lr}
 8004866:	b088      	sub	sp, #32
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800486e:	f3ef 8311 	mrs	r3, BASEPRI
 8004872:	f04f 0120 	mov.w	r1, #32
 8004876:	f381 8811 	msr	BASEPRI, r1
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	4816      	ldr	r0, [pc, #88]	@ (80048d8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800487e:	f7ff fda6 	bl	80043ce <_PreparePacket>
 8004882:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	61fb      	str	r3, [r7, #28]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	61bb      	str	r3, [r7, #24]
 8004890:	e00b      	b.n	80048aa <SEGGER_SYSVIEW_RecordU32+0x46>
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	b2da      	uxtb	r2, r3
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	1c59      	adds	r1, r3, #1
 800489a:	61f9      	str	r1, [r7, #28]
 800489c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	701a      	strb	r2, [r3, #0]
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	09db      	lsrs	r3, r3, #7
 80048a8:	61bb      	str	r3, [r7, #24]
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80048ae:	d8f0      	bhi.n	8004892 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	61fa      	str	r2, [r7, #28]
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	701a      	strb	r2, [r3, #0]
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	68f9      	ldr	r1, [r7, #12]
 80048c4:	6938      	ldr	r0, [r7, #16]
 80048c6:	f7ff fe73 	bl	80045b0 <_SendPacket>
  RECORD_END();
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f383 8811 	msr	BASEPRI, r3
}
 80048d0:	bf00      	nop
 80048d2:	3720      	adds	r7, #32
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	2001434c 	.word	0x2001434c

080048dc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80048dc:	b580      	push	{r7, lr}
 80048de:	b08c      	sub	sp, #48	@ 0x30
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80048e8:	f3ef 8311 	mrs	r3, BASEPRI
 80048ec:	f04f 0120 	mov.w	r1, #32
 80048f0:	f381 8811 	msr	BASEPRI, r1
 80048f4:	61fb      	str	r3, [r7, #28]
 80048f6:	4825      	ldr	r0, [pc, #148]	@ (800498c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80048f8:	f7ff fd69 	bl	80043ce <_PreparePacket>
 80048fc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	62bb      	str	r3, [r7, #40]	@ 0x28
 800490a:	e00b      	b.n	8004924 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800490c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490e:	b2da      	uxtb	r2, r3
 8004910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004912:	1c59      	adds	r1, r3, #1
 8004914:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004916:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	701a      	strb	r2, [r3, #0]
 800491e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004920:	09db      	lsrs	r3, r3, #7
 8004922:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004926:	2b7f      	cmp	r3, #127	@ 0x7f
 8004928:	d8f0      	bhi.n	800490c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800492a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800492c:	1c5a      	adds	r2, r3, #1
 800492e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004930:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	701a      	strb	r2, [r3, #0]
 8004936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004938:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	627b      	str	r3, [r7, #36]	@ 0x24
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	623b      	str	r3, [r7, #32]
 8004942:	e00b      	b.n	800495c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	b2da      	uxtb	r2, r3
 8004948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494a:	1c59      	adds	r1, r3, #1
 800494c:	6279      	str	r1, [r7, #36]	@ 0x24
 800494e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	701a      	strb	r2, [r3, #0]
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	09db      	lsrs	r3, r3, #7
 800495a:	623b      	str	r3, [r7, #32]
 800495c:	6a3b      	ldr	r3, [r7, #32]
 800495e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004960:	d8f0      	bhi.n	8004944 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	627a      	str	r2, [r7, #36]	@ 0x24
 8004968:	6a3a      	ldr	r2, [r7, #32]
 800496a:	b2d2      	uxtb	r2, r2
 800496c:	701a      	strb	r2, [r3, #0]
 800496e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004970:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	6979      	ldr	r1, [r7, #20]
 8004976:	69b8      	ldr	r0, [r7, #24]
 8004978:	f7ff fe1a 	bl	80045b0 <_SendPacket>
  RECORD_END();
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	f383 8811 	msr	BASEPRI, r3
}
 8004982:	bf00      	nop
 8004984:	3730      	adds	r7, #48	@ 0x30
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	2001434c 	.word	0x2001434c

08004990 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004990:	b580      	push	{r7, lr}
 8004992:	b08c      	sub	sp, #48	@ 0x30
 8004994:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004996:	4b59      	ldr	r3, [pc, #356]	@ (8004afc <SEGGER_SYSVIEW_Start+0x16c>)
 8004998:	2201      	movs	r2, #1
 800499a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800499c:	f3ef 8311 	mrs	r3, BASEPRI
 80049a0:	f04f 0120 	mov.w	r1, #32
 80049a4:	f381 8811 	msr	BASEPRI, r1
 80049a8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80049aa:	4b54      	ldr	r3, [pc, #336]	@ (8004afc <SEGGER_SYSVIEW_Start+0x16c>)
 80049ac:	785b      	ldrb	r3, [r3, #1]
 80049ae:	220a      	movs	r2, #10
 80049b0:	4953      	ldr	r1, [pc, #332]	@ (8004b00 <SEGGER_SYSVIEW_Start+0x170>)
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fb fc0c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80049be:	f7ff f899 	bl	8003af4 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80049c2:	200a      	movs	r0, #10
 80049c4:	f7ff ff30 	bl	8004828 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80049c8:	f3ef 8311 	mrs	r3, BASEPRI
 80049cc:	f04f 0120 	mov.w	r1, #32
 80049d0:	f381 8811 	msr	BASEPRI, r1
 80049d4:	60bb      	str	r3, [r7, #8]
 80049d6:	484b      	ldr	r0, [pc, #300]	@ (8004b04 <SEGGER_SYSVIEW_Start+0x174>)
 80049d8:	f7ff fcf9 	bl	80043ce <_PreparePacket>
 80049dc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049e6:	4b45      	ldr	r3, [pc, #276]	@ (8004afc <SEGGER_SYSVIEW_Start+0x16c>)
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049ec:	e00b      	b.n	8004a06 <SEGGER_SYSVIEW_Start+0x76>
 80049ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049f4:	1c59      	adds	r1, r3, #1
 80049f6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80049f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80049fc:	b2d2      	uxtb	r2, r2
 80049fe:	701a      	strb	r2, [r3, #0]
 8004a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a02:	09db      	lsrs	r3, r3, #7
 8004a04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a08:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a0a:	d8f0      	bhi.n	80049ee <SEGGER_SYSVIEW_Start+0x5e>
 8004a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a0e:	1c5a      	adds	r2, r3, #1
 8004a10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	701a      	strb	r2, [r3, #0]
 8004a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a1a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a20:	4b36      	ldr	r3, [pc, #216]	@ (8004afc <SEGGER_SYSVIEW_Start+0x16c>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	623b      	str	r3, [r7, #32]
 8004a26:	e00b      	b.n	8004a40 <SEGGER_SYSVIEW_Start+0xb0>
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2e:	1c59      	adds	r1, r3, #1
 8004a30:	6279      	str	r1, [r7, #36]	@ 0x24
 8004a32:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	701a      	strb	r2, [r3, #0]
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	09db      	lsrs	r3, r3, #7
 8004a3e:	623b      	str	r3, [r7, #32]
 8004a40:	6a3b      	ldr	r3, [r7, #32]
 8004a42:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a44:	d8f0      	bhi.n	8004a28 <SEGGER_SYSVIEW_Start+0x98>
 8004a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	627a      	str	r2, [r7, #36]	@ 0x24
 8004a4c:	6a3a      	ldr	r2, [r7, #32]
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	701a      	strb	r2, [r3, #0]
 8004a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a54:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	61fb      	str	r3, [r7, #28]
 8004a5a:	4b28      	ldr	r3, [pc, #160]	@ (8004afc <SEGGER_SYSVIEW_Start+0x16c>)
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	61bb      	str	r3, [r7, #24]
 8004a60:	e00b      	b.n	8004a7a <SEGGER_SYSVIEW_Start+0xea>
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	1c59      	adds	r1, r3, #1
 8004a6a:	61f9      	str	r1, [r7, #28]
 8004a6c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	701a      	strb	r2, [r3, #0]
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	09db      	lsrs	r3, r3, #7
 8004a78:	61bb      	str	r3, [r7, #24]
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a7e:	d8f0      	bhi.n	8004a62 <SEGGER_SYSVIEW_Start+0xd2>
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	1c5a      	adds	r2, r3, #1
 8004a84:	61fa      	str	r2, [r7, #28]
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	701a      	strb	r2, [r3, #0]
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	617b      	str	r3, [r7, #20]
 8004a94:	2300      	movs	r3, #0
 8004a96:	613b      	str	r3, [r7, #16]
 8004a98:	e00b      	b.n	8004ab2 <SEGGER_SYSVIEW_Start+0x122>
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	1c59      	adds	r1, r3, #1
 8004aa2:	6179      	str	r1, [r7, #20]
 8004aa4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	701a      	strb	r2, [r3, #0]
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	09db      	lsrs	r3, r3, #7
 8004ab0:	613b      	str	r3, [r7, #16]
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ab6:	d8f0      	bhi.n	8004a9a <SEGGER_SYSVIEW_Start+0x10a>
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	1c5a      	adds	r2, r3, #1
 8004abc:	617a      	str	r2, [r7, #20]
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	b2d2      	uxtb	r2, r2
 8004ac2:	701a      	strb	r2, [r3, #0]
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004ac8:	2218      	movs	r2, #24
 8004aca:	6839      	ldr	r1, [r7, #0]
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f7ff fd6f 	bl	80045b0 <_SendPacket>
      RECORD_END();
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004ad8:	4b08      	ldr	r3, [pc, #32]	@ (8004afc <SEGGER_SYSVIEW_Start+0x16c>)
 8004ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004ae0:	4b06      	ldr	r3, [pc, #24]	@ (8004afc <SEGGER_SYSVIEW_Start+0x16c>)
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004ae6:	f000 f9eb 	bl	8004ec0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004aea:	f000 f9b1 	bl	8004e50 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004aee:	f000 fc23 	bl	8005338 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004af2:	bf00      	nop
 8004af4:	3730      	adds	r7, #48	@ 0x30
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	2001431c 	.word	0x2001431c
 8004b00:	080056ac 	.word	0x080056ac
 8004b04:	2001434c 	.word	0x2001434c

08004b08 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004b0e:	f3ef 8311 	mrs	r3, BASEPRI
 8004b12:	f04f 0120 	mov.w	r1, #32
 8004b16:	f381 8811 	msr	BASEPRI, r1
 8004b1a:	607b      	str	r3, [r7, #4]
 8004b1c:	480b      	ldr	r0, [pc, #44]	@ (8004b4c <SEGGER_SYSVIEW_Stop+0x44>)
 8004b1e:	f7ff fc56 	bl	80043ce <_PreparePacket>
 8004b22:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004b24:	4b0a      	ldr	r3, [pc, #40]	@ (8004b50 <SEGGER_SYSVIEW_Stop+0x48>)
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d007      	beq.n	8004b3c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004b2c:	220b      	movs	r2, #11
 8004b2e:	6839      	ldr	r1, [r7, #0]
 8004b30:	6838      	ldr	r0, [r7, #0]
 8004b32:	f7ff fd3d 	bl	80045b0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004b36:	4b06      	ldr	r3, [pc, #24]	@ (8004b50 <SEGGER_SYSVIEW_Stop+0x48>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f383 8811 	msr	BASEPRI, r3
}
 8004b42:	bf00      	nop
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	2001434c 	.word	0x2001434c
 8004b50:	2001431c 	.word	0x2001431c

08004b54 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b08c      	sub	sp, #48	@ 0x30
 8004b58:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004b5a:	f3ef 8311 	mrs	r3, BASEPRI
 8004b5e:	f04f 0120 	mov.w	r1, #32
 8004b62:	f381 8811 	msr	BASEPRI, r1
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	4845      	ldr	r0, [pc, #276]	@ (8004c80 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004b6a:	f7ff fc30 	bl	80043ce <_PreparePacket>
 8004b6e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b78:	4b42      	ldr	r3, [pc, #264]	@ (8004c84 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b7e:	e00b      	b.n	8004b98 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b86:	1c59      	adds	r1, r3, #1
 8004b88:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004b8a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	701a      	strb	r2, [r3, #0]
 8004b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b94:	09db      	lsrs	r3, r3, #7
 8004b96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b9c:	d8f0      	bhi.n	8004b80 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ba4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	701a      	strb	r2, [r3, #0]
 8004baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bb2:	4b34      	ldr	r3, [pc, #208]	@ (8004c84 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	623b      	str	r3, [r7, #32]
 8004bb8:	e00b      	b.n	8004bd2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc0:	1c59      	adds	r1, r3, #1
 8004bc2:	6279      	str	r1, [r7, #36]	@ 0x24
 8004bc4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	701a      	strb	r2, [r3, #0]
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	09db      	lsrs	r3, r3, #7
 8004bd0:	623b      	str	r3, [r7, #32]
 8004bd2:	6a3b      	ldr	r3, [r7, #32]
 8004bd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bd6:	d8f0      	bhi.n	8004bba <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bda:	1c5a      	adds	r2, r3, #1
 8004bdc:	627a      	str	r2, [r7, #36]	@ 0x24
 8004bde:	6a3a      	ldr	r2, [r7, #32]
 8004be0:	b2d2      	uxtb	r2, r2
 8004be2:	701a      	strb	r2, [r3, #0]
 8004be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	61fb      	str	r3, [r7, #28]
 8004bec:	4b25      	ldr	r3, [pc, #148]	@ (8004c84 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	61bb      	str	r3, [r7, #24]
 8004bf2:	e00b      	b.n	8004c0c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	1c59      	adds	r1, r3, #1
 8004bfc:	61f9      	str	r1, [r7, #28]
 8004bfe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	701a      	strb	r2, [r3, #0]
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	09db      	lsrs	r3, r3, #7
 8004c0a:	61bb      	str	r3, [r7, #24]
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c10:	d8f0      	bhi.n	8004bf4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	61fa      	str	r2, [r7, #28]
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	617b      	str	r3, [r7, #20]
 8004c26:	2300      	movs	r3, #0
 8004c28:	613b      	str	r3, [r7, #16]
 8004c2a:	e00b      	b.n	8004c44 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	1c59      	adds	r1, r3, #1
 8004c34:	6179      	str	r1, [r7, #20]
 8004c36:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	701a      	strb	r2, [r3, #0]
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	09db      	lsrs	r3, r3, #7
 8004c42:	613b      	str	r3, [r7, #16]
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c48:	d8f0      	bhi.n	8004c2c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	1c5a      	adds	r2, r3, #1
 8004c4e:	617a      	str	r2, [r7, #20]
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	701a      	strb	r2, [r3, #0]
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004c5a:	2218      	movs	r2, #24
 8004c5c:	6879      	ldr	r1, [r7, #4]
 8004c5e:	68b8      	ldr	r0, [r7, #8]
 8004c60:	f7ff fca6 	bl	80045b0 <_SendPacket>
  RECORD_END();
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004c6a:	4b06      	ldr	r3, [pc, #24]	@ (8004c84 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d002      	beq.n	8004c78 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004c72:	4b04      	ldr	r3, [pc, #16]	@ (8004c84 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c76:	4798      	blx	r3
  }
}
 8004c78:	bf00      	nop
 8004c7a:	3730      	adds	r7, #48	@ 0x30
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	2001434c 	.word	0x2001434c
 8004c84:	2001431c 	.word	0x2001431c

08004c88 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b092      	sub	sp, #72	@ 0x48
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004c90:	f3ef 8311 	mrs	r3, BASEPRI
 8004c94:	f04f 0120 	mov.w	r1, #32
 8004c98:	f381 8811 	msr	BASEPRI, r1
 8004c9c:	617b      	str	r3, [r7, #20]
 8004c9e:	486a      	ldr	r0, [pc, #424]	@ (8004e48 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004ca0:	f7ff fb95 	bl	80043ce <_PreparePacket>
 8004ca4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	4b66      	ldr	r3, [pc, #408]	@ (8004e4c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cba:	e00b      	b.n	8004cd4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004cbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cc2:	1c59      	adds	r1, r3, #1
 8004cc4:	6479      	str	r1, [r7, #68]	@ 0x44
 8004cc6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	701a      	strb	r2, [r3, #0]
 8004cce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cd0:	09db      	lsrs	r3, r3, #7
 8004cd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004cd8:	d8f0      	bhi.n	8004cbc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004cda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	647a      	str	r2, [r7, #68]	@ 0x44
 8004ce0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	701a      	strb	r2, [r3, #0]
 8004ce6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ce8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cf4:	e00b      	b.n	8004d0e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cfc:	1c59      	adds	r1, r3, #1
 8004cfe:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004d00:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d04:	b2d2      	uxtb	r2, r2
 8004d06:	701a      	strb	r2, [r3, #0]
 8004d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d0a:	09db      	lsrs	r3, r3, #7
 8004d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d10:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d12:	d8f0      	bhi.n	8004cf6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d16:	1c5a      	adds	r2, r3, #1
 8004d18:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004d1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	701a      	strb	r2, [r3, #0]
 8004d20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d22:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f7ff fb01 	bl	8004334 <_EncodeStr>
 8004d32:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004d34:	2209      	movs	r2, #9
 8004d36:	68f9      	ldr	r1, [r7, #12]
 8004d38:	6938      	ldr	r0, [r7, #16]
 8004d3a:	f7ff fc39 	bl	80045b0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	4b40      	ldr	r3, [pc, #256]	@ (8004e4c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d52:	e00b      	b.n	8004d6c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d5a:	1c59      	adds	r1, r3, #1
 8004d5c:	6379      	str	r1, [r7, #52]	@ 0x34
 8004d5e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d62:	b2d2      	uxtb	r2, r2
 8004d64:	701a      	strb	r2, [r3, #0]
 8004d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d68:	09db      	lsrs	r3, r3, #7
 8004d6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d70:	d8f0      	bhi.n	8004d54 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	637a      	str	r2, [r7, #52]	@ 0x34
 8004d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	701a      	strb	r2, [r3, #0]
 8004d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d8c:	e00b      	b.n	8004da6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d94:	1c59      	adds	r1, r3, #1
 8004d96:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004d98:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d9c:	b2d2      	uxtb	r2, r2
 8004d9e:	701a      	strb	r2, [r3, #0]
 8004da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da2:	09db      	lsrs	r3, r3, #7
 8004da4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004daa:	d8f0      	bhi.n	8004d8e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004db2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004db4:	b2d2      	uxtb	r2, r2
 8004db6:	701a      	strb	r2, [r3, #0]
 8004db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	623b      	str	r3, [r7, #32]
 8004dc6:	e00b      	b.n	8004de0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dce:	1c59      	adds	r1, r3, #1
 8004dd0:	6279      	str	r1, [r7, #36]	@ 0x24
 8004dd2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	701a      	strb	r2, [r3, #0]
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	09db      	lsrs	r3, r3, #7
 8004dde:	623b      	str	r3, [r7, #32]
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	2b7f      	cmp	r3, #127	@ 0x7f
 8004de4:	d8f0      	bhi.n	8004dc8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	627a      	str	r2, [r7, #36]	@ 0x24
 8004dec:	6a3a      	ldr	r2, [r7, #32]
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	701a      	strb	r2, [r3, #0]
 8004df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	61fb      	str	r3, [r7, #28]
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	61bb      	str	r3, [r7, #24]
 8004dfe:	e00b      	b.n	8004e18 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	1c59      	adds	r1, r3, #1
 8004e08:	61f9      	str	r1, [r7, #28]
 8004e0a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e0e:	b2d2      	uxtb	r2, r2
 8004e10:	701a      	strb	r2, [r3, #0]
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	09db      	lsrs	r3, r3, #7
 8004e16:	61bb      	str	r3, [r7, #24]
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e1c:	d8f0      	bhi.n	8004e00 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	61fa      	str	r2, [r7, #28]
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	b2d2      	uxtb	r2, r2
 8004e28:	701a      	strb	r2, [r3, #0]
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004e2e:	2215      	movs	r2, #21
 8004e30:	68f9      	ldr	r1, [r7, #12]
 8004e32:	6938      	ldr	r0, [r7, #16]
 8004e34:	f7ff fbbc 	bl	80045b0 <_SendPacket>
  RECORD_END();
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f383 8811 	msr	BASEPRI, r3
}
 8004e3e:	bf00      	nop
 8004e40:	3748      	adds	r7, #72	@ 0x48
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	2001434c 	.word	0x2001434c
 8004e4c:	2001431c 	.word	0x2001431c

08004e50 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004e54:	4b07      	ldr	r3, [pc, #28]	@ (8004e74 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d008      	beq.n	8004e6e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004e5c:	4b05      	ldr	r3, [pc, #20]	@ (8004e74 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004e66:	4b03      	ldr	r3, [pc, #12]	@ (8004e74 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	4798      	blx	r3
  }
}
 8004e6e:	bf00      	nop
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	2001431c 	.word	0x2001431c

08004e78 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e80:	f3ef 8311 	mrs	r3, BASEPRI
 8004e84:	f04f 0120 	mov.w	r1, #32
 8004e88:	f381 8811 	msr	BASEPRI, r1
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	480b      	ldr	r0, [pc, #44]	@ (8004ebc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004e90:	f7ff fa9d 	bl	80043ce <_PreparePacket>
 8004e94:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e96:	2280      	movs	r2, #128	@ 0x80
 8004e98:	6879      	ldr	r1, [r7, #4]
 8004e9a:	6938      	ldr	r0, [r7, #16]
 8004e9c:	f7ff fa4a 	bl	8004334 <_EncodeStr>
 8004ea0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004ea2:	220e      	movs	r2, #14
 8004ea4:	68f9      	ldr	r1, [r7, #12]
 8004ea6:	6938      	ldr	r0, [r7, #16]
 8004ea8:	f7ff fb82 	bl	80045b0 <_SendPacket>
  RECORD_END();
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f383 8811 	msr	BASEPRI, r3
}
 8004eb2:	bf00      	nop
 8004eb4:	3718      	adds	r7, #24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	2001434c 	.word	0x2001434c

08004ec0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004ec0:	b590      	push	{r4, r7, lr}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004ec6:	4b15      	ldr	r3, [pc, #84]	@ (8004f1c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d01a      	beq.n	8004f04 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004ece:	4b13      	ldr	r3, [pc, #76]	@ (8004f1c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d015      	beq.n	8004f04 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004ed8:	4b10      	ldr	r3, [pc, #64]	@ (8004f1c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4798      	blx	r3
 8004ee0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004ee4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004ee6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004eea:	f04f 0200 	mov.w	r2, #0
 8004eee:	f04f 0300 	mov.w	r3, #0
 8004ef2:	000a      	movs	r2, r1
 8004ef4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	461a      	mov	r2, r3
 8004efa:	4621      	mov	r1, r4
 8004efc:	200d      	movs	r0, #13
 8004efe:	f7ff fced 	bl	80048dc <SEGGER_SYSVIEW_RecordU32x2>
 8004f02:	e006      	b.n	8004f12 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004f04:	4b06      	ldr	r3, [pc, #24]	@ (8004f20 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4619      	mov	r1, r3
 8004f0a:	200c      	movs	r0, #12
 8004f0c:	f7ff fcaa 	bl	8004864 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004f10:	bf00      	nop
 8004f12:	bf00      	nop
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd90      	pop	{r4, r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	2001431c 	.word	0x2001431c
 8004f20:	e0001004 	.word	0xe0001004

08004f24 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004f2a:	f3ef 8311 	mrs	r3, BASEPRI
 8004f2e:	f04f 0120 	mov.w	r1, #32
 8004f32:	f381 8811 	msr	BASEPRI, r1
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	4819      	ldr	r0, [pc, #100]	@ (8004fa0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004f3a:	f7ff fa48 	bl	80043ce <_PreparePacket>
 8004f3e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004f44:	4b17      	ldr	r3, [pc, #92]	@ (8004fa4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f4c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	613b      	str	r3, [r7, #16]
 8004f56:	e00b      	b.n	8004f70 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	1c59      	adds	r1, r3, #1
 8004f60:	6179      	str	r1, [r7, #20]
 8004f62:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f66:	b2d2      	uxtb	r2, r2
 8004f68:	701a      	strb	r2, [r3, #0]
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	09db      	lsrs	r3, r3, #7
 8004f6e:	613b      	str	r3, [r7, #16]
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f74:	d8f0      	bhi.n	8004f58 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	617a      	str	r2, [r7, #20]
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	b2d2      	uxtb	r2, r2
 8004f80:	701a      	strb	r2, [r3, #0]
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004f86:	2202      	movs	r2, #2
 8004f88:	6879      	ldr	r1, [r7, #4]
 8004f8a:	68b8      	ldr	r0, [r7, #8]
 8004f8c:	f7ff fb10 	bl	80045b0 <_SendPacket>
  RECORD_END();
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f383 8811 	msr	BASEPRI, r3
}
 8004f96:	bf00      	nop
 8004f98:	3718      	adds	r7, #24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	2001434c 	.word	0x2001434c
 8004fa4:	e000ed04 	.word	0xe000ed04

08004fa8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004fae:	f3ef 8311 	mrs	r3, BASEPRI
 8004fb2:	f04f 0120 	mov.w	r1, #32
 8004fb6:	f381 8811 	msr	BASEPRI, r1
 8004fba:	607b      	str	r3, [r7, #4]
 8004fbc:	4807      	ldr	r0, [pc, #28]	@ (8004fdc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004fbe:	f7ff fa06 	bl	80043ce <_PreparePacket>
 8004fc2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004fc4:	2203      	movs	r2, #3
 8004fc6:	6839      	ldr	r1, [r7, #0]
 8004fc8:	6838      	ldr	r0, [r7, #0]
 8004fca:	f7ff faf1 	bl	80045b0 <_SendPacket>
  RECORD_END();
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f383 8811 	msr	BASEPRI, r3
}
 8004fd4:	bf00      	nop
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	2001434c 	.word	0x2001434c

08004fe0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004fe6:	f3ef 8311 	mrs	r3, BASEPRI
 8004fea:	f04f 0120 	mov.w	r1, #32
 8004fee:	f381 8811 	msr	BASEPRI, r1
 8004ff2:	607b      	str	r3, [r7, #4]
 8004ff4:	4807      	ldr	r0, [pc, #28]	@ (8005014 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004ff6:	f7ff f9ea 	bl	80043ce <_PreparePacket>
 8004ffa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004ffc:	2212      	movs	r2, #18
 8004ffe:	6839      	ldr	r1, [r7, #0]
 8005000:	6838      	ldr	r0, [r7, #0]
 8005002:	f7ff fad5 	bl	80045b0 <_SendPacket>
  RECORD_END();
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f383 8811 	msr	BASEPRI, r3
}
 800500c:	bf00      	nop
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	2001434c 	.word	0x2001434c

08005018 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800501e:	f3ef 8311 	mrs	r3, BASEPRI
 8005022:	f04f 0120 	mov.w	r1, #32
 8005026:	f381 8811 	msr	BASEPRI, r1
 800502a:	607b      	str	r3, [r7, #4]
 800502c:	4807      	ldr	r0, [pc, #28]	@ (800504c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800502e:	f7ff f9ce 	bl	80043ce <_PreparePacket>
 8005032:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005034:	2211      	movs	r2, #17
 8005036:	6839      	ldr	r1, [r7, #0]
 8005038:	6838      	ldr	r0, [r7, #0]
 800503a:	f7ff fab9 	bl	80045b0 <_SendPacket>
  RECORD_END();
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f383 8811 	msr	BASEPRI, r3
}
 8005044:	bf00      	nop
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	2001434c 	.word	0x2001434c

08005050 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005050:	b580      	push	{r7, lr}
 8005052:	b088      	sub	sp, #32
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005058:	f3ef 8311 	mrs	r3, BASEPRI
 800505c:	f04f 0120 	mov.w	r1, #32
 8005060:	f381 8811 	msr	BASEPRI, r1
 8005064:	617b      	str	r3, [r7, #20]
 8005066:	4819      	ldr	r0, [pc, #100]	@ (80050cc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005068:	f7ff f9b1 	bl	80043ce <_PreparePacket>
 800506c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005072:	4b17      	ldr	r3, [pc, #92]	@ (80050d0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	61fb      	str	r3, [r7, #28]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	61bb      	str	r3, [r7, #24]
 8005084:	e00b      	b.n	800509e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	b2da      	uxtb	r2, r3
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	1c59      	adds	r1, r3, #1
 800508e:	61f9      	str	r1, [r7, #28]
 8005090:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005094:	b2d2      	uxtb	r2, r2
 8005096:	701a      	strb	r2, [r3, #0]
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	09db      	lsrs	r3, r3, #7
 800509c:	61bb      	str	r3, [r7, #24]
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80050a2:	d8f0      	bhi.n	8005086 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	1c5a      	adds	r2, r3, #1
 80050a8:	61fa      	str	r2, [r7, #28]
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	701a      	strb	r2, [r3, #0]
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80050b4:	2208      	movs	r2, #8
 80050b6:	68f9      	ldr	r1, [r7, #12]
 80050b8:	6938      	ldr	r0, [r7, #16]
 80050ba:	f7ff fa79 	bl	80045b0 <_SendPacket>
  RECORD_END();
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f383 8811 	msr	BASEPRI, r3
}
 80050c4:	bf00      	nop
 80050c6:	3720      	adds	r7, #32
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	2001434c 	.word	0x2001434c
 80050d0:	2001431c 	.word	0x2001431c

080050d4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b088      	sub	sp, #32
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80050dc:	f3ef 8311 	mrs	r3, BASEPRI
 80050e0:	f04f 0120 	mov.w	r1, #32
 80050e4:	f381 8811 	msr	BASEPRI, r1
 80050e8:	617b      	str	r3, [r7, #20]
 80050ea:	4819      	ldr	r0, [pc, #100]	@ (8005150 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80050ec:	f7ff f96f 	bl	80043ce <_PreparePacket>
 80050f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80050f6:	4b17      	ldr	r3, [pc, #92]	@ (8005154 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	61fb      	str	r3, [r7, #28]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	61bb      	str	r3, [r7, #24]
 8005108:	e00b      	b.n	8005122 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	b2da      	uxtb	r2, r3
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	1c59      	adds	r1, r3, #1
 8005112:	61f9      	str	r1, [r7, #28]
 8005114:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005118:	b2d2      	uxtb	r2, r2
 800511a:	701a      	strb	r2, [r3, #0]
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	09db      	lsrs	r3, r3, #7
 8005120:	61bb      	str	r3, [r7, #24]
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	2b7f      	cmp	r3, #127	@ 0x7f
 8005126:	d8f0      	bhi.n	800510a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	61fa      	str	r2, [r7, #28]
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	b2d2      	uxtb	r2, r2
 8005132:	701a      	strb	r2, [r3, #0]
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005138:	2204      	movs	r2, #4
 800513a:	68f9      	ldr	r1, [r7, #12]
 800513c:	6938      	ldr	r0, [r7, #16]
 800513e:	f7ff fa37 	bl	80045b0 <_SendPacket>
  RECORD_END();
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f383 8811 	msr	BASEPRI, r3
}
 8005148:	bf00      	nop
 800514a:	3720      	adds	r7, #32
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	2001434c 	.word	0x2001434c
 8005154:	2001431c 	.word	0x2001431c

08005158 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005158:	b580      	push	{r7, lr}
 800515a:	b088      	sub	sp, #32
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005160:	f3ef 8311 	mrs	r3, BASEPRI
 8005164:	f04f 0120 	mov.w	r1, #32
 8005168:	f381 8811 	msr	BASEPRI, r1
 800516c:	617b      	str	r3, [r7, #20]
 800516e:	4819      	ldr	r0, [pc, #100]	@ (80051d4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005170:	f7ff f92d 	bl	80043ce <_PreparePacket>
 8005174:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800517a:	4b17      	ldr	r3, [pc, #92]	@ (80051d8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	61fb      	str	r3, [r7, #28]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	61bb      	str	r3, [r7, #24]
 800518c:	e00b      	b.n	80051a6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	b2da      	uxtb	r2, r3
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	1c59      	adds	r1, r3, #1
 8005196:	61f9      	str	r1, [r7, #28]
 8005198:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800519c:	b2d2      	uxtb	r2, r2
 800519e:	701a      	strb	r2, [r3, #0]
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	09db      	lsrs	r3, r3, #7
 80051a4:	61bb      	str	r3, [r7, #24]
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80051aa:	d8f0      	bhi.n	800518e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	61fa      	str	r2, [r7, #28]
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	b2d2      	uxtb	r2, r2
 80051b6:	701a      	strb	r2, [r3, #0]
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80051bc:	2206      	movs	r2, #6
 80051be:	68f9      	ldr	r1, [r7, #12]
 80051c0:	6938      	ldr	r0, [r7, #16]
 80051c2:	f7ff f9f5 	bl	80045b0 <_SendPacket>
  RECORD_END();
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f383 8811 	msr	BASEPRI, r3
}
 80051cc:	bf00      	nop
 80051ce:	3720      	adds	r7, #32
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	2001434c 	.word	0x2001434c
 80051d8:	2001431c 	.word	0x2001431c

080051dc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80051e4:	4b04      	ldr	r3, [pc, #16]	@ (80051f8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	1ad3      	subs	r3, r2, r3
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	2001431c 	.word	0x2001431c

080051fc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08c      	sub	sp, #48	@ 0x30
 8005200:	af00      	add	r7, sp, #0
 8005202:	4603      	mov	r3, r0
 8005204:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005206:	4b3b      	ldr	r3, [pc, #236]	@ (80052f4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d06d      	beq.n	80052ea <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800520e:	4b39      	ldr	r3, [pc, #228]	@ (80052f4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005214:	2300      	movs	r3, #0
 8005216:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005218:	e008      	b.n	800522c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800521a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8005220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005222:	2b00      	cmp	r3, #0
 8005224:	d007      	beq.n	8005236 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005228:	3301      	adds	r3, #1
 800522a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800522c:	79fb      	ldrb	r3, [r7, #7]
 800522e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005230:	429a      	cmp	r2, r3
 8005232:	d3f2      	bcc.n	800521a <SEGGER_SYSVIEW_SendModule+0x1e>
 8005234:	e000      	b.n	8005238 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005236:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800523a:	2b00      	cmp	r3, #0
 800523c:	d055      	beq.n	80052ea <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800523e:	f3ef 8311 	mrs	r3, BASEPRI
 8005242:	f04f 0120 	mov.w	r1, #32
 8005246:	f381 8811 	msr	BASEPRI, r1
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	482a      	ldr	r0, [pc, #168]	@ (80052f8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800524e:	f7ff f8be 	bl	80043ce <_PreparePacket>
 8005252:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	627b      	str	r3, [r7, #36]	@ 0x24
 800525c:	79fb      	ldrb	r3, [r7, #7]
 800525e:	623b      	str	r3, [r7, #32]
 8005260:	e00b      	b.n	800527a <SEGGER_SYSVIEW_SendModule+0x7e>
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	b2da      	uxtb	r2, r3
 8005266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005268:	1c59      	adds	r1, r3, #1
 800526a:	6279      	str	r1, [r7, #36]	@ 0x24
 800526c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005270:	b2d2      	uxtb	r2, r2
 8005272:	701a      	strb	r2, [r3, #0]
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	09db      	lsrs	r3, r3, #7
 8005278:	623b      	str	r3, [r7, #32]
 800527a:	6a3b      	ldr	r3, [r7, #32]
 800527c:	2b7f      	cmp	r3, #127	@ 0x7f
 800527e:	d8f0      	bhi.n	8005262 <SEGGER_SYSVIEW_SendModule+0x66>
 8005280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005282:	1c5a      	adds	r2, r3, #1
 8005284:	627a      	str	r2, [r7, #36]	@ 0x24
 8005286:	6a3a      	ldr	r2, [r7, #32]
 8005288:	b2d2      	uxtb	r2, r2
 800528a:	701a      	strb	r2, [r3, #0]
 800528c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	61fb      	str	r3, [r7, #28]
 8005294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	e00b      	b.n	80052b4 <SEGGER_SYSVIEW_SendModule+0xb8>
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	1c59      	adds	r1, r3, #1
 80052a4:	61f9      	str	r1, [r7, #28]
 80052a6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	701a      	strb	r2, [r3, #0]
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	09db      	lsrs	r3, r3, #7
 80052b2:	61bb      	str	r3, [r7, #24]
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80052b8:	d8f0      	bhi.n	800529c <SEGGER_SYSVIEW_SendModule+0xa0>
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	61fa      	str	r2, [r7, #28]
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	701a      	strb	r2, [r3, #0]
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80052ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2280      	movs	r2, #128	@ 0x80
 80052d0:	4619      	mov	r1, r3
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f7ff f82e 	bl	8004334 <_EncodeStr>
 80052d8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80052da:	2216      	movs	r2, #22
 80052dc:	68f9      	ldr	r1, [r7, #12]
 80052de:	6938      	ldr	r0, [r7, #16]
 80052e0:	f7ff f966 	bl	80045b0 <_SendPacket>
      RECORD_END();
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80052ea:	bf00      	nop
 80052ec:	3730      	adds	r7, #48	@ 0x30
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	20014344 	.word	0x20014344
 80052f8:	2001434c 	.word	0x2001434c

080052fc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005302:	4b0c      	ldr	r3, [pc, #48]	@ (8005334 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00f      	beq.n	800532a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800530a:	4b0a      	ldr	r3, [pc, #40]	@ (8005334 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1f2      	bne.n	8005310 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800532a:	bf00      	nop
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	20014344 	.word	0x20014344

08005338 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800533e:	f3ef 8311 	mrs	r3, BASEPRI
 8005342:	f04f 0120 	mov.w	r1, #32
 8005346:	f381 8811 	msr	BASEPRI, r1
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	4817      	ldr	r0, [pc, #92]	@ (80053ac <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800534e:	f7ff f83e 	bl	80043ce <_PreparePacket>
 8005352:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	4b14      	ldr	r3, [pc, #80]	@ (80053b0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	613b      	str	r3, [r7, #16]
 8005362:	e00b      	b.n	800537c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	b2da      	uxtb	r2, r3
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	1c59      	adds	r1, r3, #1
 800536c:	6179      	str	r1, [r7, #20]
 800536e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	701a      	strb	r2, [r3, #0]
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	09db      	lsrs	r3, r3, #7
 800537a:	613b      	str	r3, [r7, #16]
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005380:	d8f0      	bhi.n	8005364 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	617a      	str	r2, [r7, #20]
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	b2d2      	uxtb	r2, r2
 800538c:	701a      	strb	r2, [r3, #0]
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005392:	221b      	movs	r2, #27
 8005394:	6879      	ldr	r1, [r7, #4]
 8005396:	68b8      	ldr	r0, [r7, #8]
 8005398:	f7ff f90a 	bl	80045b0 <_SendPacket>
  RECORD_END();
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f383 8811 	msr	BASEPRI, r3
}
 80053a2:	bf00      	nop
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	2001434c 	.word	0x2001434c
 80053b0:	20014348 	.word	0x20014348

080053b4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08a      	sub	sp, #40	@ 0x28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80053bc:	f3ef 8311 	mrs	r3, BASEPRI
 80053c0:	f04f 0120 	mov.w	r1, #32
 80053c4:	f381 8811 	msr	BASEPRI, r1
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	4827      	ldr	r0, [pc, #156]	@ (8005468 <SEGGER_SYSVIEW_Warn+0xb4>)
 80053cc:	f7fe ffff 	bl	80043ce <_PreparePacket>
 80053d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80053d2:	2280      	movs	r2, #128	@ 0x80
 80053d4:	6879      	ldr	r1, [r7, #4]
 80053d6:	6938      	ldr	r0, [r7, #16]
 80053d8:	f7fe ffac 	bl	8004334 <_EncodeStr>
 80053dc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80053e2:	2301      	movs	r3, #1
 80053e4:	623b      	str	r3, [r7, #32]
 80053e6:	e00b      	b.n	8005400 <SEGGER_SYSVIEW_Warn+0x4c>
 80053e8:	6a3b      	ldr	r3, [r7, #32]
 80053ea:	b2da      	uxtb	r2, r3
 80053ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ee:	1c59      	adds	r1, r3, #1
 80053f0:	6279      	str	r1, [r7, #36]	@ 0x24
 80053f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	701a      	strb	r2, [r3, #0]
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	09db      	lsrs	r3, r3, #7
 80053fe:	623b      	str	r3, [r7, #32]
 8005400:	6a3b      	ldr	r3, [r7, #32]
 8005402:	2b7f      	cmp	r3, #127	@ 0x7f
 8005404:	d8f0      	bhi.n	80053e8 <SEGGER_SYSVIEW_Warn+0x34>
 8005406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	627a      	str	r2, [r7, #36]	@ 0x24
 800540c:	6a3a      	ldr	r2, [r7, #32]
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	701a      	strb	r2, [r3, #0]
 8005412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005414:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	61fb      	str	r3, [r7, #28]
 800541a:	2300      	movs	r3, #0
 800541c:	61bb      	str	r3, [r7, #24]
 800541e:	e00b      	b.n	8005438 <SEGGER_SYSVIEW_Warn+0x84>
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	b2da      	uxtb	r2, r3
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	1c59      	adds	r1, r3, #1
 8005428:	61f9      	str	r1, [r7, #28]
 800542a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	701a      	strb	r2, [r3, #0]
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	09db      	lsrs	r3, r3, #7
 8005436:	61bb      	str	r3, [r7, #24]
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	2b7f      	cmp	r3, #127	@ 0x7f
 800543c:	d8f0      	bhi.n	8005420 <SEGGER_SYSVIEW_Warn+0x6c>
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	61fa      	str	r2, [r7, #28]
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	b2d2      	uxtb	r2, r2
 8005448:	701a      	strb	r2, [r3, #0]
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800544e:	221a      	movs	r2, #26
 8005450:	68f9      	ldr	r1, [r7, #12]
 8005452:	6938      	ldr	r0, [r7, #16]
 8005454:	f7ff f8ac 	bl	80045b0 <_SendPacket>
  RECORD_END();
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f383 8811 	msr	BASEPRI, r3
}
 800545e:	bf00      	nop
 8005460:	3728      	adds	r7, #40	@ 0x28
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	2001434c 	.word	0x2001434c

0800546c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005470:	4b13      	ldr	r3, [pc, #76]	@ (80054c0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005472:	7e1b      	ldrb	r3, [r3, #24]
 8005474:	4619      	mov	r1, r3
 8005476:	4a13      	ldr	r2, [pc, #76]	@ (80054c4 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005478:	460b      	mov	r3, r1
 800547a:	005b      	lsls	r3, r3, #1
 800547c:	440b      	add	r3, r1
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	4413      	add	r3, r2
 8005482:	336c      	adds	r3, #108	@ 0x6c
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	4b0e      	ldr	r3, [pc, #56]	@ (80054c0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005488:	7e1b      	ldrb	r3, [r3, #24]
 800548a:	4618      	mov	r0, r3
 800548c:	490d      	ldr	r1, [pc, #52]	@ (80054c4 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800548e:	4603      	mov	r3, r0
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	4403      	add	r3, r0
 8005494:	00db      	lsls	r3, r3, #3
 8005496:	440b      	add	r3, r1
 8005498:	3370      	adds	r3, #112	@ 0x70
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	429a      	cmp	r2, r3
 800549e:	d00b      	beq.n	80054b8 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80054a0:	4b07      	ldr	r3, [pc, #28]	@ (80054c0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80054a2:	789b      	ldrb	r3, [r3, #2]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d107      	bne.n	80054b8 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80054a8:	4b05      	ldr	r3, [pc, #20]	@ (80054c0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80054aa:	2201      	movs	r2, #1
 80054ac:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80054ae:	f7fe ff9b 	bl	80043e8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80054b2:	4b03      	ldr	r3, [pc, #12]	@ (80054c0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80054b8:	4b01      	ldr	r3, [pc, #4]	@ (80054c0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	2001431c 	.word	0x2001431c
 80054c4:	20012e5c 	.word	0x20012e5c

080054c8 <memcmp>:
 80054c8:	b510      	push	{r4, lr}
 80054ca:	3901      	subs	r1, #1
 80054cc:	4402      	add	r2, r0
 80054ce:	4290      	cmp	r0, r2
 80054d0:	d101      	bne.n	80054d6 <memcmp+0xe>
 80054d2:	2000      	movs	r0, #0
 80054d4:	e005      	b.n	80054e2 <memcmp+0x1a>
 80054d6:	7803      	ldrb	r3, [r0, #0]
 80054d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80054dc:	42a3      	cmp	r3, r4
 80054de:	d001      	beq.n	80054e4 <memcmp+0x1c>
 80054e0:	1b18      	subs	r0, r3, r4
 80054e2:	bd10      	pop	{r4, pc}
 80054e4:	3001      	adds	r0, #1
 80054e6:	e7f2      	b.n	80054ce <memcmp+0x6>

080054e8 <memset>:
 80054e8:	4402      	add	r2, r0
 80054ea:	4603      	mov	r3, r0
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d100      	bne.n	80054f2 <memset+0xa>
 80054f0:	4770      	bx	lr
 80054f2:	f803 1b01 	strb.w	r1, [r3], #1
 80054f6:	e7f9      	b.n	80054ec <memset+0x4>

080054f8 <__libc_init_array>:
 80054f8:	b570      	push	{r4, r5, r6, lr}
 80054fa:	4d0d      	ldr	r5, [pc, #52]	@ (8005530 <__libc_init_array+0x38>)
 80054fc:	4c0d      	ldr	r4, [pc, #52]	@ (8005534 <__libc_init_array+0x3c>)
 80054fe:	1b64      	subs	r4, r4, r5
 8005500:	10a4      	asrs	r4, r4, #2
 8005502:	2600      	movs	r6, #0
 8005504:	42a6      	cmp	r6, r4
 8005506:	d109      	bne.n	800551c <__libc_init_array+0x24>
 8005508:	4d0b      	ldr	r5, [pc, #44]	@ (8005538 <__libc_init_array+0x40>)
 800550a:	4c0c      	ldr	r4, [pc, #48]	@ (800553c <__libc_init_array+0x44>)
 800550c:	f000 f826 	bl	800555c <_init>
 8005510:	1b64      	subs	r4, r4, r5
 8005512:	10a4      	asrs	r4, r4, #2
 8005514:	2600      	movs	r6, #0
 8005516:	42a6      	cmp	r6, r4
 8005518:	d105      	bne.n	8005526 <__libc_init_array+0x2e>
 800551a:	bd70      	pop	{r4, r5, r6, pc}
 800551c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005520:	4798      	blx	r3
 8005522:	3601      	adds	r6, #1
 8005524:	e7ee      	b.n	8005504 <__libc_init_array+0xc>
 8005526:	f855 3b04 	ldr.w	r3, [r5], #4
 800552a:	4798      	blx	r3
 800552c:	3601      	adds	r6, #1
 800552e:	e7f2      	b.n	8005516 <__libc_init_array+0x1e>
 8005530:	080056c0 	.word	0x080056c0
 8005534:	080056c0 	.word	0x080056c0
 8005538:	080056c0 	.word	0x080056c0
 800553c:	080056c4 	.word	0x080056c4

08005540 <memcpy>:
 8005540:	440a      	add	r2, r1
 8005542:	4291      	cmp	r1, r2
 8005544:	f100 33ff 	add.w	r3, r0, #4294967295
 8005548:	d100      	bne.n	800554c <memcpy+0xc>
 800554a:	4770      	bx	lr
 800554c:	b510      	push	{r4, lr}
 800554e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005552:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005556:	4291      	cmp	r1, r2
 8005558:	d1f9      	bne.n	800554e <memcpy+0xe>
 800555a:	bd10      	pop	{r4, pc}

0800555c <_init>:
 800555c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555e:	bf00      	nop
 8005560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005562:	bc08      	pop	{r3}
 8005564:	469e      	mov	lr, r3
 8005566:	4770      	bx	lr

08005568 <_fini>:
 8005568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800556a:	bf00      	nop
 800556c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556e:	bc08      	pop	{r3}
 8005570:	469e      	mov	lr, r3
 8005572:	4770      	bx	lr
