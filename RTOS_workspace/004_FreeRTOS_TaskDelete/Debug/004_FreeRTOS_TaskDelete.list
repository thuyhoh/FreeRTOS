
004_FreeRTOS_TaskDelete.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800538c  0800538c  0000638c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054a0  080054a0  0000701c  2**0
                  CONTENTS
  4 .ARM          00000008  080054a0  080054a0  000064a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054a8  080054a8  0000701c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054a8  080054a8  000064a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054ac  080054ac  000064ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080054b0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001440c  2000001c  080054cc  0000701c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014428  080054cc  00007428  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b39  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b2a  00000000  00000000  00017b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  0001a6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cea  00000000  00000000  0001b7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023190  00000000  00000000  0001c492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d62  00000000  00000000  0003f622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4403  00000000  00000000  00052384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126787  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004640  00000000  00000000  001267cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b3  00000000  00000000  0012ae0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005374 	.word	0x08005374

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08005374 	.word	0x08005374

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e54 	.word	0x20012e54

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b088      	sub	sp, #32
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fa5b 	bl	8000a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f855 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f8bd 	bl	80006e0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */


  //Enable the CYCCNT counter.
  DWT_CTRL |= ( 1 << 0);
 8000566:	4b23      	ldr	r3, [pc, #140]	@ (80005f4 <main+0xa0>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a22      	ldr	r2, [pc, #136]	@ (80005f4 <main+0xa0>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 8000572:	4821      	ldr	r0, [pc, #132]	@ (80005f8 <main+0xa4>)
 8000574:	f003 f96e 	bl	8003854 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000578:	f002 feda 	bl	8003330 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 800057c:	f004 f914 	bl	80047a8 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "Task-1", configMINIMAL_STACK_SIZE, NULL, 1, &task1_handle);
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	9301      	str	r3, [sp, #4]
 8000586:	2301      	movs	r3, #1
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2300      	movs	r3, #0
 800058c:	2282      	movs	r2, #130	@ 0x82
 800058e:	491b      	ldr	r1, [pc, #108]	@ (80005fc <main+0xa8>)
 8000590:	481b      	ldr	r0, [pc, #108]	@ (8000600 <main+0xac>)
 8000592:	f001 fcd4 	bl	8001f3e <xTaskCreate>
 8000596:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d00b      	beq.n	80005b6 <main+0x62>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800059e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005a2:	f383 8811 	msr	BASEPRI, r3
 80005a6:	f3bf 8f6f 	isb	sy
 80005aa:	f3bf 8f4f 	dsb	sy
 80005ae:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	e7fd      	b.n	80005b2 <main+0x5e>

  status = xTaskCreate(task2_handler, "Task-2", configMINIMAL_STACK_SIZE, NULL, 2, &task2_handle);
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	2302      	movs	r3, #2
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2300      	movs	r3, #0
 80005c0:	2282      	movs	r2, #130	@ 0x82
 80005c2:	4910      	ldr	r1, [pc, #64]	@ (8000604 <main+0xb0>)
 80005c4:	4810      	ldr	r0, [pc, #64]	@ (8000608 <main+0xb4>)
 80005c6:	f001 fcba 	bl	8001f3e <xTaskCreate>
 80005ca:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d00b      	beq.n	80005ea <main+0x96>
        __asm volatile
 80005d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005d6:	f383 8811 	msr	BASEPRI, r3
 80005da:	f3bf 8f6f 	isb	sy
 80005de:	f3bf 8f4f 	dsb	sy
 80005e2:	60fb      	str	r3, [r7, #12]
    }
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	e7fd      	b.n	80005e6 <main+0x92>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 80005ea:	f001 feb7 	bl	800235c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ee:	bf00      	nop
 80005f0:	e7fd      	b.n	80005ee <main+0x9a>
 80005f2:	bf00      	nop
 80005f4:	e0001000 	.word	0xe0001000
 80005f8:	0007a120 	.word	0x0007a120
 80005fc:	0800538c 	.word	0x0800538c
 8000600:	080007b5 	.word	0x080007b5
 8000604:	08005394 	.word	0x08005394
 8000608:	080007cd 	.word	0x080007cd

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	@ 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2230      	movs	r2, #48	@ 0x30
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f004 fe70 	bl	8005300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	4b28      	ldr	r3, [pc, #160]	@ (80006d8 <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	4a27      	ldr	r2, [pc, #156]	@ (80006d8 <SystemClock_Config+0xcc>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000640:	4b25      	ldr	r3, [pc, #148]	@ (80006d8 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b22      	ldr	r3, [pc, #136]	@ (80006dc <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a21      	ldr	r2, [pc, #132]	@ (80006dc <SystemClock_Config+0xd0>)
 8000656:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b1f      	ldr	r3, [pc, #124]	@ (80006dc <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000668:	2302      	movs	r3, #2
 800066a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000670:	2310      	movs	r3, #16
 8000672:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000678:	2300      	movs	r3, #0
 800067a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800067c:	2308      	movs	r3, #8
 800067e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000680:	23a8      	movs	r3, #168	@ 0xa8
 8000682:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000688:	2307      	movs	r3, #7
 800068a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	4618      	mov	r0, r3
 8000692:	f000 fcef 	bl	8001074 <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800069c:	f000 f8c0 	bl	8000820 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a4:	2302      	movs	r3, #2
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2105      	movs	r1, #5
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 ff46 	bl	8001550 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ca:	f000 f8a9 	bl	8000820 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	@ 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	4b2a      	ldr	r3, [pc, #168]	@ (80007a4 <MX_GPIO_Init+0xc4>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	4a29      	ldr	r2, [pc, #164]	@ (80007a4 <MX_GPIO_Init+0xc4>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000704:	6313      	str	r3, [r2, #48]	@ 0x30
 8000706:	4b27      	ldr	r3, [pc, #156]	@ (80007a4 <MX_GPIO_Init+0xc4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b23      	ldr	r3, [pc, #140]	@ (80007a4 <MX_GPIO_Init+0xc4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a22      	ldr	r2, [pc, #136]	@ (80007a4 <MX_GPIO_Init+0xc4>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
 8000722:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <MX_GPIO_Init+0xc4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	4b1c      	ldr	r3, [pc, #112]	@ (80007a4 <MX_GPIO_Init+0xc4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a1b      	ldr	r2, [pc, #108]	@ (80007a4 <MX_GPIO_Init+0xc4>)
 8000738:	f043 0308 	orr.w	r3, r3, #8
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b19      	ldr	r3, [pc, #100]	@ (80007a4 <MX_GPIO_Init+0xc4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0308 	and.w	r3, r3, #8
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000750:	4815      	ldr	r0, [pc, #84]	@ (80007a8 <MX_GPIO_Init+0xc8>)
 8000752:	f000 fc37 	bl	8000fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000756:	2301      	movs	r3, #1
 8000758:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800075a:	4b14      	ldr	r3, [pc, #80]	@ (80007ac <MX_GPIO_Init+0xcc>)
 800075c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	4619      	mov	r1, r3
 8000768:	4811      	ldr	r0, [pc, #68]	@ (80007b0 <MX_GPIO_Init+0xd0>)
 800076a:	f000 fa77 	bl	8000c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800076e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000772:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000774:	2301      	movs	r3, #1
 8000776:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	4619      	mov	r1, r3
 8000786:	4808      	ldr	r0, [pc, #32]	@ (80007a8 <MX_GPIO_Init+0xc8>)
 8000788:	f000 fa68 	bl	8000c5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800078c:	2200      	movs	r2, #0
 800078e:	2100      	movs	r1, #0
 8000790:	2006      	movs	r0, #6
 8000792:	f000 fa39 	bl	8000c08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000796:	2006      	movs	r0, #6
 8000798:	f000 fa52 	bl	8000c40 <HAL_NVIC_EnableIRQ>

}
 800079c:	bf00      	nop
 800079e:	3720      	adds	r7, #32
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020c00 	.word	0x40020c00
 80007ac:	10110000 	.word	0x10110000
 80007b0:	40020000 	.word	0x40020000

080007b4 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	// tongle led 1 1s
	// press btn -> task delete
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80007bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007c0:	4801      	ldr	r0, [pc, #4]	@ (80007c8 <task1_handler+0x14>)
 80007c2:	f000 fc18 	bl	8000ff6 <HAL_GPIO_TogglePin>
 80007c6:	e7f9      	b.n	80007bc <task1_handler+0x8>
 80007c8:	40020c00 	.word	0x40020c00

080007cc <task2_handler>:

}


static void task2_handler(void* parameters)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	// tongle led 2 200ms
	while(1)
	{
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1)
 80007d4:	2101      	movs	r1, #1
 80007d6:	4807      	ldr	r0, [pc, #28]	@ (80007f4 <task2_handler+0x28>)
 80007d8:	f000 fbdc 	bl	8000f94 <HAL_GPIO_ReadPin>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d102      	bne.n	80007e8 <task2_handler+0x1c>
		{
			vTaskDelete(NULL);
 80007e2:	2000      	movs	r0, #0
 80007e4:	f001 fd10 	bl	8002208 <vTaskDelete>
		}
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80007e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007ec:	4802      	ldr	r0, [pc, #8]	@ (80007f8 <task2_handler+0x2c>)
 80007ee:	f000 fc02 	bl	8000ff6 <HAL_GPIO_TogglePin>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1)
 80007f2:	e7ef      	b.n	80007d4 <task2_handler+0x8>
 80007f4:	40020000 	.word	0x40020000
 80007f8:	40020c00 	.word	0x40020c00

080007fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a04      	ldr	r2, [pc, #16]	@ (800081c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d101      	bne.n	8000812 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800080e:	f000 f923 	bl	8000a58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40001000 	.word	0x40001000

08000820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
	...

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b10      	ldr	r3, [pc, #64]	@ (800087c <HAL_MspInit+0x4c>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800083e:	4a0f      	ldr	r2, [pc, #60]	@ (800087c <HAL_MspInit+0x4c>)
 8000840:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000844:	6453      	str	r3, [r2, #68]	@ 0x44
 8000846:	4b0d      	ldr	r3, [pc, #52]	@ (800087c <HAL_MspInit+0x4c>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800084a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	4b09      	ldr	r3, [pc, #36]	@ (800087c <HAL_MspInit+0x4c>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085a:	4a08      	ldr	r2, [pc, #32]	@ (800087c <HAL_MspInit+0x4c>)
 800085c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000860:	6413      	str	r3, [r2, #64]	@ 0x40
 8000862:	4b06      	ldr	r3, [pc, #24]	@ (800087c <HAL_MspInit+0x4c>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 800086e:	f002 f99d 	bl	8002bac <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800

08000880 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08c      	sub	sp, #48	@ 0x30
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000890:	2200      	movs	r2, #0
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	2036      	movs	r0, #54	@ 0x36
 8000896:	f000 f9b7 	bl	8000c08 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800089a:	2036      	movs	r0, #54	@ 0x36
 800089c:	f000 f9d0 	bl	8000c40 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000924 <HAL_InitTick+0xa4>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a8:	4a1e      	ldr	r2, [pc, #120]	@ (8000924 <HAL_InitTick+0xa4>)
 80008aa:	f043 0310 	orr.w	r3, r3, #16
 80008ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <HAL_InitTick+0xa4>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b4:	f003 0310 	and.w	r3, r3, #16
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008bc:	f107 0210 	add.w	r2, r7, #16
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4611      	mov	r1, r2
 80008c6:	4618      	mov	r0, r3
 80008c8:	f001 f84e 	bl	8001968 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80008cc:	f001 f838 	bl	8001940 <HAL_RCC_GetPCLK1Freq>
 80008d0:	4603      	mov	r3, r0
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80008d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008d8:	4a13      	ldr	r2, [pc, #76]	@ (8000928 <HAL_InitTick+0xa8>)
 80008da:	fba2 2303 	umull	r2, r3, r2, r3
 80008de:	0c9b      	lsrs	r3, r3, #18
 80008e0:	3b01      	subs	r3, #1
 80008e2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008e4:	4b11      	ldr	r3, [pc, #68]	@ (800092c <HAL_InitTick+0xac>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	@ (8000930 <HAL_InitTick+0xb0>)
 80008e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80008ea:	4b10      	ldr	r3, [pc, #64]	@ (800092c <HAL_InitTick+0xac>)
 80008ec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008f0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008f2:	4a0e      	ldr	r2, [pc, #56]	@ (800092c <HAL_InitTick+0xac>)
 80008f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008f6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <HAL_InitTick+0xac>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <HAL_InitTick+0xac>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000904:	4809      	ldr	r0, [pc, #36]	@ (800092c <HAL_InitTick+0xac>)
 8000906:	f001 f861 	bl	80019cc <HAL_TIM_Base_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d104      	bne.n	800091a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000910:	4806      	ldr	r0, [pc, #24]	@ (800092c <HAL_InitTick+0xac>)
 8000912:	f001 f890 	bl	8001a36 <HAL_TIM_Base_Start_IT>
 8000916:	4603      	mov	r3, r0
 8000918:	e000      	b.n	800091c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
}
 800091c:	4618      	mov	r0, r3
 800091e:	3730      	adds	r7, #48	@ 0x30
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800
 8000928:	431bde83 	.word	0x431bde83
 800092c:	20000038 	.word	0x20000038
 8000930:	40001000 	.word	0x40001000

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000946:	bf00      	nop
 8000948:	e7fd      	b.n	8000946 <HardFault_Handler+0x4>

0800094a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800094e:	bf00      	nop
 8000950:	e7fd      	b.n	800094e <MemManage_Handler+0x4>

08000952 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000956:	bf00      	nop
 8000958:	e7fd      	b.n	8000956 <BusFault_Handler+0x4>

0800095a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800095e:	bf00      	nop
 8000960:	e7fd      	b.n	800095e <UsageFault_Handler+0x4>

08000962 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000974:	2001      	movs	r0, #1
 8000976:	f000 fb59 	bl	800102c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000984:	4802      	ldr	r0, [pc, #8]	@ (8000990 <TIM6_DAC_IRQHandler+0x10>)
 8000986:	f001 f87a 	bl	8001a7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000038 	.word	0x20000038

08000994 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000998:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <SystemInit+0x28>)
 800099a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800099e:	4a07      	ldr	r2, [pc, #28]	@ (80009bc <SystemInit+0x28>)
 80009a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009a8:	4b04      	ldr	r3, [pc, #16]	@ (80009bc <SystemInit+0x28>)
 80009aa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80009ae:	609a      	str	r2, [r3, #8]
#endif
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009c6:	e003      	b.n	80009d0 <LoopCopyDataInit>

080009c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009c8:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009ce:	3104      	adds	r1, #4

080009d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009d0:	480b      	ldr	r0, [pc, #44]	@ (8000a00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009d8:	d3f6      	bcc.n	80009c8 <CopyDataInit>
  ldr  r2, =_sbss
 80009da:	4a0b      	ldr	r2, [pc, #44]	@ (8000a08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009dc:	e002      	b.n	80009e4 <LoopFillZerobss>

080009de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80009de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009e0:	f842 3b04 	str.w	r3, [r2], #4

080009e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009e4:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80009e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80009e8:	d3f9      	bcc.n	80009de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009ea:	f7ff ffd3 	bl	8000994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ee:	f004 fc8f 	bl	8005310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009f2:	f7ff fdaf 	bl	8000554 <main>
  bx  lr    
 80009f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80009fc:	080054b0 	.word	0x080054b0
  ldr  r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a04:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8000a08:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8000a0c:	20014428 	.word	0x20014428

08000a10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a10:	e7fe      	b.n	8000a10 <ADC_IRQHandler>
	...

08000a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a18:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <HAL_Init+0x40>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a54 <HAL_Init+0x40>)
 8000a1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a24:	4b0b      	ldr	r3, [pc, #44]	@ (8000a54 <HAL_Init+0x40>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a0a      	ldr	r2, [pc, #40]	@ (8000a54 <HAL_Init+0x40>)
 8000a2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a30:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <HAL_Init+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a07      	ldr	r2, [pc, #28]	@ (8000a54 <HAL_Init+0x40>)
 8000a36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a3c:	2003      	movs	r0, #3
 8000a3e:	f000 f8d8 	bl	8000bf2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a42:	2000      	movs	r0, #0
 8000a44:	f7ff ff1c 	bl	8000880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a48:	f7ff fef2 	bl	8000830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40023c00 	.word	0x40023c00

08000a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <HAL_IncTick+0x20>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <HAL_IncTick+0x24>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	4a04      	ldr	r2, [pc, #16]	@ (8000a7c <HAL_IncTick+0x24>)
 8000a6a:	6013      	str	r3, [r2, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	20000078 	.word	0x20000078

08000a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return uwTick;
 8000a84:	4b03      	ldr	r3, [pc, #12]	@ (8000a94 <HAL_GetTick+0x14>)
 8000a86:	681b      	ldr	r3, [r3, #0]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	20000078 	.word	0x20000078

08000a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aca:	4a04      	ldr	r2, [pc, #16]	@ (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	60d3      	str	r3, [r2, #12]
}
 8000ad0:	bf00      	nop
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae4:	4b04      	ldr	r3, [pc, #16]	@ (8000af8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	f003 0307 	and.w	r3, r3, #7
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	db0b      	blt.n	8000b26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	f003 021f 	and.w	r2, r3, #31
 8000b14:	4907      	ldr	r1, [pc, #28]	@ (8000b34 <__NVIC_EnableIRQ+0x38>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	095b      	lsrs	r3, r3, #5
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000e100 	.word	0xe000e100

08000b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	db0a      	blt.n	8000b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	490c      	ldr	r1, [pc, #48]	@ (8000b84 <__NVIC_SetPriority+0x4c>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	0112      	lsls	r2, r2, #4
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b60:	e00a      	b.n	8000b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4908      	ldr	r1, [pc, #32]	@ (8000b88 <__NVIC_SetPriority+0x50>)
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	f003 030f 	and.w	r3, r3, #15
 8000b6e:	3b04      	subs	r3, #4
 8000b70:	0112      	lsls	r2, r2, #4
 8000b72:	b2d2      	uxtb	r2, r2
 8000b74:	440b      	add	r3, r1
 8000b76:	761a      	strb	r2, [r3, #24]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000e100 	.word	0xe000e100
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b089      	sub	sp, #36	@ 0x24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	f1c3 0307 	rsb	r3, r3, #7
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	bf28      	it	cs
 8000baa:	2304      	movcs	r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	2b06      	cmp	r3, #6
 8000bb4:	d902      	bls.n	8000bbc <NVIC_EncodePriority+0x30>
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3b03      	subs	r3, #3
 8000bba:	e000      	b.n	8000bbe <NVIC_EncodePriority+0x32>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43da      	mvns	r2, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	401a      	ands	r2, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa01 f303 	lsl.w	r3, r1, r3
 8000bde:	43d9      	mvns	r1, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be4:	4313      	orrs	r3, r2
         );
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3724      	adds	r7, #36	@ 0x24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ff4c 	bl	8000a98 <__NVIC_SetPriorityGrouping>
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
 8000c14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c1a:	f7ff ff61 	bl	8000ae0 <__NVIC_GetPriorityGrouping>
 8000c1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	68b9      	ldr	r1, [r7, #8]
 8000c24:	6978      	ldr	r0, [r7, #20]
 8000c26:	f7ff ffb1 	bl	8000b8c <NVIC_EncodePriority>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c30:	4611      	mov	r1, r2
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff ff80 	bl	8000b38 <__NVIC_SetPriority>
}
 8000c38:	bf00      	nop
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff ff54 	bl	8000afc <__NVIC_EnableIRQ>
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b089      	sub	sp, #36	@ 0x24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
 8000c76:	e16b      	b.n	8000f50 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c78:	2201      	movs	r2, #1
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	697a      	ldr	r2, [r7, #20]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	f040 815a 	bne.w	8000f4a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d00b      	beq.n	8000cb6 <HAL_GPIO_Init+0x5a>
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d007      	beq.n	8000cb6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000caa:	2b11      	cmp	r3, #17
 8000cac:	d003      	beq.n	8000cb6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	2b12      	cmp	r3, #18
 8000cb4:	d130      	bne.n	8000d18 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	68da      	ldr	r2, [r3, #12]
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cec:	2201      	movs	r2, #1
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	091b      	lsrs	r3, r3, #4
 8000d02:	f003 0201 	and.w	r2, r3, #1
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	2203      	movs	r2, #3
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	689a      	ldr	r2, [r3, #8]
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d003      	beq.n	8000d58 <HAL_GPIO_Init+0xfc>
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	2b12      	cmp	r3, #18
 8000d56:	d123      	bne.n	8000da0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	08da      	lsrs	r2, r3, #3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3208      	adds	r2, #8
 8000d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	f003 0307 	and.w	r3, r3, #7
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	220f      	movs	r2, #15
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	691a      	ldr	r2, [r3, #16]
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	08da      	lsrs	r2, r3, #3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	3208      	adds	r2, #8
 8000d9a:	69b9      	ldr	r1, [r7, #24]
 8000d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	2203      	movs	r2, #3
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0203 	and.w	r2, r3, #3
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	f000 80b4 	beq.w	8000f4a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	4b60      	ldr	r3, [pc, #384]	@ (8000f68 <HAL_GPIO_Init+0x30c>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dea:	4a5f      	ldr	r2, [pc, #380]	@ (8000f68 <HAL_GPIO_Init+0x30c>)
 8000dec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000df0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000df2:	4b5d      	ldr	r3, [pc, #372]	@ (8000f68 <HAL_GPIO_Init+0x30c>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dfe:	4a5b      	ldr	r2, [pc, #364]	@ (8000f6c <HAL_GPIO_Init+0x310>)
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	089b      	lsrs	r3, r3, #2
 8000e04:	3302      	adds	r3, #2
 8000e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f003 0303 	and.w	r3, r3, #3
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	220f      	movs	r2, #15
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a52      	ldr	r2, [pc, #328]	@ (8000f70 <HAL_GPIO_Init+0x314>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d02b      	beq.n	8000e82 <HAL_GPIO_Init+0x226>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a51      	ldr	r2, [pc, #324]	@ (8000f74 <HAL_GPIO_Init+0x318>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d025      	beq.n	8000e7e <HAL_GPIO_Init+0x222>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a50      	ldr	r2, [pc, #320]	@ (8000f78 <HAL_GPIO_Init+0x31c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d01f      	beq.n	8000e7a <HAL_GPIO_Init+0x21e>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a4f      	ldr	r2, [pc, #316]	@ (8000f7c <HAL_GPIO_Init+0x320>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d019      	beq.n	8000e76 <HAL_GPIO_Init+0x21a>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a4e      	ldr	r2, [pc, #312]	@ (8000f80 <HAL_GPIO_Init+0x324>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d013      	beq.n	8000e72 <HAL_GPIO_Init+0x216>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a4d      	ldr	r2, [pc, #308]	@ (8000f84 <HAL_GPIO_Init+0x328>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d00d      	beq.n	8000e6e <HAL_GPIO_Init+0x212>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a4c      	ldr	r2, [pc, #304]	@ (8000f88 <HAL_GPIO_Init+0x32c>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d007      	beq.n	8000e6a <HAL_GPIO_Init+0x20e>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a4b      	ldr	r2, [pc, #300]	@ (8000f8c <HAL_GPIO_Init+0x330>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d101      	bne.n	8000e66 <HAL_GPIO_Init+0x20a>
 8000e62:	2307      	movs	r3, #7
 8000e64:	e00e      	b.n	8000e84 <HAL_GPIO_Init+0x228>
 8000e66:	2308      	movs	r3, #8
 8000e68:	e00c      	b.n	8000e84 <HAL_GPIO_Init+0x228>
 8000e6a:	2306      	movs	r3, #6
 8000e6c:	e00a      	b.n	8000e84 <HAL_GPIO_Init+0x228>
 8000e6e:	2305      	movs	r3, #5
 8000e70:	e008      	b.n	8000e84 <HAL_GPIO_Init+0x228>
 8000e72:	2304      	movs	r3, #4
 8000e74:	e006      	b.n	8000e84 <HAL_GPIO_Init+0x228>
 8000e76:	2303      	movs	r3, #3
 8000e78:	e004      	b.n	8000e84 <HAL_GPIO_Init+0x228>
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	e002      	b.n	8000e84 <HAL_GPIO_Init+0x228>
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e000      	b.n	8000e84 <HAL_GPIO_Init+0x228>
 8000e82:	2300      	movs	r3, #0
 8000e84:	69fa      	ldr	r2, [r7, #28]
 8000e86:	f002 0203 	and.w	r2, r2, #3
 8000e8a:	0092      	lsls	r2, r2, #2
 8000e8c:	4093      	lsls	r3, r2
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e94:	4935      	ldr	r1, [pc, #212]	@ (8000f6c <HAL_GPIO_Init+0x310>)
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	089b      	lsrs	r3, r3, #2
 8000e9a:	3302      	adds	r3, #2
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ea2:	4b3b      	ldr	r3, [pc, #236]	@ (8000f90 <HAL_GPIO_Init+0x334>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ec6:	4a32      	ldr	r2, [pc, #200]	@ (8000f90 <HAL_GPIO_Init+0x334>)
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ecc:	4b30      	ldr	r3, [pc, #192]	@ (8000f90 <HAL_GPIO_Init+0x334>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ef0:	4a27      	ldr	r2, [pc, #156]	@ (8000f90 <HAL_GPIO_Init+0x334>)
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ef6:	4b26      	ldr	r3, [pc, #152]	@ (8000f90 <HAL_GPIO_Init+0x334>)
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	43db      	mvns	r3, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4013      	ands	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f1a:	4a1d      	ldr	r2, [pc, #116]	@ (8000f90 <HAL_GPIO_Init+0x334>)
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f20:	4b1b      	ldr	r3, [pc, #108]	@ (8000f90 <HAL_GPIO_Init+0x334>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f44:	4a12      	ldr	r2, [pc, #72]	@ (8000f90 <HAL_GPIO_Init+0x334>)
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	61fb      	str	r3, [r7, #28]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	2b0f      	cmp	r3, #15
 8000f54:	f67f ae90 	bls.w	8000c78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f58:	bf00      	nop
 8000f5a:	bf00      	nop
 8000f5c:	3724      	adds	r7, #36	@ 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40013800 	.word	0x40013800
 8000f70:	40020000 	.word	0x40020000
 8000f74:	40020400 	.word	0x40020400
 8000f78:	40020800 	.word	0x40020800
 8000f7c:	40020c00 	.word	0x40020c00
 8000f80:	40021000 	.word	0x40021000
 8000f84:	40021400 	.word	0x40021400
 8000f88:	40021800 	.word	0x40021800
 8000f8c:	40021c00 	.word	0x40021c00
 8000f90:	40013c00 	.word	0x40013c00

08000f94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	691a      	ldr	r2, [r3, #16]
 8000fa4:	887b      	ldrh	r3, [r7, #2]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d002      	beq.n	8000fb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fac:	2301      	movs	r3, #1
 8000fae:	73fb      	strb	r3, [r7, #15]
 8000fb0:	e001      	b.n	8000fb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	807b      	strh	r3, [r7, #2]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fd4:	787b      	ldrb	r3, [r7, #1]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fda:	887a      	ldrh	r2, [r7, #2]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fe0:	e003      	b.n	8000fea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fe2:	887b      	ldrh	r3, [r7, #2]
 8000fe4:	041a      	lsls	r2, r3, #16
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	619a      	str	r2, [r3, #24]
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	460b      	mov	r3, r1
 8001000:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	695a      	ldr	r2, [r3, #20]
 8001006:	887b      	ldrh	r3, [r7, #2]
 8001008:	401a      	ands	r2, r3
 800100a:	887b      	ldrh	r3, [r7, #2]
 800100c:	429a      	cmp	r2, r3
 800100e:	d104      	bne.n	800101a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001010:	887b      	ldrh	r3, [r7, #2]
 8001012:	041a      	lsls	r2, r3, #16
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001018:	e002      	b.n	8001020 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800101a:	887a      	ldrh	r2, [r7, #2]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	619a      	str	r2, [r3, #24]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001036:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001038:	695a      	ldr	r2, [r3, #20]
 800103a:	88fb      	ldrh	r3, [r7, #6]
 800103c:	4013      	ands	r3, r2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d006      	beq.n	8001050 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001042:	4a05      	ldr	r2, [pc, #20]	@ (8001058 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001048:	88fb      	ldrh	r3, [r7, #6]
 800104a:	4618      	mov	r0, r3
 800104c:	f000 f806 	bl	800105c <HAL_GPIO_EXTI_Callback>
  }
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40013c00 	.word	0x40013c00

0800105c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e25e      	b.n	8001544 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	2b00      	cmp	r3, #0
 8001090:	d075      	beq.n	800117e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001092:	4b88      	ldr	r3, [pc, #544]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 030c 	and.w	r3, r3, #12
 800109a:	2b04      	cmp	r3, #4
 800109c:	d00c      	beq.n	80010b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800109e:	4b85      	ldr	r3, [pc, #532]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010a6:	2b08      	cmp	r3, #8
 80010a8:	d112      	bne.n	80010d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010aa:	4b82      	ldr	r3, [pc, #520]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010b6:	d10b      	bne.n	80010d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b8:	4b7e      	ldr	r3, [pc, #504]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d05b      	beq.n	800117c <HAL_RCC_OscConfig+0x108>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d157      	bne.n	800117c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e239      	b.n	8001544 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010d8:	d106      	bne.n	80010e8 <HAL_RCC_OscConfig+0x74>
 80010da:	4b76      	ldr	r3, [pc, #472]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a75      	ldr	r2, [pc, #468]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 80010e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	e01d      	b.n	8001124 <HAL_RCC_OscConfig+0xb0>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010f0:	d10c      	bne.n	800110c <HAL_RCC_OscConfig+0x98>
 80010f2:	4b70      	ldr	r3, [pc, #448]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a6f      	ldr	r2, [pc, #444]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 80010f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	4b6d      	ldr	r3, [pc, #436]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a6c      	ldr	r2, [pc, #432]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 8001104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	e00b      	b.n	8001124 <HAL_RCC_OscConfig+0xb0>
 800110c:	4b69      	ldr	r3, [pc, #420]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a68      	ldr	r2, [pc, #416]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 8001112:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001116:	6013      	str	r3, [r2, #0]
 8001118:	4b66      	ldr	r3, [pc, #408]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a65      	ldr	r2, [pc, #404]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 800111e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001122:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d013      	beq.n	8001154 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112c:	f7ff fca8 	bl	8000a80 <HAL_GetTick>
 8001130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001134:	f7ff fca4 	bl	8000a80 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b64      	cmp	r3, #100	@ 0x64
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e1fe      	b.n	8001544 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001146:	4b5b      	ldr	r3, [pc, #364]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0f0      	beq.n	8001134 <HAL_RCC_OscConfig+0xc0>
 8001152:	e014      	b.n	800117e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001154:	f7ff fc94 	bl	8000a80 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800115c:	f7ff fc90 	bl	8000a80 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b64      	cmp	r3, #100	@ 0x64
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e1ea      	b.n	8001544 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116e:	4b51      	ldr	r3, [pc, #324]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1f0      	bne.n	800115c <HAL_RCC_OscConfig+0xe8>
 800117a:	e000      	b.n	800117e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800117c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d063      	beq.n	8001252 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800118a:	4b4a      	ldr	r3, [pc, #296]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f003 030c 	and.w	r3, r3, #12
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00b      	beq.n	80011ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001196:	4b47      	ldr	r3, [pc, #284]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800119e:	2b08      	cmp	r3, #8
 80011a0:	d11c      	bne.n	80011dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011a2:	4b44      	ldr	r3, [pc, #272]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d116      	bne.n	80011dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ae:	4b41      	ldr	r3, [pc, #260]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d005      	beq.n	80011c6 <HAL_RCC_OscConfig+0x152>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d001      	beq.n	80011c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e1be      	b.n	8001544 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c6:	4b3b      	ldr	r3, [pc, #236]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	4937      	ldr	r1, [pc, #220]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011da:	e03a      	b.n	8001252 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d020      	beq.n	8001226 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e4:	4b34      	ldr	r3, [pc, #208]	@ (80012b8 <HAL_RCC_OscConfig+0x244>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ea:	f7ff fc49 	bl	8000a80 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f2:	f7ff fc45 	bl	8000a80 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e19f      	b.n	8001544 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001204:	4b2b      	ldr	r3, [pc, #172]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0f0      	beq.n	80011f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001210:	4b28      	ldr	r3, [pc, #160]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	691b      	ldr	r3, [r3, #16]
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	4925      	ldr	r1, [pc, #148]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 8001220:	4313      	orrs	r3, r2
 8001222:	600b      	str	r3, [r1, #0]
 8001224:	e015      	b.n	8001252 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001226:	4b24      	ldr	r3, [pc, #144]	@ (80012b8 <HAL_RCC_OscConfig+0x244>)
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800122c:	f7ff fc28 	bl	8000a80 <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001234:	f7ff fc24 	bl	8000a80 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e17e      	b.n	8001544 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001246:	4b1b      	ldr	r3, [pc, #108]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f0      	bne.n	8001234 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	2b00      	cmp	r3, #0
 800125c:	d036      	beq.n	80012cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d016      	beq.n	8001294 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001266:	4b15      	ldr	r3, [pc, #84]	@ (80012bc <HAL_RCC_OscConfig+0x248>)
 8001268:	2201      	movs	r2, #1
 800126a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800126c:	f7ff fc08 	bl	8000a80 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001274:	f7ff fc04 	bl	8000a80 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e15e      	b.n	8001544 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001286:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <HAL_RCC_OscConfig+0x240>)
 8001288:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0f0      	beq.n	8001274 <HAL_RCC_OscConfig+0x200>
 8001292:	e01b      	b.n	80012cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001294:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <HAL_RCC_OscConfig+0x248>)
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129a:	f7ff fbf1 	bl	8000a80 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a0:	e00e      	b.n	80012c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012a2:	f7ff fbed 	bl	8000a80 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d907      	bls.n	80012c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e147      	b.n	8001544 <HAL_RCC_OscConfig+0x4d0>
 80012b4:	40023800 	.word	0x40023800
 80012b8:	42470000 	.word	0x42470000
 80012bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c0:	4b88      	ldr	r3, [pc, #544]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 80012c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1ea      	bne.n	80012a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f000 8097 	beq.w	8001408 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012de:	4b81      	ldr	r3, [pc, #516]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10f      	bne.n	800130a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	4b7d      	ldr	r3, [pc, #500]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	4a7c      	ldr	r2, [pc, #496]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 80012f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012fa:	4b7a      	ldr	r3, [pc, #488]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001306:	2301      	movs	r3, #1
 8001308:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130a:	4b77      	ldr	r3, [pc, #476]	@ (80014e8 <HAL_RCC_OscConfig+0x474>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001312:	2b00      	cmp	r3, #0
 8001314:	d118      	bne.n	8001348 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001316:	4b74      	ldr	r3, [pc, #464]	@ (80014e8 <HAL_RCC_OscConfig+0x474>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a73      	ldr	r2, [pc, #460]	@ (80014e8 <HAL_RCC_OscConfig+0x474>)
 800131c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001322:	f7ff fbad 	bl	8000a80 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800132a:	f7ff fba9 	bl	8000a80 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e103      	b.n	8001544 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133c:	4b6a      	ldr	r3, [pc, #424]	@ (80014e8 <HAL_RCC_OscConfig+0x474>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0f0      	beq.n	800132a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d106      	bne.n	800135e <HAL_RCC_OscConfig+0x2ea>
 8001350:	4b64      	ldr	r3, [pc, #400]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 8001352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001354:	4a63      	ldr	r2, [pc, #396]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	6713      	str	r3, [r2, #112]	@ 0x70
 800135c:	e01c      	b.n	8001398 <HAL_RCC_OscConfig+0x324>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2b05      	cmp	r3, #5
 8001364:	d10c      	bne.n	8001380 <HAL_RCC_OscConfig+0x30c>
 8001366:	4b5f      	ldr	r3, [pc, #380]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 8001368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800136a:	4a5e      	ldr	r2, [pc, #376]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	6713      	str	r3, [r2, #112]	@ 0x70
 8001372:	4b5c      	ldr	r3, [pc, #368]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 8001374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001376:	4a5b      	ldr	r2, [pc, #364]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6713      	str	r3, [r2, #112]	@ 0x70
 800137e:	e00b      	b.n	8001398 <HAL_RCC_OscConfig+0x324>
 8001380:	4b58      	ldr	r3, [pc, #352]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 8001382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001384:	4a57      	ldr	r2, [pc, #348]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 8001386:	f023 0301 	bic.w	r3, r3, #1
 800138a:	6713      	str	r3, [r2, #112]	@ 0x70
 800138c:	4b55      	ldr	r3, [pc, #340]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 800138e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001390:	4a54      	ldr	r2, [pc, #336]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 8001392:	f023 0304 	bic.w	r3, r3, #4
 8001396:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d015      	beq.n	80013cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a0:	f7ff fb6e 	bl	8000a80 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a6:	e00a      	b.n	80013be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013a8:	f7ff fb6a 	bl	8000a80 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e0c2      	b.n	8001544 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013be:	4b49      	ldr	r3, [pc, #292]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 80013c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0ee      	beq.n	80013a8 <HAL_RCC_OscConfig+0x334>
 80013ca:	e014      	b.n	80013f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013cc:	f7ff fb58 	bl	8000a80 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d2:	e00a      	b.n	80013ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013d4:	f7ff fb54 	bl	8000a80 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e0ac      	b.n	8001544 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ea:	4b3e      	ldr	r3, [pc, #248]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 80013ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1ee      	bne.n	80013d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013f6:	7dfb      	ldrb	r3, [r7, #23]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d105      	bne.n	8001408 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013fc:	4b39      	ldr	r3, [pc, #228]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001400:	4a38      	ldr	r2, [pc, #224]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 8001402:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001406:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 8098 	beq.w	8001542 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001412:	4b34      	ldr	r3, [pc, #208]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 030c 	and.w	r3, r3, #12
 800141a:	2b08      	cmp	r3, #8
 800141c:	d05c      	beq.n	80014d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	2b02      	cmp	r3, #2
 8001424:	d141      	bne.n	80014aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001426:	4b31      	ldr	r3, [pc, #196]	@ (80014ec <HAL_RCC_OscConfig+0x478>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff fb28 	bl	8000a80 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001434:	f7ff fb24 	bl	8000a80 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e07e      	b.n	8001544 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001446:	4b27      	ldr	r3, [pc, #156]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69da      	ldr	r2, [r3, #28]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a1b      	ldr	r3, [r3, #32]
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001460:	019b      	lsls	r3, r3, #6
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001468:	085b      	lsrs	r3, r3, #1
 800146a:	3b01      	subs	r3, #1
 800146c:	041b      	lsls	r3, r3, #16
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001474:	061b      	lsls	r3, r3, #24
 8001476:	491b      	ldr	r1, [pc, #108]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 8001478:	4313      	orrs	r3, r2
 800147a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800147c:	4b1b      	ldr	r3, [pc, #108]	@ (80014ec <HAL_RCC_OscConfig+0x478>)
 800147e:	2201      	movs	r2, #1
 8001480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001482:	f7ff fafd 	bl	8000a80 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800148a:	f7ff faf9 	bl	8000a80 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e053      	b.n	8001544 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800149c:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0f0      	beq.n	800148a <HAL_RCC_OscConfig+0x416>
 80014a8:	e04b      	b.n	8001542 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014aa:	4b10      	ldr	r3, [pc, #64]	@ (80014ec <HAL_RCC_OscConfig+0x478>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fae6 	bl	8000a80 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b8:	f7ff fae2 	bl	8000a80 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e03c      	b.n	8001544 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ca:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <HAL_RCC_OscConfig+0x470>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x444>
 80014d6:	e034      	b.n	8001542 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d107      	bne.n	80014f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e02f      	b.n	8001544 <HAL_RCC_OscConfig+0x4d0>
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40007000 	.word	0x40007000
 80014ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014f0:	4b16      	ldr	r3, [pc, #88]	@ (800154c <HAL_RCC_OscConfig+0x4d8>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	429a      	cmp	r2, r3
 8001502:	d11c      	bne.n	800153e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800150e:	429a      	cmp	r2, r3
 8001510:	d115      	bne.n	800153e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001518:	4013      	ands	r3, r2
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800151e:	4293      	cmp	r3, r2
 8001520:	d10d      	bne.n	800153e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800152c:	429a      	cmp	r2, r3
 800152e:	d106      	bne.n	800153e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800153a:	429a      	cmp	r2, r3
 800153c:	d001      	beq.n	8001542 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40023800 	.word	0x40023800

08001550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e0cc      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001564:	4b68      	ldr	r3, [pc, #416]	@ (8001708 <HAL_RCC_ClockConfig+0x1b8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 030f 	and.w	r3, r3, #15
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	429a      	cmp	r2, r3
 8001570:	d90c      	bls.n	800158c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001572:	4b65      	ldr	r3, [pc, #404]	@ (8001708 <HAL_RCC_ClockConfig+0x1b8>)
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800157a:	4b63      	ldr	r3, [pc, #396]	@ (8001708 <HAL_RCC_ClockConfig+0x1b8>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	429a      	cmp	r2, r3
 8001586:	d001      	beq.n	800158c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e0b8      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d020      	beq.n	80015da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d005      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015a4:	4b59      	ldr	r3, [pc, #356]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	4a58      	ldr	r2, [pc, #352]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0308 	and.w	r3, r3, #8
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015bc:	4b53      	ldr	r3, [pc, #332]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	4a52      	ldr	r2, [pc, #328]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c8:	4b50      	ldr	r3, [pc, #320]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	494d      	ldr	r1, [pc, #308]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d044      	beq.n	8001670 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d107      	bne.n	80015fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ee:	4b47      	ldr	r3, [pc, #284]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d119      	bne.n	800162e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e07f      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d003      	beq.n	800160e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800160a:	2b03      	cmp	r3, #3
 800160c:	d107      	bne.n	800161e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160e:	4b3f      	ldr	r3, [pc, #252]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d109      	bne.n	800162e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e06f      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161e:	4b3b      	ldr	r3, [pc, #236]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e067      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800162e:	4b37      	ldr	r3, [pc, #220]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f023 0203 	bic.w	r2, r3, #3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	4934      	ldr	r1, [pc, #208]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 800163c:	4313      	orrs	r3, r2
 800163e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001640:	f7ff fa1e 	bl	8000a80 <HAL_GetTick>
 8001644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001646:	e00a      	b.n	800165e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001648:	f7ff fa1a 	bl	8000a80 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001656:	4293      	cmp	r3, r2
 8001658:	d901      	bls.n	800165e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e04f      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165e:	4b2b      	ldr	r3, [pc, #172]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 020c 	and.w	r2, r3, #12
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	429a      	cmp	r2, r3
 800166e:	d1eb      	bne.n	8001648 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001670:	4b25      	ldr	r3, [pc, #148]	@ (8001708 <HAL_RCC_ClockConfig+0x1b8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 030f 	and.w	r3, r3, #15
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d20c      	bcs.n	8001698 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167e:	4b22      	ldr	r3, [pc, #136]	@ (8001708 <HAL_RCC_ClockConfig+0x1b8>)
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001686:	4b20      	ldr	r3, [pc, #128]	@ (8001708 <HAL_RCC_ClockConfig+0x1b8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d001      	beq.n	8001698 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e032      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d008      	beq.n	80016b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a4:	4b19      	ldr	r3, [pc, #100]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	4916      	ldr	r1, [pc, #88]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d009      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016c2:	4b12      	ldr	r3, [pc, #72]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	490e      	ldr	r1, [pc, #56]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016d6:	f000 f821 	bl	800171c <HAL_RCC_GetSysClockFreq>
 80016da:	4602      	mov	r2, r0
 80016dc:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	091b      	lsrs	r3, r3, #4
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	490a      	ldr	r1, [pc, #40]	@ (8001710 <HAL_RCC_ClockConfig+0x1c0>)
 80016e8:	5ccb      	ldrb	r3, [r1, r3]
 80016ea:	fa22 f303 	lsr.w	r3, r2, r3
 80016ee:	4a09      	ldr	r2, [pc, #36]	@ (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80016f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016f2:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <HAL_RCC_ClockConfig+0x1c8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff f8c2 	bl	8000880 <HAL_InitTick>

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023c00 	.word	0x40023c00
 800170c:	40023800 	.word	0x40023800
 8001710:	08005470 	.word	0x08005470
 8001714:	20000000 	.word	0x20000000
 8001718:	20000004 	.word	0x20000004

0800171c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800171c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001720:	b094      	sub	sp, #80	@ 0x50
 8001722:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	647b      	str	r3, [r7, #68]	@ 0x44
 8001728:	2300      	movs	r3, #0
 800172a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800172c:	2300      	movs	r3, #0
 800172e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001730:	2300      	movs	r3, #0
 8001732:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001734:	4b79      	ldr	r3, [pc, #484]	@ (800191c <HAL_RCC_GetSysClockFreq+0x200>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 030c 	and.w	r3, r3, #12
 800173c:	2b08      	cmp	r3, #8
 800173e:	d00d      	beq.n	800175c <HAL_RCC_GetSysClockFreq+0x40>
 8001740:	2b08      	cmp	r3, #8
 8001742:	f200 80e1 	bhi.w	8001908 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001746:	2b00      	cmp	r3, #0
 8001748:	d002      	beq.n	8001750 <HAL_RCC_GetSysClockFreq+0x34>
 800174a:	2b04      	cmp	r3, #4
 800174c:	d003      	beq.n	8001756 <HAL_RCC_GetSysClockFreq+0x3a>
 800174e:	e0db      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001750:	4b73      	ldr	r3, [pc, #460]	@ (8001920 <HAL_RCC_GetSysClockFreq+0x204>)
 8001752:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001754:	e0db      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001756:	4b73      	ldr	r3, [pc, #460]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x208>)
 8001758:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800175a:	e0d8      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800175c:	4b6f      	ldr	r3, [pc, #444]	@ (800191c <HAL_RCC_GetSysClockFreq+0x200>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001764:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001766:	4b6d      	ldr	r3, [pc, #436]	@ (800191c <HAL_RCC_GetSysClockFreq+0x200>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d063      	beq.n	800183a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001772:	4b6a      	ldr	r3, [pc, #424]	@ (800191c <HAL_RCC_GetSysClockFreq+0x200>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	099b      	lsrs	r3, r3, #6
 8001778:	2200      	movs	r2, #0
 800177a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800177c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800177e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001784:	633b      	str	r3, [r7, #48]	@ 0x30
 8001786:	2300      	movs	r3, #0
 8001788:	637b      	str	r3, [r7, #52]	@ 0x34
 800178a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800178e:	4622      	mov	r2, r4
 8001790:	462b      	mov	r3, r5
 8001792:	f04f 0000 	mov.w	r0, #0
 8001796:	f04f 0100 	mov.w	r1, #0
 800179a:	0159      	lsls	r1, r3, #5
 800179c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017a0:	0150      	lsls	r0, r2, #5
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4621      	mov	r1, r4
 80017a8:	1a51      	subs	r1, r2, r1
 80017aa:	6139      	str	r1, [r7, #16]
 80017ac:	4629      	mov	r1, r5
 80017ae:	eb63 0301 	sbc.w	r3, r3, r1
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017c0:	4659      	mov	r1, fp
 80017c2:	018b      	lsls	r3, r1, #6
 80017c4:	4651      	mov	r1, sl
 80017c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ca:	4651      	mov	r1, sl
 80017cc:	018a      	lsls	r2, r1, #6
 80017ce:	4651      	mov	r1, sl
 80017d0:	ebb2 0801 	subs.w	r8, r2, r1
 80017d4:	4659      	mov	r1, fp
 80017d6:	eb63 0901 	sbc.w	r9, r3, r1
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017ee:	4690      	mov	r8, r2
 80017f0:	4699      	mov	r9, r3
 80017f2:	4623      	mov	r3, r4
 80017f4:	eb18 0303 	adds.w	r3, r8, r3
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	462b      	mov	r3, r5
 80017fc:	eb49 0303 	adc.w	r3, r9, r3
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800180e:	4629      	mov	r1, r5
 8001810:	024b      	lsls	r3, r1, #9
 8001812:	4621      	mov	r1, r4
 8001814:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001818:	4621      	mov	r1, r4
 800181a:	024a      	lsls	r2, r1, #9
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001822:	2200      	movs	r2, #0
 8001824:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001826:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001828:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800182c:	f7fe fd1a 	bl	8000264 <__aeabi_uldivmod>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4613      	mov	r3, r2
 8001836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001838:	e058      	b.n	80018ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800183a:	4b38      	ldr	r3, [pc, #224]	@ (800191c <HAL_RCC_GetSysClockFreq+0x200>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	099b      	lsrs	r3, r3, #6
 8001840:	2200      	movs	r2, #0
 8001842:	4618      	mov	r0, r3
 8001844:	4611      	mov	r1, r2
 8001846:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800184a:	623b      	str	r3, [r7, #32]
 800184c:	2300      	movs	r3, #0
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001850:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001854:	4642      	mov	r2, r8
 8001856:	464b      	mov	r3, r9
 8001858:	f04f 0000 	mov.w	r0, #0
 800185c:	f04f 0100 	mov.w	r1, #0
 8001860:	0159      	lsls	r1, r3, #5
 8001862:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001866:	0150      	lsls	r0, r2, #5
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4641      	mov	r1, r8
 800186e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001872:	4649      	mov	r1, r9
 8001874:	eb63 0b01 	sbc.w	fp, r3, r1
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	f04f 0300 	mov.w	r3, #0
 8001880:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001884:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001888:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800188c:	ebb2 040a 	subs.w	r4, r2, sl
 8001890:	eb63 050b 	sbc.w	r5, r3, fp
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	00eb      	lsls	r3, r5, #3
 800189e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018a2:	00e2      	lsls	r2, r4, #3
 80018a4:	4614      	mov	r4, r2
 80018a6:	461d      	mov	r5, r3
 80018a8:	4643      	mov	r3, r8
 80018aa:	18e3      	adds	r3, r4, r3
 80018ac:	603b      	str	r3, [r7, #0]
 80018ae:	464b      	mov	r3, r9
 80018b0:	eb45 0303 	adc.w	r3, r5, r3
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	f04f 0300 	mov.w	r3, #0
 80018be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018c2:	4629      	mov	r1, r5
 80018c4:	028b      	lsls	r3, r1, #10
 80018c6:	4621      	mov	r1, r4
 80018c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018cc:	4621      	mov	r1, r4
 80018ce:	028a      	lsls	r2, r1, #10
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018d6:	2200      	movs	r2, #0
 80018d8:	61bb      	str	r3, [r7, #24]
 80018da:	61fa      	str	r2, [r7, #28]
 80018dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018e0:	f7fe fcc0 	bl	8000264 <__aeabi_uldivmod>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4613      	mov	r3, r2
 80018ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018ec:	4b0b      	ldr	r3, [pc, #44]	@ (800191c <HAL_RCC_GetSysClockFreq+0x200>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	0c1b      	lsrs	r3, r3, #16
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	3301      	adds	r3, #1
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80018fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80018fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001900:	fbb2 f3f3 	udiv	r3, r2, r3
 8001904:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001906:	e002      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001908:	4b05      	ldr	r3, [pc, #20]	@ (8001920 <HAL_RCC_GetSysClockFreq+0x204>)
 800190a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800190c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800190e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001910:	4618      	mov	r0, r3
 8001912:	3750      	adds	r7, #80	@ 0x50
 8001914:	46bd      	mov	sp, r7
 8001916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800
 8001920:	00f42400 	.word	0x00f42400
 8001924:	007a1200 	.word	0x007a1200

08001928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800192c:	4b03      	ldr	r3, [pc, #12]	@ (800193c <HAL_RCC_GetHCLKFreq+0x14>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000000 	.word	0x20000000

08001940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001944:	f7ff fff0 	bl	8001928 <HAL_RCC_GetHCLKFreq>
 8001948:	4602      	mov	r2, r0
 800194a:	4b05      	ldr	r3, [pc, #20]	@ (8001960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	0a9b      	lsrs	r3, r3, #10
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	4903      	ldr	r1, [pc, #12]	@ (8001964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001956:	5ccb      	ldrb	r3, [r1, r3]
 8001958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800195c:	4618      	mov	r0, r3
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40023800 	.word	0x40023800
 8001964:	08005480 	.word	0x08005480

08001968 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	220f      	movs	r2, #15
 8001976:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001978:	4b12      	ldr	r3, [pc, #72]	@ (80019c4 <HAL_RCC_GetClockConfig+0x5c>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 0203 	and.w	r2, r3, #3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001984:	4b0f      	ldr	r3, [pc, #60]	@ (80019c4 <HAL_RCC_GetClockConfig+0x5c>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001990:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <HAL_RCC_GetClockConfig+0x5c>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800199c:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <HAL_RCC_GetClockConfig+0x5c>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	08db      	lsrs	r3, r3, #3
 80019a2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019aa:	4b07      	ldr	r3, [pc, #28]	@ (80019c8 <HAL_RCC_GetClockConfig+0x60>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 020f 	and.w	r2, r3, #15
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	601a      	str	r2, [r3, #0]
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40023c00 	.word	0x40023c00

080019cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e01d      	b.n	8001a1a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d106      	bne.n	80019f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f815 	bl	8001a22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2202      	movs	r2, #2
 80019fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3304      	adds	r3, #4
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	f000 f968 	bl	8001ce0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b085      	sub	sp, #20
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f042 0201 	orr.w	r2, r2, #1
 8001a4c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2b06      	cmp	r3, #6
 8001a5e:	d007      	beq.n	8001a70 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0201 	orr.w	r2, r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d122      	bne.n	8001ada <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d11b      	bne.n	8001ada <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f06f 0202 	mvn.w	r2, #2
 8001aaa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 f8ee 	bl	8001ca2 <HAL_TIM_IC_CaptureCallback>
 8001ac6:	e005      	b.n	8001ad4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f8e0 	bl	8001c8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f8f1 	bl	8001cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d122      	bne.n	8001b2e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d11b      	bne.n	8001b2e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f06f 0204 	mvn.w	r2, #4
 8001afe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2202      	movs	r2, #2
 8001b04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d003      	beq.n	8001b1c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f8c4 	bl	8001ca2 <HAL_TIM_IC_CaptureCallback>
 8001b1a:	e005      	b.n	8001b28 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f8b6 	bl	8001c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f8c7 	bl	8001cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d122      	bne.n	8001b82 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b08      	cmp	r3, #8
 8001b48:	d11b      	bne.n	8001b82 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f06f 0208 	mvn.w	r2, #8
 8001b52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2204      	movs	r2, #4
 8001b58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f89a 	bl	8001ca2 <HAL_TIM_IC_CaptureCallback>
 8001b6e:	e005      	b.n	8001b7c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 f88c 	bl	8001c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f89d 	bl	8001cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	f003 0310 	and.w	r3, r3, #16
 8001b8c:	2b10      	cmp	r3, #16
 8001b8e:	d122      	bne.n	8001bd6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	f003 0310 	and.w	r3, r3, #16
 8001b9a:	2b10      	cmp	r3, #16
 8001b9c:	d11b      	bne.n	8001bd6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f06f 0210 	mvn.w	r2, #16
 8001ba6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2208      	movs	r2, #8
 8001bac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f870 	bl	8001ca2 <HAL_TIM_IC_CaptureCallback>
 8001bc2:	e005      	b.n	8001bd0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 f862 	bl	8001c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f873 	bl	8001cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d10e      	bne.n	8001c02 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d107      	bne.n	8001c02 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f06f 0201 	mvn.w	r2, #1
 8001bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7fe fdfd 	bl	80007fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c0c:	2b80      	cmp	r3, #128	@ 0x80
 8001c0e:	d10e      	bne.n	8001c2e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c1a:	2b80      	cmp	r3, #128	@ 0x80
 8001c1c:	d107      	bne.n	8001c2e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f903 	bl	8001e34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c38:	2b40      	cmp	r3, #64	@ 0x40
 8001c3a:	d10e      	bne.n	8001c5a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c46:	2b40      	cmp	r3, #64	@ 0x40
 8001c48:	d107      	bne.n	8001c5a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001c52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f838 	bl	8001cca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	f003 0320 	and.w	r3, r3, #32
 8001c64:	2b20      	cmp	r3, #32
 8001c66:	d10e      	bne.n	8001c86 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	f003 0320 	and.w	r3, r3, #32
 8001c72:	2b20      	cmp	r3, #32
 8001c74:	d107      	bne.n	8001c86 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f06f 0220 	mvn.w	r2, #32
 8001c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f8cd 	bl	8001e20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a40      	ldr	r2, [pc, #256]	@ (8001df4 <TIM_Base_SetConfig+0x114>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d013      	beq.n	8001d20 <TIM_Base_SetConfig+0x40>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cfe:	d00f      	beq.n	8001d20 <TIM_Base_SetConfig+0x40>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a3d      	ldr	r2, [pc, #244]	@ (8001df8 <TIM_Base_SetConfig+0x118>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d00b      	beq.n	8001d20 <TIM_Base_SetConfig+0x40>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a3c      	ldr	r2, [pc, #240]	@ (8001dfc <TIM_Base_SetConfig+0x11c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d007      	beq.n	8001d20 <TIM_Base_SetConfig+0x40>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a3b      	ldr	r2, [pc, #236]	@ (8001e00 <TIM_Base_SetConfig+0x120>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d003      	beq.n	8001d20 <TIM_Base_SetConfig+0x40>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a3a      	ldr	r2, [pc, #232]	@ (8001e04 <TIM_Base_SetConfig+0x124>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d108      	bne.n	8001d32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a2f      	ldr	r2, [pc, #188]	@ (8001df4 <TIM_Base_SetConfig+0x114>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d02b      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d40:	d027      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a2c      	ldr	r2, [pc, #176]	@ (8001df8 <TIM_Base_SetConfig+0x118>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d023      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a2b      	ldr	r2, [pc, #172]	@ (8001dfc <TIM_Base_SetConfig+0x11c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d01f      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a2a      	ldr	r2, [pc, #168]	@ (8001e00 <TIM_Base_SetConfig+0x120>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d01b      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a29      	ldr	r2, [pc, #164]	@ (8001e04 <TIM_Base_SetConfig+0x124>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d017      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a28      	ldr	r2, [pc, #160]	@ (8001e08 <TIM_Base_SetConfig+0x128>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d013      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a27      	ldr	r2, [pc, #156]	@ (8001e0c <TIM_Base_SetConfig+0x12c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d00f      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a26      	ldr	r2, [pc, #152]	@ (8001e10 <TIM_Base_SetConfig+0x130>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d00b      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a25      	ldr	r2, [pc, #148]	@ (8001e14 <TIM_Base_SetConfig+0x134>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d007      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a24      	ldr	r2, [pc, #144]	@ (8001e18 <TIM_Base_SetConfig+0x138>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d003      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a23      	ldr	r2, [pc, #140]	@ (8001e1c <TIM_Base_SetConfig+0x13c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d108      	bne.n	8001da4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a0a      	ldr	r2, [pc, #40]	@ (8001df4 <TIM_Base_SetConfig+0x114>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d003      	beq.n	8001dd8 <TIM_Base_SetConfig+0xf8>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8001e04 <TIM_Base_SetConfig+0x124>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d103      	bne.n	8001de0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	615a      	str	r2, [r3, #20]
}
 8001de6:	bf00      	nop
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40010000 	.word	0x40010000
 8001df8:	40000400 	.word	0x40000400
 8001dfc:	40000800 	.word	0x40000800
 8001e00:	40000c00 	.word	0x40000c00
 8001e04:	40010400 	.word	0x40010400
 8001e08:	40014000 	.word	0x40014000
 8001e0c:	40014400 	.word	0x40014400
 8001e10:	40014800 	.word	0x40014800
 8001e14:	40001800 	.word	0x40001800
 8001e18:	40001c00 	.word	0x40001c00
 8001e1c:	40002000 	.word	0x40002000

08001e20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f103 0208 	add.w	r2, r3, #8
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e60:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f103 0208 	add.w	r2, r3, #8
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f103 0208 	add.w	r2, r3, #8
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b085      	sub	sp, #20
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	601a      	str	r2, [r3, #0]
}
 8001ede:	bf00      	nop
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001eea:	b480      	push	{r7}
 8001eec:	b085      	sub	sp, #20
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6892      	ldr	r2, [r2, #8]
 8001f00:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6852      	ldr	r2, [r2, #4]
 8001f0a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d103      	bne.n	8001f1e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	1e5a      	subs	r2, r3, #1
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b08c      	sub	sp, #48	@ 0x30
 8001f42:	af04      	add	r7, sp, #16
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001f4e:	88fb      	ldrh	r3, [r7, #6]
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 ffdc 	bl	8002f10 <pvPortMalloc>
 8001f58:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00e      	beq.n	8001f7e <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001f60:	2058      	movs	r0, #88	@ 0x58
 8001f62:	f000 ffd5 	bl	8002f10 <pvPortMalloc>
 8001f66:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f74:	e005      	b.n	8001f82 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001f76:	6978      	ldr	r0, [r7, #20]
 8001f78:	f001 f8ac 	bl	80030d4 <vPortFree>
 8001f7c:	e001      	b.n	8001f82 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d013      	beq.n	8001fb0 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001f88:	88fa      	ldrh	r2, [r7, #6]
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	9303      	str	r3, [sp, #12]
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	9302      	str	r3, [sp, #8]
 8001f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f94:	9301      	str	r3, [sp, #4]
 8001f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68b9      	ldr	r1, [r7, #8]
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 f80e 	bl	8001fc0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001fa4:	69f8      	ldr	r0, [r7, #28]
 8001fa6:	f000 f8a3 	bl	80020f0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001faa:	2301      	movs	r3, #1
 8001fac:	61bb      	str	r3, [r7, #24]
 8001fae:	e002      	b.n	8001fb6 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001fb6:	69bb      	ldr	r3, [r7, #24]
    }
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3720      	adds	r7, #32
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b088      	sub	sp, #32
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fd0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	21a5      	movs	r1, #165	@ 0xa5
 8001fda:	f003 f991 	bl	8005300 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fe0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	f023 0307 	bic.w	r3, r3, #7
 8001ff6:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00b      	beq.n	800201a <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002006:	f383 8811 	msr	BASEPRI, r3
 800200a:	f3bf 8f6f 	isb	sy
 800200e:	f3bf 8f4f 	dsb	sy
 8002012:	617b      	str	r3, [r7, #20]
    }
 8002014:	bf00      	nop
 8002016:	bf00      	nop
 8002018:	e7fd      	b.n	8002016 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d01f      	beq.n	8002060 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002020:	2300      	movs	r3, #0
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	e012      	b.n	800204c <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	4413      	add	r3, r2
 800202c:	7819      	ldrb	r1, [r3, #0]
 800202e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	4413      	add	r3, r2
 8002034:	3334      	adds	r3, #52	@ 0x34
 8002036:	460a      	mov	r2, r1
 8002038:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	4413      	add	r3, r2
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d006      	beq.n	8002054 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3301      	adds	r3, #1
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	2b09      	cmp	r3, #9
 8002050:	d9e9      	bls.n	8002026 <prvInitialiseNewTask+0x66>
 8002052:	e000      	b.n	8002056 <prvInitialiseNewTask+0x96>
            {
                break;
 8002054:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002058:	2200      	movs	r2, #0
 800205a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800205e:	e003      	b.n	8002068 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800206a:	2b04      	cmp	r3, #4
 800206c:	d901      	bls.n	8002072 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800206e:	2304      	movs	r3, #4
 8002070:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002074:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002076:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800207a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800207c:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800207e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002080:	2200      	movs	r2, #0
 8002082:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002086:	3304      	adds	r3, #4
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff fefd 	bl	8001e88 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800208e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002090:	3318      	adds	r3, #24
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fef8 	bl	8001e88 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800209a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800209c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800209e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020a0:	f1c3 0205 	rsb	r2, r3, #5
 80020a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020a6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80020a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80020ac:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80020ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020b0:	3350      	adds	r3, #80	@ 0x50
 80020b2:	2204      	movs	r2, #4
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f003 f922 	bl	8005300 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80020bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020be:	3354      	adds	r3, #84	@ 0x54
 80020c0:	2201      	movs	r2, #1
 80020c2:	2100      	movs	r1, #0
 80020c4:	4618      	mov	r0, r3
 80020c6:	f003 f91b 	bl	8005300 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	68f9      	ldr	r1, [r7, #12]
 80020ce:	69b8      	ldr	r0, [r7, #24]
 80020d0:	f000 fc3c 	bl	800294c <pxPortInitialiseStack>
 80020d4:	4602      	mov	r2, r0
 80020d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020d8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80020da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d002      	beq.n	80020e6 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80020e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80020e4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80020e6:	bf00      	nop
 80020e8:	3720      	adds	r7, #32
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80020f0:	b5b0      	push	{r4, r5, r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af02      	add	r7, sp, #8
 80020f6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80020f8:	f000 fdd8 	bl	8002cac <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80020fc:	4b3b      	ldr	r3, [pc, #236]	@ (80021ec <prvAddNewTaskToReadyList+0xfc>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	3301      	adds	r3, #1
 8002102:	4a3a      	ldr	r2, [pc, #232]	@ (80021ec <prvAddNewTaskToReadyList+0xfc>)
 8002104:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002106:	4b3a      	ldr	r3, [pc, #232]	@ (80021f0 <prvAddNewTaskToReadyList+0x100>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d109      	bne.n	8002122 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800210e:	4a38      	ldr	r2, [pc, #224]	@ (80021f0 <prvAddNewTaskToReadyList+0x100>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002114:	4b35      	ldr	r3, [pc, #212]	@ (80021ec <prvAddNewTaskToReadyList+0xfc>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d110      	bne.n	800213e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800211c:	f000 fb7c 	bl	8002818 <prvInitialiseTaskLists>
 8002120:	e00d      	b.n	800213e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002122:	4b34      	ldr	r3, [pc, #208]	@ (80021f4 <prvAddNewTaskToReadyList+0x104>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800212a:	4b31      	ldr	r3, [pc, #196]	@ (80021f0 <prvAddNewTaskToReadyList+0x100>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002134:	429a      	cmp	r2, r3
 8002136:	d802      	bhi.n	800213e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002138:	4a2d      	ldr	r2, [pc, #180]	@ (80021f0 <prvAddNewTaskToReadyList+0x100>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800213e:	4b2e      	ldr	r3, [pc, #184]	@ (80021f8 <prvAddNewTaskToReadyList+0x108>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	3301      	adds	r3, #1
 8002144:	4a2c      	ldr	r2, [pc, #176]	@ (80021f8 <prvAddNewTaskToReadyList+0x108>)
 8002146:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002148:	4b2b      	ldr	r3, [pc, #172]	@ (80021f8 <prvAddNewTaskToReadyList+0x108>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d016      	beq.n	8002184 <prvAddNewTaskToReadyList+0x94>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4618      	mov	r0, r3
 800215a:	f002 fe85 	bl	8004e68 <SEGGER_SYSVIEW_OnTaskCreate>
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	461d      	mov	r5, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	461c      	mov	r4, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	1ae3      	subs	r3, r4, r3
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	462b      	mov	r3, r5
 8002180:	f001 f978 	bl	8003474 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4618      	mov	r0, r3
 8002188:	f002 fef2 	bl	8004f70 <SEGGER_SYSVIEW_OnTaskStartReady>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002190:	2201      	movs	r2, #1
 8002192:	409a      	lsls	r2, r3
 8002194:	4b19      	ldr	r3, [pc, #100]	@ (80021fc <prvAddNewTaskToReadyList+0x10c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4313      	orrs	r3, r2
 800219a:	4a18      	ldr	r2, [pc, #96]	@ (80021fc <prvAddNewTaskToReadyList+0x10c>)
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4a15      	ldr	r2, [pc, #84]	@ (8002200 <prvAddNewTaskToReadyList+0x110>)
 80021ac:	441a      	add	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3304      	adds	r3, #4
 80021b2:	4619      	mov	r1, r3
 80021b4:	4610      	mov	r0, r2
 80021b6:	f7ff fe74 	bl	8001ea2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80021ba:	f000 fda9 	bl	8002d10 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80021be:	4b0d      	ldr	r3, [pc, #52]	@ (80021f4 <prvAddNewTaskToReadyList+0x104>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00e      	beq.n	80021e4 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80021c6:	4b0a      	ldr	r3, [pc, #40]	@ (80021f0 <prvAddNewTaskToReadyList+0x100>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d207      	bcs.n	80021e4 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80021d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002204 <prvAddNewTaskToReadyList+0x114>)
 80021d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	f3bf 8f4f 	dsb	sy
 80021e0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bdb0      	pop	{r4, r5, r7, pc}
 80021ec:	20000154 	.word	0x20000154
 80021f0:	2000007c 	.word	0x2000007c
 80021f4:	20000160 	.word	0x20000160
 80021f8:	20000170 	.word	0x20000170
 80021fc:	2000015c 	.word	0x2000015c
 8002200:	20000080 	.word	0x20000080
 8002204:	e000ed04 	.word	0xe000ed04

08002208 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002210:	f000 fd4c 	bl	8002cac <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d102      	bne.n	8002220 <vTaskDelete+0x18>
 800221a:	4b46      	ldr	r3, [pc, #280]	@ (8002334 <vTaskDelete+0x12c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	e000      	b.n	8002222 <vTaskDelete+0x1a>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	3304      	adds	r3, #4
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fe5e 	bl	8001eea <uxListRemove>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d115      	bne.n	8002260 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002238:	493f      	ldr	r1, [pc, #252]	@ (8002338 <vTaskDelete+0x130>)
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10a      	bne.n	8002260 <vTaskDelete+0x58>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224e:	2201      	movs	r2, #1
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43da      	mvns	r2, r3
 8002256:	4b39      	ldr	r3, [pc, #228]	@ (800233c <vTaskDelete+0x134>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4013      	ands	r3, r2
 800225c:	4a37      	ldr	r2, [pc, #220]	@ (800233c <vTaskDelete+0x134>)
 800225e:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002264:	2b00      	cmp	r3, #0
 8002266:	d004      	beq.n	8002272 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	3318      	adds	r3, #24
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff fe3c 	bl	8001eea <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002272:	4b33      	ldr	r3, [pc, #204]	@ (8002340 <vTaskDelete+0x138>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	3301      	adds	r3, #1
 8002278:	4a31      	ldr	r2, [pc, #196]	@ (8002340 <vTaskDelete+0x138>)
 800227a:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 800227c:	4b2d      	ldr	r3, [pc, #180]	@ (8002334 <vTaskDelete+0x12c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	429a      	cmp	r2, r3
 8002284:	d118      	bne.n	80022b8 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	3304      	adds	r3, #4
 800228a:	4619      	mov	r1, r3
 800228c:	482d      	ldr	r0, [pc, #180]	@ (8002344 <vTaskDelete+0x13c>)
 800228e:	f7ff fe08 	bl	8001ea2 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002292:	4b2d      	ldr	r3, [pc, #180]	@ (8002348 <vTaskDelete+0x140>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	3301      	adds	r3, #1
 8002298:	4a2b      	ldr	r2, [pc, #172]	@ (8002348 <vTaskDelete+0x140>)
 800229a:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4618      	mov	r0, r3
 80022a0:	f002 fea8 	bl	8004ff4 <SEGGER_SYSVIEW_ShrinkId>
 80022a4:	4603      	mov	r3, r0
 80022a6:	4619      	mov	r1, r3
 80022a8:	2022      	movs	r0, #34	@ 0x22
 80022aa:	f002 f9e7 	bl	800467c <SEGGER_SYSVIEW_RecordU32>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f001 f947 	bl	8003544 <SYSVIEW_DeleteTask>
 80022b6:	e016      	b.n	80022e6 <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80022b8:	4b24      	ldr	r3, [pc, #144]	@ (800234c <vTaskDelete+0x144>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	3b01      	subs	r3, #1
 80022be:	4a23      	ldr	r2, [pc, #140]	@ (800234c <vTaskDelete+0x144>)
 80022c0:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f002 fe95 	bl	8004ff4 <SEGGER_SYSVIEW_ShrinkId>
 80022ca:	4603      	mov	r3, r0
 80022cc:	4619      	mov	r1, r3
 80022ce:	2022      	movs	r0, #34	@ 0x22
 80022d0:	f002 f9d4 	bl	800467c <SEGGER_SYSVIEW_RecordU32>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f001 f934 	bl	8003544 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 fb09 	bl	80028f4 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80022e2:	f000 fb17 	bl	8002914 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 80022e6:	f000 fd13 	bl	8002d10 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 80022ea:	4b19      	ldr	r3, [pc, #100]	@ (8002350 <vTaskDelete+0x148>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d01c      	beq.n	800232c <vTaskDelete+0x124>
        {
            if( pxTCB == pxCurrentTCB )
 80022f2:	4b10      	ldr	r3, [pc, #64]	@ (8002334 <vTaskDelete+0x12c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d117      	bne.n	800232c <vTaskDelete+0x124>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 80022fc:	4b15      	ldr	r3, [pc, #84]	@ (8002354 <vTaskDelete+0x14c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00b      	beq.n	800231c <vTaskDelete+0x114>
        __asm volatile
 8002304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002308:	f383 8811 	msr	BASEPRI, r3
 800230c:	f3bf 8f6f 	isb	sy
 8002310:	f3bf 8f4f 	dsb	sy
 8002314:	60bb      	str	r3, [r7, #8]
    }
 8002316:	bf00      	nop
 8002318:	bf00      	nop
 800231a:	e7fd      	b.n	8002318 <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 800231c:	4b0e      	ldr	r3, [pc, #56]	@ (8002358 <vTaskDelete+0x150>)
 800231e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	f3bf 8f4f 	dsb	sy
 8002328:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800232c:	bf00      	nop
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	2000007c 	.word	0x2000007c
 8002338:	20000080 	.word	0x20000080
 800233c:	2000015c 	.word	0x2000015c
 8002340:	20000170 	.word	0x20000170
 8002344:	20000128 	.word	0x20000128
 8002348:	2000013c 	.word	0x2000013c
 800234c:	20000154 	.word	0x20000154
 8002350:	20000160 	.word	0x20000160
 8002354:	2000017c 	.word	0x2000017c
 8002358:	e000ed04 	.word	0xe000ed04

0800235c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002362:	4b24      	ldr	r3, [pc, #144]	@ (80023f4 <vTaskStartScheduler+0x98>)
 8002364:	9301      	str	r3, [sp, #4]
 8002366:	2300      	movs	r3, #0
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	2300      	movs	r3, #0
 800236c:	2282      	movs	r2, #130	@ 0x82
 800236e:	4922      	ldr	r1, [pc, #136]	@ (80023f8 <vTaskStartScheduler+0x9c>)
 8002370:	4822      	ldr	r0, [pc, #136]	@ (80023fc <vTaskStartScheduler+0xa0>)
 8002372:	f7ff fde4 	bl	8001f3e <xTaskCreate>
 8002376:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d124      	bne.n	80023c8 <vTaskStartScheduler+0x6c>
        __asm volatile
 800237e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002382:	f383 8811 	msr	BASEPRI, r3
 8002386:	f3bf 8f6f 	isb	sy
 800238a:	f3bf 8f4f 	dsb	sy
 800238e:	60bb      	str	r3, [r7, #8]
    }
 8002390:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002392:	4b1b      	ldr	r3, [pc, #108]	@ (8002400 <vTaskStartScheduler+0xa4>)
 8002394:	f04f 32ff 	mov.w	r2, #4294967295
 8002398:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800239a:	4b1a      	ldr	r3, [pc, #104]	@ (8002404 <vTaskStartScheduler+0xa8>)
 800239c:	2201      	movs	r2, #1
 800239e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80023a0:	4b19      	ldr	r3, [pc, #100]	@ (8002408 <vTaskStartScheduler+0xac>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80023a6:	4b19      	ldr	r3, [pc, #100]	@ (800240c <vTaskStartScheduler+0xb0>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	4b12      	ldr	r3, [pc, #72]	@ (80023f4 <vTaskStartScheduler+0x98>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d102      	bne.n	80023b8 <vTaskStartScheduler+0x5c>
 80023b2:	f002 fd3d 	bl	8004e30 <SEGGER_SYSVIEW_OnIdle>
 80023b6:	e004      	b.n	80023c2 <vTaskStartScheduler+0x66>
 80023b8:	4b14      	ldr	r3, [pc, #80]	@ (800240c <vTaskStartScheduler+0xb0>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f002 fd95 	bl	8004eec <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80023c2:	f000 fb4f 	bl	8002a64 <xPortStartScheduler>
 80023c6:	e00f      	b.n	80023e8 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ce:	d10b      	bne.n	80023e8 <vTaskStartScheduler+0x8c>
        __asm volatile
 80023d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023d4:	f383 8811 	msr	BASEPRI, r3
 80023d8:	f3bf 8f6f 	isb	sy
 80023dc:	f3bf 8f4f 	dsb	sy
 80023e0:	607b      	str	r3, [r7, #4]
    }
 80023e2:	bf00      	nop
 80023e4:	bf00      	nop
 80023e6:	e7fd      	b.n	80023e4 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80023e8:	4b09      	ldr	r3, [pc, #36]	@ (8002410 <vTaskStartScheduler+0xb4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
}
 80023ec:	bf00      	nop
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20000178 	.word	0x20000178
 80023f8:	0800539c 	.word	0x0800539c
 80023fc:	080027e9 	.word	0x080027e9
 8002400:	20000174 	.word	0x20000174
 8002404:	20000160 	.word	0x20000160
 8002408:	20000158 	.word	0x20000158
 800240c:	2000007c 	.word	0x2000007c
 8002410:	2000000c 	.word	0x2000000c

08002414 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002418:	4b04      	ldr	r3, [pc, #16]	@ (800242c <vTaskSuspendAll+0x18>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	3301      	adds	r3, #1
 800241e:	4a03      	ldr	r2, [pc, #12]	@ (800242c <vTaskSuspendAll+0x18>)
 8002420:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002422:	bf00      	nop
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	2000017c 	.word	0x2000017c

08002430 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800243a:	2300      	movs	r3, #0
 800243c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800243e:	4b44      	ldr	r3, [pc, #272]	@ (8002550 <xTaskResumeAll+0x120>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10b      	bne.n	800245e <xTaskResumeAll+0x2e>
        __asm volatile
 8002446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800244a:	f383 8811 	msr	BASEPRI, r3
 800244e:	f3bf 8f6f 	isb	sy
 8002452:	f3bf 8f4f 	dsb	sy
 8002456:	603b      	str	r3, [r7, #0]
    }
 8002458:	bf00      	nop
 800245a:	bf00      	nop
 800245c:	e7fd      	b.n	800245a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800245e:	f000 fc25 	bl	8002cac <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002462:	4b3b      	ldr	r3, [pc, #236]	@ (8002550 <xTaskResumeAll+0x120>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	3b01      	subs	r3, #1
 8002468:	4a39      	ldr	r2, [pc, #228]	@ (8002550 <xTaskResumeAll+0x120>)
 800246a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800246c:	4b38      	ldr	r3, [pc, #224]	@ (8002550 <xTaskResumeAll+0x120>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d165      	bne.n	8002540 <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002474:	4b37      	ldr	r3, [pc, #220]	@ (8002554 <xTaskResumeAll+0x124>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d061      	beq.n	8002540 <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800247c:	e032      	b.n	80024e4 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800247e:	4b36      	ldr	r3, [pc, #216]	@ (8002558 <xTaskResumeAll+0x128>)
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	3318      	adds	r3, #24
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fd2d 	bl	8001eea <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	3304      	adds	r3, #4
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fd28 	bl	8001eea <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4618      	mov	r0, r3
 800249e:	f002 fd67 	bl	8004f70 <SEGGER_SYSVIEW_OnTaskStartReady>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a6:	2201      	movs	r2, #1
 80024a8:	409a      	lsls	r2, r3
 80024aa:	4b2c      	ldr	r3, [pc, #176]	@ (800255c <xTaskResumeAll+0x12c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	4a2a      	ldr	r2, [pc, #168]	@ (800255c <xTaskResumeAll+0x12c>)
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4a27      	ldr	r2, [pc, #156]	@ (8002560 <xTaskResumeAll+0x130>)
 80024c2:	441a      	add	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	3304      	adds	r3, #4
 80024c8:	4619      	mov	r1, r3
 80024ca:	4610      	mov	r0, r2
 80024cc:	f7ff fce9 	bl	8001ea2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024d4:	4b23      	ldr	r3, [pc, #140]	@ (8002564 <xTaskResumeAll+0x134>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024da:	429a      	cmp	r2, r3
 80024dc:	d302      	bcc.n	80024e4 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 80024de:	4b22      	ldr	r3, [pc, #136]	@ (8002568 <xTaskResumeAll+0x138>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80024e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002558 <xTaskResumeAll+0x128>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1c8      	bne.n	800247e <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80024f2:	f000 fa0f 	bl	8002914 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80024f6:	4b1d      	ldr	r3, [pc, #116]	@ (800256c <xTaskResumeAll+0x13c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d010      	beq.n	8002524 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002502:	f000 f849 	bl	8002598 <xTaskIncrementTick>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 800250c:	4b16      	ldr	r3, [pc, #88]	@ (8002568 <xTaskResumeAll+0x138>)
 800250e:	2201      	movs	r2, #1
 8002510:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3b01      	subs	r3, #1
 8002516:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f1      	bne.n	8002502 <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 800251e:	4b13      	ldr	r3, [pc, #76]	@ (800256c <xTaskResumeAll+0x13c>)
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002524:	4b10      	ldr	r3, [pc, #64]	@ (8002568 <xTaskResumeAll+0x138>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d009      	beq.n	8002540 <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800252c:	2301      	movs	r3, #1
 800252e:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002530:	4b0f      	ldr	r3, [pc, #60]	@ (8002570 <xTaskResumeAll+0x140>)
 8002532:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	f3bf 8f4f 	dsb	sy
 800253c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002540:	f000 fbe6 	bl	8002d10 <vPortExitCritical>

    return xAlreadyYielded;
 8002544:	68bb      	ldr	r3, [r7, #8]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	2000017c 	.word	0x2000017c
 8002554:	20000154 	.word	0x20000154
 8002558:	20000114 	.word	0x20000114
 800255c:	2000015c 	.word	0x2000015c
 8002560:	20000080 	.word	0x20000080
 8002564:	2000007c 	.word	0x2000007c
 8002568:	20000168 	.word	0x20000168
 800256c:	20000164 	.word	0x20000164
 8002570:	e000ed04 	.word	0xe000ed04

08002574 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800257a:	f000 fc87 	bl	8002e8c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800257e:	2300      	movs	r3, #0
 8002580:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002582:	4b04      	ldr	r3, [pc, #16]	@ (8002594 <xTaskGetTickCountFromISR+0x20>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002588:	683b      	ldr	r3, [r7, #0]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000158 	.word	0x20000158

08002598 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025a2:	4b51      	ldr	r3, [pc, #324]	@ (80026e8 <xTaskIncrementTick+0x150>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f040 8093 	bne.w	80026d2 <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80025ac:	4b4f      	ldr	r3, [pc, #316]	@ (80026ec <xTaskIncrementTick+0x154>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	3301      	adds	r3, #1
 80025b2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80025b4:	4a4d      	ldr	r2, [pc, #308]	@ (80026ec <xTaskIncrementTick+0x154>)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d121      	bne.n	8002604 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80025c0:	4b4b      	ldr	r3, [pc, #300]	@ (80026f0 <xTaskIncrementTick+0x158>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00b      	beq.n	80025e2 <xTaskIncrementTick+0x4a>
        __asm volatile
 80025ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025ce:	f383 8811 	msr	BASEPRI, r3
 80025d2:	f3bf 8f6f 	isb	sy
 80025d6:	f3bf 8f4f 	dsb	sy
 80025da:	603b      	str	r3, [r7, #0]
    }
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	e7fd      	b.n	80025de <xTaskIncrementTick+0x46>
 80025e2:	4b43      	ldr	r3, [pc, #268]	@ (80026f0 <xTaskIncrementTick+0x158>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	4b42      	ldr	r3, [pc, #264]	@ (80026f4 <xTaskIncrementTick+0x15c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a40      	ldr	r2, [pc, #256]	@ (80026f0 <xTaskIncrementTick+0x158>)
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	4a40      	ldr	r2, [pc, #256]	@ (80026f4 <xTaskIncrementTick+0x15c>)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	4b40      	ldr	r3, [pc, #256]	@ (80026f8 <xTaskIncrementTick+0x160>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	3301      	adds	r3, #1
 80025fc:	4a3e      	ldr	r2, [pc, #248]	@ (80026f8 <xTaskIncrementTick+0x160>)
 80025fe:	6013      	str	r3, [r2, #0]
 8002600:	f000 f988 	bl	8002914 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002604:	4b3d      	ldr	r3, [pc, #244]	@ (80026fc <xTaskIncrementTick+0x164>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	429a      	cmp	r2, r3
 800260c:	d34c      	bcc.n	80026a8 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800260e:	4b38      	ldr	r3, [pc, #224]	@ (80026f0 <xTaskIncrementTick+0x158>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d104      	bne.n	8002622 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002618:	4b38      	ldr	r3, [pc, #224]	@ (80026fc <xTaskIncrementTick+0x164>)
 800261a:	f04f 32ff 	mov.w	r2, #4294967295
 800261e:	601a      	str	r2, [r3, #0]
                    break;
 8002620:	e042      	b.n	80026a8 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002622:	4b33      	ldr	r3, [pc, #204]	@ (80026f0 <xTaskIncrementTick+0x158>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	429a      	cmp	r2, r3
 8002638:	d203      	bcs.n	8002642 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800263a:	4a30      	ldr	r2, [pc, #192]	@ (80026fc <xTaskIncrementTick+0x164>)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002640:	e032      	b.n	80026a8 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	3304      	adds	r3, #4
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff fc4f 	bl	8001eea <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002650:	2b00      	cmp	r3, #0
 8002652:	d004      	beq.n	800265e <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	3318      	adds	r3, #24
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff fc46 	bl	8001eea <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	4618      	mov	r0, r3
 8002662:	f002 fc85 	bl	8004f70 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800266a:	2201      	movs	r2, #1
 800266c:	409a      	lsls	r2, r3
 800266e:	4b24      	ldr	r3, [pc, #144]	@ (8002700 <xTaskIncrementTick+0x168>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4313      	orrs	r3, r2
 8002674:	4a22      	ldr	r2, [pc, #136]	@ (8002700 <xTaskIncrementTick+0x168>)
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4a1f      	ldr	r2, [pc, #124]	@ (8002704 <xTaskIncrementTick+0x16c>)
 8002686:	441a      	add	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	3304      	adds	r3, #4
 800268c:	4619      	mov	r1, r3
 800268e:	4610      	mov	r0, r2
 8002690:	f7ff fc07 	bl	8001ea2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002698:	4b1b      	ldr	r3, [pc, #108]	@ (8002708 <xTaskIncrementTick+0x170>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800269e:	429a      	cmp	r2, r3
 80026a0:	d3b5      	bcc.n	800260e <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 80026a2:	2301      	movs	r3, #1
 80026a4:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026a6:	e7b2      	b.n	800260e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80026a8:	4b17      	ldr	r3, [pc, #92]	@ (8002708 <xTaskIncrementTick+0x170>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026ae:	4915      	ldr	r1, [pc, #84]	@ (8002704 <xTaskIncrementTick+0x16c>)
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d901      	bls.n	80026c4 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 80026c0:	2301      	movs	r3, #1
 80026c2:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80026c4:	4b11      	ldr	r3, [pc, #68]	@ (800270c <xTaskIncrementTick+0x174>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d007      	beq.n	80026dc <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 80026cc:	2301      	movs	r3, #1
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	e004      	b.n	80026dc <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80026d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002710 <xTaskIncrementTick+0x178>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	3301      	adds	r3, #1
 80026d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002710 <xTaskIncrementTick+0x178>)
 80026da:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80026dc:	697b      	ldr	r3, [r7, #20]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	2000017c 	.word	0x2000017c
 80026ec:	20000158 	.word	0x20000158
 80026f0:	2000010c 	.word	0x2000010c
 80026f4:	20000110 	.word	0x20000110
 80026f8:	2000016c 	.word	0x2000016c
 80026fc:	20000174 	.word	0x20000174
 8002700:	2000015c 	.word	0x2000015c
 8002704:	20000080 	.word	0x20000080
 8002708:	2000007c 	.word	0x2000007c
 800270c:	20000168 	.word	0x20000168
 8002710:	20000164 	.word	0x20000164

08002714 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800271a:	4b2d      	ldr	r3, [pc, #180]	@ (80027d0 <vTaskSwitchContext+0xbc>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002722:	4b2c      	ldr	r3, [pc, #176]	@ (80027d4 <vTaskSwitchContext+0xc0>)
 8002724:	2201      	movs	r2, #1
 8002726:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002728:	e04e      	b.n	80027c8 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 800272a:	4b2a      	ldr	r3, [pc, #168]	@ (80027d4 <vTaskSwitchContext+0xc0>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002730:	4b29      	ldr	r3, [pc, #164]	@ (80027d8 <vTaskSwitchContext+0xc4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	fab3 f383 	clz	r3, r3
 800273c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800273e:	7afb      	ldrb	r3, [r7, #11]
 8002740:	f1c3 031f 	rsb	r3, r3, #31
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	4925      	ldr	r1, [pc, #148]	@ (80027dc <vTaskSwitchContext+0xc8>)
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	440b      	add	r3, r1
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10b      	bne.n	8002772 <vTaskSwitchContext+0x5e>
        __asm volatile
 800275a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800275e:	f383 8811 	msr	BASEPRI, r3
 8002762:	f3bf 8f6f 	isb	sy
 8002766:	f3bf 8f4f 	dsb	sy
 800276a:	607b      	str	r3, [r7, #4]
    }
 800276c:	bf00      	nop
 800276e:	bf00      	nop
 8002770:	e7fd      	b.n	800276e <vTaskSwitchContext+0x5a>
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4a17      	ldr	r2, [pc, #92]	@ (80027dc <vTaskSwitchContext+0xc8>)
 800277e:	4413      	add	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	605a      	str	r2, [r3, #4]
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	3308      	adds	r3, #8
 8002794:	429a      	cmp	r2, r3
 8002796:	d104      	bne.n	80027a2 <vTaskSwitchContext+0x8e>
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	4a0d      	ldr	r2, [pc, #52]	@ (80027e0 <vTaskSwitchContext+0xcc>)
 80027aa:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80027ac:	4b0c      	ldr	r3, [pc, #48]	@ (80027e0 <vTaskSwitchContext+0xcc>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	4b0c      	ldr	r3, [pc, #48]	@ (80027e4 <vTaskSwitchContext+0xd0>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d102      	bne.n	80027be <vTaskSwitchContext+0xaa>
 80027b8:	f002 fb3a 	bl	8004e30 <SEGGER_SYSVIEW_OnIdle>
}
 80027bc:	e004      	b.n	80027c8 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 80027be:	4b08      	ldr	r3, [pc, #32]	@ (80027e0 <vTaskSwitchContext+0xcc>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f002 fb92 	bl	8004eec <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80027c8:	bf00      	nop
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	2000017c 	.word	0x2000017c
 80027d4:	20000168 	.word	0x20000168
 80027d8:	2000015c 	.word	0x2000015c
 80027dc:	20000080 	.word	0x20000080
 80027e0:	2000007c 	.word	0x2000007c
 80027e4:	20000178 	.word	0x20000178

080027e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80027f0:	f000 f852 	bl	8002898 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80027f4:	4b06      	ldr	r3, [pc, #24]	@ (8002810 <prvIdleTask+0x28>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d9f9      	bls.n	80027f0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80027fc:	4b05      	ldr	r3, [pc, #20]	@ (8002814 <prvIdleTask+0x2c>)
 80027fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	f3bf 8f4f 	dsb	sy
 8002808:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800280c:	e7f0      	b.n	80027f0 <prvIdleTask+0x8>
 800280e:	bf00      	nop
 8002810:	20000080 	.word	0x20000080
 8002814:	e000ed04 	.word	0xe000ed04

08002818 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800281e:	2300      	movs	r3, #0
 8002820:	607b      	str	r3, [r7, #4]
 8002822:	e00c      	b.n	800283e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4a12      	ldr	r2, [pc, #72]	@ (8002878 <prvInitialiseTaskLists+0x60>)
 8002830:	4413      	add	r3, r2
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fb08 	bl	8001e48 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3301      	adds	r3, #1
 800283c:	607b      	str	r3, [r7, #4]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b04      	cmp	r3, #4
 8002842:	d9ef      	bls.n	8002824 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002844:	480d      	ldr	r0, [pc, #52]	@ (800287c <prvInitialiseTaskLists+0x64>)
 8002846:	f7ff faff 	bl	8001e48 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800284a:	480d      	ldr	r0, [pc, #52]	@ (8002880 <prvInitialiseTaskLists+0x68>)
 800284c:	f7ff fafc 	bl	8001e48 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002850:	480c      	ldr	r0, [pc, #48]	@ (8002884 <prvInitialiseTaskLists+0x6c>)
 8002852:	f7ff faf9 	bl	8001e48 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002856:	480c      	ldr	r0, [pc, #48]	@ (8002888 <prvInitialiseTaskLists+0x70>)
 8002858:	f7ff faf6 	bl	8001e48 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800285c:	480b      	ldr	r0, [pc, #44]	@ (800288c <prvInitialiseTaskLists+0x74>)
 800285e:	f7ff faf3 	bl	8001e48 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002862:	4b0b      	ldr	r3, [pc, #44]	@ (8002890 <prvInitialiseTaskLists+0x78>)
 8002864:	4a05      	ldr	r2, [pc, #20]	@ (800287c <prvInitialiseTaskLists+0x64>)
 8002866:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002868:	4b0a      	ldr	r3, [pc, #40]	@ (8002894 <prvInitialiseTaskLists+0x7c>)
 800286a:	4a05      	ldr	r2, [pc, #20]	@ (8002880 <prvInitialiseTaskLists+0x68>)
 800286c:	601a      	str	r2, [r3, #0]
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000080 	.word	0x20000080
 800287c:	200000e4 	.word	0x200000e4
 8002880:	200000f8 	.word	0x200000f8
 8002884:	20000114 	.word	0x20000114
 8002888:	20000128 	.word	0x20000128
 800288c:	20000140 	.word	0x20000140
 8002890:	2000010c 	.word	0x2000010c
 8002894:	20000110 	.word	0x20000110

08002898 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800289e:	e019      	b.n	80028d4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80028a0:	f000 fa04 	bl	8002cac <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028a4:	4b10      	ldr	r3, [pc, #64]	@ (80028e8 <prvCheckTasksWaitingTermination+0x50>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3304      	adds	r3, #4
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff fb1a 	bl	8001eea <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80028b6:	4b0d      	ldr	r3, [pc, #52]	@ (80028ec <prvCheckTasksWaitingTermination+0x54>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	4a0b      	ldr	r2, [pc, #44]	@ (80028ec <prvCheckTasksWaitingTermination+0x54>)
 80028be:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80028c0:	4b0b      	ldr	r3, [pc, #44]	@ (80028f0 <prvCheckTasksWaitingTermination+0x58>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	3b01      	subs	r3, #1
 80028c6:	4a0a      	ldr	r2, [pc, #40]	@ (80028f0 <prvCheckTasksWaitingTermination+0x58>)
 80028c8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80028ca:	f000 fa21 	bl	8002d10 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f810 	bl	80028f4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80028d4:	4b06      	ldr	r3, [pc, #24]	@ (80028f0 <prvCheckTasksWaitingTermination+0x58>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1e1      	bne.n	80028a0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80028dc:	bf00      	nop
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000128 	.word	0x20000128
 80028ec:	20000154 	.word	0x20000154
 80028f0:	2000013c 	.word	0x2000013c

080028f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002900:	4618      	mov	r0, r3
 8002902:	f000 fbe7 	bl	80030d4 <vPortFree>
                vPortFree( pxTCB );
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fbe4 	bl	80030d4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800290c:	bf00      	nop
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002918:	4b0a      	ldr	r3, [pc, #40]	@ (8002944 <prvResetNextTaskUnblockTime+0x30>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d104      	bne.n	800292c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002922:	4b09      	ldr	r3, [pc, #36]	@ (8002948 <prvResetNextTaskUnblockTime+0x34>)
 8002924:	f04f 32ff 	mov.w	r2, #4294967295
 8002928:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800292a:	e005      	b.n	8002938 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800292c:	4b05      	ldr	r3, [pc, #20]	@ (8002944 <prvResetNextTaskUnblockTime+0x30>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a04      	ldr	r2, [pc, #16]	@ (8002948 <prvResetNextTaskUnblockTime+0x34>)
 8002936:	6013      	str	r3, [r2, #0]
}
 8002938:	bf00      	nop
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	2000010c 	.word	0x2000010c
 8002948:	20000174 	.word	0x20000174

0800294c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	3b04      	subs	r3, #4
 800295c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002964:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	3b04      	subs	r3, #4
 800296a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f023 0201 	bic.w	r2, r3, #1
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	3b04      	subs	r3, #4
 800297a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800297c:	4a0c      	ldr	r2, [pc, #48]	@ (80029b0 <pxPortInitialiseStack+0x64>)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	3b14      	subs	r3, #20
 8002986:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	3b04      	subs	r3, #4
 8002992:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f06f 0202 	mvn.w	r2, #2
 800299a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	3b20      	subs	r3, #32
 80029a0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80029a2:	68fb      	ldr	r3, [r7, #12]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	080029b5 	.word	0x080029b5

080029b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80029be:	4b13      	ldr	r3, [pc, #76]	@ (8002a0c <prvTaskExitError+0x58>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c6:	d00b      	beq.n	80029e0 <prvTaskExitError+0x2c>
        __asm volatile
 80029c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029cc:	f383 8811 	msr	BASEPRI, r3
 80029d0:	f3bf 8f6f 	isb	sy
 80029d4:	f3bf 8f4f 	dsb	sy
 80029d8:	60fb      	str	r3, [r7, #12]
    }
 80029da:	bf00      	nop
 80029dc:	bf00      	nop
 80029de:	e7fd      	b.n	80029dc <prvTaskExitError+0x28>
        __asm volatile
 80029e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029e4:	f383 8811 	msr	BASEPRI, r3
 80029e8:	f3bf 8f6f 	isb	sy
 80029ec:	f3bf 8f4f 	dsb	sy
 80029f0:	60bb      	str	r3, [r7, #8]
    }
 80029f2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80029f4:	bf00      	nop
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0fc      	beq.n	80029f6 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80029fc:	bf00      	nop
 80029fe:	bf00      	nop
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	20000010 	.word	0x20000010

08002a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002a10:	4b07      	ldr	r3, [pc, #28]	@ (8002a30 <pxCurrentTCBConst2>)
 8002a12:	6819      	ldr	r1, [r3, #0]
 8002a14:	6808      	ldr	r0, [r1, #0]
 8002a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a1a:	f380 8809 	msr	PSP, r0
 8002a1e:	f3bf 8f6f 	isb	sy
 8002a22:	f04f 0000 	mov.w	r0, #0
 8002a26:	f380 8811 	msr	BASEPRI, r0
 8002a2a:	4770      	bx	lr
 8002a2c:	f3af 8000 	nop.w

08002a30 <pxCurrentTCBConst2>:
 8002a30:	2000007c 	.word	0x2000007c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002a34:	bf00      	nop
 8002a36:	bf00      	nop

08002a38 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002a38:	4808      	ldr	r0, [pc, #32]	@ (8002a5c <prvPortStartFirstTask+0x24>)
 8002a3a:	6800      	ldr	r0, [r0, #0]
 8002a3c:	6800      	ldr	r0, [r0, #0]
 8002a3e:	f380 8808 	msr	MSP, r0
 8002a42:	f04f 0000 	mov.w	r0, #0
 8002a46:	f380 8814 	msr	CONTROL, r0
 8002a4a:	b662      	cpsie	i
 8002a4c:	b661      	cpsie	f
 8002a4e:	f3bf 8f4f 	dsb	sy
 8002a52:	f3bf 8f6f 	isb	sy
 8002a56:	df00      	svc	0
 8002a58:	bf00      	nop
 8002a5a:	0000      	.short	0x0000
 8002a5c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002a60:	bf00      	nop
 8002a62:	bf00      	nop

08002a64 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002a6a:	4b47      	ldr	r3, [pc, #284]	@ (8002b88 <xPortStartScheduler+0x124>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a47      	ldr	r2, [pc, #284]	@ (8002b8c <xPortStartScheduler+0x128>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d10b      	bne.n	8002a8c <xPortStartScheduler+0x28>
        __asm volatile
 8002a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a78:	f383 8811 	msr	BASEPRI, r3
 8002a7c:	f3bf 8f6f 	isb	sy
 8002a80:	f3bf 8f4f 	dsb	sy
 8002a84:	613b      	str	r3, [r7, #16]
    }
 8002a86:	bf00      	nop
 8002a88:	bf00      	nop
 8002a8a:	e7fd      	b.n	8002a88 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002a8c:	4b3e      	ldr	r3, [pc, #248]	@ (8002b88 <xPortStartScheduler+0x124>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a3f      	ldr	r2, [pc, #252]	@ (8002b90 <xPortStartScheduler+0x12c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d10b      	bne.n	8002aae <xPortStartScheduler+0x4a>
        __asm volatile
 8002a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a9a:	f383 8811 	msr	BASEPRI, r3
 8002a9e:	f3bf 8f6f 	isb	sy
 8002aa2:	f3bf 8f4f 	dsb	sy
 8002aa6:	60fb      	str	r3, [r7, #12]
    }
 8002aa8:	bf00      	nop
 8002aaa:	bf00      	nop
 8002aac:	e7fd      	b.n	8002aaa <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002aae:	4b39      	ldr	r3, [pc, #228]	@ (8002b94 <xPortStartScheduler+0x130>)
 8002ab0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	22ff      	movs	r2, #255	@ 0xff
 8002abe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	4b31      	ldr	r3, [pc, #196]	@ (8002b98 <xPortStartScheduler+0x134>)
 8002ad4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ad6:	4b31      	ldr	r3, [pc, #196]	@ (8002b9c <xPortStartScheduler+0x138>)
 8002ad8:	2207      	movs	r2, #7
 8002ada:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002adc:	e009      	b.n	8002af2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8002ade:	4b2f      	ldr	r3, [pc, #188]	@ (8002b9c <xPortStartScheduler+0x138>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	4a2d      	ldr	r2, [pc, #180]	@ (8002b9c <xPortStartScheduler+0x138>)
 8002ae6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ae8:	78fb      	ldrb	r3, [r7, #3]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002af2:	78fb      	ldrb	r3, [r7, #3]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002afa:	2b80      	cmp	r3, #128	@ 0x80
 8002afc:	d0ef      	beq.n	8002ade <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002afe:	4b27      	ldr	r3, [pc, #156]	@ (8002b9c <xPortStartScheduler+0x138>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f1c3 0307 	rsb	r3, r3, #7
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d00b      	beq.n	8002b22 <xPortStartScheduler+0xbe>
        __asm volatile
 8002b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b0e:	f383 8811 	msr	BASEPRI, r3
 8002b12:	f3bf 8f6f 	isb	sy
 8002b16:	f3bf 8f4f 	dsb	sy
 8002b1a:	60bb      	str	r3, [r7, #8]
    }
 8002b1c:	bf00      	nop
 8002b1e:	bf00      	nop
 8002b20:	e7fd      	b.n	8002b1e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002b22:	4b1e      	ldr	r3, [pc, #120]	@ (8002b9c <xPortStartScheduler+0x138>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	021b      	lsls	r3, r3, #8
 8002b28:	4a1c      	ldr	r2, [pc, #112]	@ (8002b9c <xPortStartScheduler+0x138>)
 8002b2a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b9c <xPortStartScheduler+0x138>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b34:	4a19      	ldr	r2, [pc, #100]	@ (8002b9c <xPortStartScheduler+0x138>)
 8002b36:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002b40:	4b17      	ldr	r3, [pc, #92]	@ (8002ba0 <xPortStartScheduler+0x13c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a16      	ldr	r2, [pc, #88]	@ (8002ba0 <xPortStartScheduler+0x13c>)
 8002b46:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b4a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002b4c:	4b14      	ldr	r3, [pc, #80]	@ (8002ba0 <xPortStartScheduler+0x13c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a13      	ldr	r2, [pc, #76]	@ (8002ba0 <xPortStartScheduler+0x13c>)
 8002b52:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002b56:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002b58:	f000 f968 	bl	8002e2c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002b5c:	4b11      	ldr	r3, [pc, #68]	@ (8002ba4 <xPortStartScheduler+0x140>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002b62:	f000 f987 	bl	8002e74 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002b66:	4b10      	ldr	r3, [pc, #64]	@ (8002ba8 <xPortStartScheduler+0x144>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a0f      	ldr	r2, [pc, #60]	@ (8002ba8 <xPortStartScheduler+0x144>)
 8002b6c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002b70:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002b72:	f7ff ff61 	bl	8002a38 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002b76:	f7ff fdcd 	bl	8002714 <vTaskSwitchContext>
    prvTaskExitError();
 8002b7a:	f7ff ff1b 	bl	80029b4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	e000ed00 	.word	0xe000ed00
 8002b8c:	410fc271 	.word	0x410fc271
 8002b90:	410fc270 	.word	0x410fc270
 8002b94:	e000e400 	.word	0xe000e400
 8002b98:	20000180 	.word	0x20000180
 8002b9c:	20000184 	.word	0x20000184
 8002ba0:	e000ed20 	.word	0xe000ed20
 8002ba4:	20000010 	.word	0x20000010
 8002ba8:	e000ef34 	.word	0xe000ef34

08002bac <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002bb2:	4b38      	ldr	r3, [pc, #224]	@ (8002c94 <vInitPrioGroupValue+0xe8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a38      	ldr	r2, [pc, #224]	@ (8002c98 <vInitPrioGroupValue+0xec>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d10b      	bne.n	8002bd4 <vInitPrioGroupValue+0x28>
        __asm volatile
 8002bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bc0:	f383 8811 	msr	BASEPRI, r3
 8002bc4:	f3bf 8f6f 	isb	sy
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	613b      	str	r3, [r7, #16]
    }
 8002bce:	bf00      	nop
 8002bd0:	bf00      	nop
 8002bd2:	e7fd      	b.n	8002bd0 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002bd4:	4b2f      	ldr	r3, [pc, #188]	@ (8002c94 <vInitPrioGroupValue+0xe8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a30      	ldr	r2, [pc, #192]	@ (8002c9c <vInitPrioGroupValue+0xf0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d10b      	bne.n	8002bf6 <vInitPrioGroupValue+0x4a>
        __asm volatile
 8002bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002be2:	f383 8811 	msr	BASEPRI, r3
 8002be6:	f3bf 8f6f 	isb	sy
 8002bea:	f3bf 8f4f 	dsb	sy
 8002bee:	60fb      	str	r3, [r7, #12]
    }
 8002bf0:	bf00      	nop
 8002bf2:	bf00      	nop
 8002bf4:	e7fd      	b.n	8002bf2 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca0 <vInitPrioGroupValue+0xf4>)
 8002bf8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	22ff      	movs	r2, #255	@ 0xff
 8002c06:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c10:	78fb      	ldrb	r3, [r7, #3]
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	4b22      	ldr	r3, [pc, #136]	@ (8002ca4 <vInitPrioGroupValue+0xf8>)
 8002c1c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002c1e:	4b22      	ldr	r3, [pc, #136]	@ (8002ca8 <vInitPrioGroupValue+0xfc>)
 8002c20:	2207      	movs	r2, #7
 8002c22:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c24:	e009      	b.n	8002c3a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8002c26:	4b20      	ldr	r3, [pc, #128]	@ (8002ca8 <vInitPrioGroupValue+0xfc>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	4a1e      	ldr	r2, [pc, #120]	@ (8002ca8 <vInitPrioGroupValue+0xfc>)
 8002c2e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002c30:	78fb      	ldrb	r3, [r7, #3]
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c3a:	78fb      	ldrb	r3, [r7, #3]
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c42:	2b80      	cmp	r3, #128	@ 0x80
 8002c44:	d0ef      	beq.n	8002c26 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002c46:	4b18      	ldr	r3, [pc, #96]	@ (8002ca8 <vInitPrioGroupValue+0xfc>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f1c3 0307 	rsb	r3, r3, #7
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d00b      	beq.n	8002c6a <vInitPrioGroupValue+0xbe>
        __asm volatile
 8002c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c56:	f383 8811 	msr	BASEPRI, r3
 8002c5a:	f3bf 8f6f 	isb	sy
 8002c5e:	f3bf 8f4f 	dsb	sy
 8002c62:	60bb      	str	r3, [r7, #8]
    }
 8002c64:	bf00      	nop
 8002c66:	bf00      	nop
 8002c68:	e7fd      	b.n	8002c66 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca8 <vInitPrioGroupValue+0xfc>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	021b      	lsls	r3, r3, #8
 8002c70:	4a0d      	ldr	r2, [pc, #52]	@ (8002ca8 <vInitPrioGroupValue+0xfc>)
 8002c72:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002c74:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca8 <vInitPrioGroupValue+0xfc>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8002ca8 <vInitPrioGroupValue+0xfc>)
 8002c7e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002c88:	bf00      	nop
 8002c8a:	371c      	adds	r7, #28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	e000ed00 	.word	0xe000ed00
 8002c98:	410fc271 	.word	0x410fc271
 8002c9c:	410fc270 	.word	0x410fc270
 8002ca0:	e000e400 	.word	0xe000e400
 8002ca4:	20000180 	.word	0x20000180
 8002ca8:	20000184 	.word	0x20000184

08002cac <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
        __asm volatile
 8002cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cb6:	f383 8811 	msr	BASEPRI, r3
 8002cba:	f3bf 8f6f 	isb	sy
 8002cbe:	f3bf 8f4f 	dsb	sy
 8002cc2:	607b      	str	r3, [r7, #4]
    }
 8002cc4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002cc6:	4b10      	ldr	r3, [pc, #64]	@ (8002d08 <vPortEnterCritical+0x5c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	4a0e      	ldr	r2, [pc, #56]	@ (8002d08 <vPortEnterCritical+0x5c>)
 8002cce:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8002d08 <vPortEnterCritical+0x5c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d110      	bne.n	8002cfa <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d0c <vPortEnterCritical+0x60>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00b      	beq.n	8002cfa <vPortEnterCritical+0x4e>
        __asm volatile
 8002ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ce6:	f383 8811 	msr	BASEPRI, r3
 8002cea:	f3bf 8f6f 	isb	sy
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	603b      	str	r3, [r7, #0]
    }
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop
 8002cf8:	e7fd      	b.n	8002cf6 <vPortEnterCritical+0x4a>
    }
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	20000010 	.word	0x20000010
 8002d0c:	e000ed04 	.word	0xe000ed04

08002d10 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002d16:	4b12      	ldr	r3, [pc, #72]	@ (8002d60 <vPortExitCritical+0x50>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10b      	bne.n	8002d36 <vPortExitCritical+0x26>
        __asm volatile
 8002d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d22:	f383 8811 	msr	BASEPRI, r3
 8002d26:	f3bf 8f6f 	isb	sy
 8002d2a:	f3bf 8f4f 	dsb	sy
 8002d2e:	607b      	str	r3, [r7, #4]
    }
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
 8002d34:	e7fd      	b.n	8002d32 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002d36:	4b0a      	ldr	r3, [pc, #40]	@ (8002d60 <vPortExitCritical+0x50>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	4a08      	ldr	r2, [pc, #32]	@ (8002d60 <vPortExitCritical+0x50>)
 8002d3e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002d40:	4b07      	ldr	r3, [pc, #28]	@ (8002d60 <vPortExitCritical+0x50>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d105      	bne.n	8002d54 <vPortExitCritical+0x44>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002d52:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	20000010 	.word	0x20000010
	...

08002d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002d70:	f3ef 8009 	mrs	r0, PSP
 8002d74:	f3bf 8f6f 	isb	sy
 8002d78:	4b15      	ldr	r3, [pc, #84]	@ (8002dd0 <pxCurrentTCBConst>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	f01e 0f10 	tst.w	lr, #16
 8002d80:	bf08      	it	eq
 8002d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d8a:	6010      	str	r0, [r2, #0]
 8002d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002d90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002d94:	f380 8811 	msr	BASEPRI, r0
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	f7ff fcb8 	bl	8002714 <vTaskSwitchContext>
 8002da4:	f04f 0000 	mov.w	r0, #0
 8002da8:	f380 8811 	msr	BASEPRI, r0
 8002dac:	bc09      	pop	{r0, r3}
 8002dae:	6819      	ldr	r1, [r3, #0]
 8002db0:	6808      	ldr	r0, [r1, #0]
 8002db2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002db6:	f01e 0f10 	tst.w	lr, #16
 8002dba:	bf08      	it	eq
 8002dbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002dc0:	f380 8809 	msr	PSP, r0
 8002dc4:	f3bf 8f6f 	isb	sy
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	f3af 8000 	nop.w

08002dd0 <pxCurrentTCBConst>:
 8002dd0:	2000007c 	.word	0x2000007c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop

08002dd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
        __asm volatile
 8002dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002de2:	f383 8811 	msr	BASEPRI, r3
 8002de6:	f3bf 8f6f 	isb	sy
 8002dea:	f3bf 8f4f 	dsb	sy
 8002dee:	607b      	str	r3, [r7, #4]
    }
 8002df0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002df2:	f001 ffa3 	bl	8004d3c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002df6:	f7ff fbcf 	bl	8002598 <xTaskIncrementTick>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d006      	beq.n	8002e0e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002e00:	f001 fffa 	bl	8004df8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e04:	4b08      	ldr	r3, [pc, #32]	@ (8002e28 <SysTick_Handler+0x50>)
 8002e06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	e001      	b.n	8002e12 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002e0e:	f001 ffd7 	bl	8004dc0 <SEGGER_SYSVIEW_RecordExitISR>
 8002e12:	2300      	movs	r3, #0
 8002e14:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	f383 8811 	msr	BASEPRI, r3
    }
 8002e1c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	e000ed04 	.word	0xe000ed04

08002e2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002e30:	4b0b      	ldr	r3, [pc, #44]	@ (8002e60 <vPortSetupTimerInterrupt+0x34>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002e36:	4b0b      	ldr	r3, [pc, #44]	@ (8002e64 <vPortSetupTimerInterrupt+0x38>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e68 <vPortSetupTimerInterrupt+0x3c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a0a      	ldr	r2, [pc, #40]	@ (8002e6c <vPortSetupTimerInterrupt+0x40>)
 8002e42:	fba2 2303 	umull	r2, r3, r2, r3
 8002e46:	099b      	lsrs	r3, r3, #6
 8002e48:	4a09      	ldr	r2, [pc, #36]	@ (8002e70 <vPortSetupTimerInterrupt+0x44>)
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002e4e:	4b04      	ldr	r3, [pc, #16]	@ (8002e60 <vPortSetupTimerInterrupt+0x34>)
 8002e50:	2207      	movs	r2, #7
 8002e52:	601a      	str	r2, [r3, #0]
}
 8002e54:	bf00      	nop
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	e000e010 	.word	0xe000e010
 8002e64:	e000e018 	.word	0xe000e018
 8002e68:	20000000 	.word	0x20000000
 8002e6c:	10624dd3 	.word	0x10624dd3
 8002e70:	e000e014 	.word	0xe000e014

08002e74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002e74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002e84 <vPortEnableVFP+0x10>
 8002e78:	6801      	ldr	r1, [r0, #0]
 8002e7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002e7e:	6001      	str	r1, [r0, #0]
 8002e80:	4770      	bx	lr
 8002e82:	0000      	.short	0x0000
 8002e84:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002e88:	bf00      	nop
 8002e8a:	bf00      	nop

08002e8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002e92:	f3ef 8305 	mrs	r3, IPSR
 8002e96:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2b0f      	cmp	r3, #15
 8002e9c:	d915      	bls.n	8002eca <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002e9e:	4a18      	ldr	r2, [pc, #96]	@ (8002f00 <vPortValidateInterruptPriority+0x74>)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002ea8:	4b16      	ldr	r3, [pc, #88]	@ (8002f04 <vPortValidateInterruptPriority+0x78>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	7afa      	ldrb	r2, [r7, #11]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d20b      	bcs.n	8002eca <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8002eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eb6:	f383 8811 	msr	BASEPRI, r3
 8002eba:	f3bf 8f6f 	isb	sy
 8002ebe:	f3bf 8f4f 	dsb	sy
 8002ec2:	607b      	str	r3, [r7, #4]
    }
 8002ec4:	bf00      	nop
 8002ec6:	bf00      	nop
 8002ec8:	e7fd      	b.n	8002ec6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002eca:	4b0f      	ldr	r3, [pc, #60]	@ (8002f08 <vPortValidateInterruptPriority+0x7c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f0c <vPortValidateInterruptPriority+0x80>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d90b      	bls.n	8002ef2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8002eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ede:	f383 8811 	msr	BASEPRI, r3
 8002ee2:	f3bf 8f6f 	isb	sy
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	603b      	str	r3, [r7, #0]
    }
 8002eec:	bf00      	nop
 8002eee:	bf00      	nop
 8002ef0:	e7fd      	b.n	8002eee <vPortValidateInterruptPriority+0x62>
    }
 8002ef2:	bf00      	nop
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	e000e3f0 	.word	0xe000e3f0
 8002f04:	20000180 	.word	0x20000180
 8002f08:	e000ed0c 	.word	0xe000ed0c
 8002f0c:	20000184 	.word	0x20000184

08002f10 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b08a      	sub	sp, #40	@ 0x28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002f1c:	f7ff fa7a 	bl	8002414 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002f20:	4b66      	ldr	r3, [pc, #408]	@ (80030bc <pvPortMalloc+0x1ac>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002f28:	f000 f938 	bl	800319c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002f2c:	4b64      	ldr	r3, [pc, #400]	@ (80030c0 <pvPortMalloc+0x1b0>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f040 80a9 	bne.w	800308c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d02e      	beq.n	8002f9e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002f40:	2208      	movs	r2, #8
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d228      	bcs.n	8002f9e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8002f4c:	2208      	movs	r2, #8
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4413      	add	r3, r2
 8002f52:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d022      	beq.n	8002fa4 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f023 0307 	bic.w	r3, r3, #7
 8002f64:	3308      	adds	r3, #8
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d215      	bcs.n	8002f98 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f023 0307 	bic.w	r3, r3, #7
 8002f72:	3308      	adds	r3, #8
 8002f74:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d011      	beq.n	8002fa4 <pvPortMalloc+0x94>
        __asm volatile
 8002f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	617b      	str	r3, [r7, #20]
    }
 8002f92:	bf00      	nop
 8002f94:	bf00      	nop
 8002f96:	e7fd      	b.n	8002f94 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f9c:	e002      	b.n	8002fa4 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	607b      	str	r3, [r7, #4]
 8002fa2:	e000      	b.n	8002fa6 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002fa4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d06f      	beq.n	800308c <pvPortMalloc+0x17c>
 8002fac:	4b45      	ldr	r3, [pc, #276]	@ (80030c4 <pvPortMalloc+0x1b4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d86a      	bhi.n	800308c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002fb6:	4b44      	ldr	r3, [pc, #272]	@ (80030c8 <pvPortMalloc+0x1b8>)
 8002fb8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002fba:	4b43      	ldr	r3, [pc, #268]	@ (80030c8 <pvPortMalloc+0x1b8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002fc0:	e004      	b.n	8002fcc <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d903      	bls.n	8002fde <pvPortMalloc+0xce>
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f1      	bne.n	8002fc2 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002fde:	4b37      	ldr	r3, [pc, #220]	@ (80030bc <pvPortMalloc+0x1ac>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d051      	beq.n	800308c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2208      	movs	r2, #8
 8002fee:	4413      	add	r3, r2
 8002ff0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	1ad2      	subs	r2, r2, r3
 8003002:	2308      	movs	r3, #8
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	429a      	cmp	r2, r3
 8003008:	d920      	bls.n	800304c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800300a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4413      	add	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00b      	beq.n	8003034 <pvPortMalloc+0x124>
        __asm volatile
 800301c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003020:	f383 8811 	msr	BASEPRI, r3
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	613b      	str	r3, [r7, #16]
    }
 800302e:	bf00      	nop
 8003030:	bf00      	nop
 8003032:	e7fd      	b.n	8003030 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	1ad2      	subs	r2, r2, r3
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003046:	69b8      	ldr	r0, [r7, #24]
 8003048:	f000 f90a 	bl	8003260 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800304c:	4b1d      	ldr	r3, [pc, #116]	@ (80030c4 <pvPortMalloc+0x1b4>)
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	4a1b      	ldr	r2, [pc, #108]	@ (80030c4 <pvPortMalloc+0x1b4>)
 8003058:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800305a:	4b1a      	ldr	r3, [pc, #104]	@ (80030c4 <pvPortMalloc+0x1b4>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	4b1b      	ldr	r3, [pc, #108]	@ (80030cc <pvPortMalloc+0x1bc>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d203      	bcs.n	800306e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003066:	4b17      	ldr	r3, [pc, #92]	@ (80030c4 <pvPortMalloc+0x1b4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a18      	ldr	r2, [pc, #96]	@ (80030cc <pvPortMalloc+0x1bc>)
 800306c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800306e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	4b13      	ldr	r3, [pc, #76]	@ (80030c0 <pvPortMalloc+0x1b0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	431a      	orrs	r2, r3
 8003078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800307c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003082:	4b13      	ldr	r3, [pc, #76]	@ (80030d0 <pvPortMalloc+0x1c0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	3301      	adds	r3, #1
 8003088:	4a11      	ldr	r2, [pc, #68]	@ (80030d0 <pvPortMalloc+0x1c0>)
 800308a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800308c:	f7ff f9d0 	bl	8002430 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00b      	beq.n	80030b2 <pvPortMalloc+0x1a2>
        __asm volatile
 800309a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800309e:	f383 8811 	msr	BASEPRI, r3
 80030a2:	f3bf 8f6f 	isb	sy
 80030a6:	f3bf 8f4f 	dsb	sy
 80030aa:	60fb      	str	r3, [r7, #12]
    }
 80030ac:	bf00      	nop
 80030ae:	bf00      	nop
 80030b0:	e7fd      	b.n	80030ae <pvPortMalloc+0x19e>
    return pvReturn;
 80030b2:	69fb      	ldr	r3, [r7, #28]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3728      	adds	r7, #40	@ 0x28
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	20012d90 	.word	0x20012d90
 80030c0:	20012da4 	.word	0x20012da4
 80030c4:	20012d94 	.word	0x20012d94
 80030c8:	20012d88 	.word	0x20012d88
 80030cc:	20012d98 	.word	0x20012d98
 80030d0:	20012d9c 	.word	0x20012d9c

080030d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d04f      	beq.n	8003186 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80030e6:	2308      	movs	r3, #8
 80030e8:	425b      	negs	r3, r3
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	4413      	add	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	4b25      	ldr	r3, [pc, #148]	@ (8003190 <vPortFree+0xbc>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4013      	ands	r3, r2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10b      	bne.n	800311a <vPortFree+0x46>
        __asm volatile
 8003102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003106:	f383 8811 	msr	BASEPRI, r3
 800310a:	f3bf 8f6f 	isb	sy
 800310e:	f3bf 8f4f 	dsb	sy
 8003112:	60fb      	str	r3, [r7, #12]
    }
 8003114:	bf00      	nop
 8003116:	bf00      	nop
 8003118:	e7fd      	b.n	8003116 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00b      	beq.n	800313a <vPortFree+0x66>
        __asm volatile
 8003122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003126:	f383 8811 	msr	BASEPRI, r3
 800312a:	f3bf 8f6f 	isb	sy
 800312e:	f3bf 8f4f 	dsb	sy
 8003132:	60bb      	str	r3, [r7, #8]
    }
 8003134:	bf00      	nop
 8003136:	bf00      	nop
 8003138:	e7fd      	b.n	8003136 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	4b14      	ldr	r3, [pc, #80]	@ (8003190 <vPortFree+0xbc>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4013      	ands	r3, r2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d01e      	beq.n	8003186 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d11a      	bne.n	8003186 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	4b0e      	ldr	r3, [pc, #56]	@ (8003190 <vPortFree+0xbc>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	43db      	mvns	r3, r3
 800315a:	401a      	ands	r2, r3
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003160:	f7ff f958 	bl	8002414 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	4b0a      	ldr	r3, [pc, #40]	@ (8003194 <vPortFree+0xc0>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4413      	add	r3, r2
 800316e:	4a09      	ldr	r2, [pc, #36]	@ (8003194 <vPortFree+0xc0>)
 8003170:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003172:	6938      	ldr	r0, [r7, #16]
 8003174:	f000 f874 	bl	8003260 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003178:	4b07      	ldr	r3, [pc, #28]	@ (8003198 <vPortFree+0xc4>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	3301      	adds	r3, #1
 800317e:	4a06      	ldr	r2, [pc, #24]	@ (8003198 <vPortFree+0xc4>)
 8003180:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003182:	f7ff f955 	bl	8002430 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003186:	bf00      	nop
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	20012da4 	.word	0x20012da4
 8003194:	20012d94 	.word	0x20012d94
 8003198:	20012da0 	.word	0x20012da0

0800319c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80031a2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80031a6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80031a8:	4b27      	ldr	r3, [pc, #156]	@ (8003248 <prvHeapInit+0xac>)
 80031aa:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00c      	beq.n	80031d0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	3307      	adds	r3, #7
 80031ba:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f023 0307 	bic.w	r3, r3, #7
 80031c2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	4a1f      	ldr	r2, [pc, #124]	@ (8003248 <prvHeapInit+0xac>)
 80031cc:	4413      	add	r3, r2
 80031ce:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80031d4:	4a1d      	ldr	r2, [pc, #116]	@ (800324c <prvHeapInit+0xb0>)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80031da:	4b1c      	ldr	r3, [pc, #112]	@ (800324c <prvHeapInit+0xb0>)
 80031dc:	2200      	movs	r2, #0
 80031de:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	4413      	add	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80031e8:	2208      	movs	r2, #8
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	1a9b      	subs	r3, r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f023 0307 	bic.w	r3, r3, #7
 80031f6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4a15      	ldr	r2, [pc, #84]	@ (8003250 <prvHeapInit+0xb4>)
 80031fc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80031fe:	4b14      	ldr	r3, [pc, #80]	@ (8003250 <prvHeapInit+0xb4>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2200      	movs	r2, #0
 8003204:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003206:	4b12      	ldr	r3, [pc, #72]	@ (8003250 <prvHeapInit+0xb4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	1ad2      	subs	r2, r2, r3
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800321c:	4b0c      	ldr	r3, [pc, #48]	@ (8003250 <prvHeapInit+0xb4>)
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	4a0a      	ldr	r2, [pc, #40]	@ (8003254 <prvHeapInit+0xb8>)
 800322a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	4a09      	ldr	r2, [pc, #36]	@ (8003258 <prvHeapInit+0xbc>)
 8003232:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003234:	4b09      	ldr	r3, [pc, #36]	@ (800325c <prvHeapInit+0xc0>)
 8003236:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800323a:	601a      	str	r2, [r3, #0]
}
 800323c:	bf00      	nop
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	20000188 	.word	0x20000188
 800324c:	20012d88 	.word	0x20012d88
 8003250:	20012d90 	.word	0x20012d90
 8003254:	20012d98 	.word	0x20012d98
 8003258:	20012d94 	.word	0x20012d94
 800325c:	20012da4 	.word	0x20012da4

08003260 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003268:	4b28      	ldr	r3, [pc, #160]	@ (800330c <prvInsertBlockIntoFreeList+0xac>)
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	e002      	b.n	8003274 <prvInsertBlockIntoFreeList+0x14>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	429a      	cmp	r2, r3
 800327c:	d8f7      	bhi.n	800326e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	4413      	add	r3, r2
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	429a      	cmp	r2, r3
 800328e:	d108      	bne.n	80032a2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	441a      	add	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	441a      	add	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d118      	bne.n	80032e8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	4b15      	ldr	r3, [pc, #84]	@ (8003310 <prvInsertBlockIntoFreeList+0xb0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d00d      	beq.n	80032de <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	441a      	add	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	e008      	b.n	80032f0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80032de:	4b0c      	ldr	r3, [pc, #48]	@ (8003310 <prvInsertBlockIntoFreeList+0xb0>)
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	e003      	b.n	80032f0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d002      	beq.n	80032fe <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80032fe:	bf00      	nop
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	20012d88 	.word	0x20012d88
 8003310:	20012d90 	.word	0x20012d90

08003314 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003318:	4803      	ldr	r0, [pc, #12]	@ (8003328 <_cbSendSystemDesc+0x14>)
 800331a:	f001 fcb9 	bl	8004c90 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800331e:	4803      	ldr	r0, [pc, #12]	@ (800332c <_cbSendSystemDesc+0x18>)
 8003320:	f001 fcb6 	bl	8004c90 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003324:	bf00      	nop
 8003326:	bd80      	pop	{r7, pc}
 8003328:	080053a4 	.word	0x080053a4
 800332c:	080053e8 	.word	0x080053e8

08003330 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003334:	4b06      	ldr	r3, [pc, #24]	@ (8003350 <SEGGER_SYSVIEW_Conf+0x20>)
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	4b05      	ldr	r3, [pc, #20]	@ (8003350 <SEGGER_SYSVIEW_Conf+0x20>)
 800333a:	6819      	ldr	r1, [r3, #0]
 800333c:	4b05      	ldr	r3, [pc, #20]	@ (8003354 <SEGGER_SYSVIEW_Conf+0x24>)
 800333e:	4a06      	ldr	r2, [pc, #24]	@ (8003358 <SEGGER_SYSVIEW_Conf+0x28>)
 8003340:	f001 f92a 	bl	8004598 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003344:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8003348:	f001 f96a 	bl	8004620 <SEGGER_SYSVIEW_SetRAMBase>
}
 800334c:	bf00      	nop
 800334e:	bd80      	pop	{r7, pc}
 8003350:	20000000 	.word	0x20000000
 8003354:	08003315 	.word	0x08003315
 8003358:	08005488 	.word	0x08005488

0800335c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800335c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800335e:	b085      	sub	sp, #20
 8003360:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003362:	2300      	movs	r3, #0
 8003364:	607b      	str	r3, [r7, #4]
 8003366:	e033      	b.n	80033d0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003368:	491e      	ldr	r1, [pc, #120]	@ (80033e4 <_cbSendTaskList+0x88>)
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	491a      	ldr	r1, [pc, #104]	@ (80033e4 <_cbSendTaskList+0x88>)
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	3304      	adds	r3, #4
 8003388:	6819      	ldr	r1, [r3, #0]
 800338a:	4c16      	ldr	r4, [pc, #88]	@ (80033e4 <_cbSendTaskList+0x88>)
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4423      	add	r3, r4
 8003398:	3308      	adds	r3, #8
 800339a:	681c      	ldr	r4, [r3, #0]
 800339c:	4d11      	ldr	r5, [pc, #68]	@ (80033e4 <_cbSendTaskList+0x88>)
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	442b      	add	r3, r5
 80033aa:	330c      	adds	r3, #12
 80033ac:	681d      	ldr	r5, [r3, #0]
 80033ae:	4e0d      	ldr	r6, [pc, #52]	@ (80033e4 <_cbSendTaskList+0x88>)
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4433      	add	r3, r6
 80033bc:	3310      	adds	r3, #16
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	462b      	mov	r3, r5
 80033c4:	4622      	mov	r2, r4
 80033c6:	f000 f979 	bl	80036bc <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3301      	adds	r3, #1
 80033ce:	607b      	str	r3, [r7, #4]
 80033d0:	4b05      	ldr	r3, [pc, #20]	@ (80033e8 <_cbSendTaskList+0x8c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d3c6      	bcc.n	8003368 <_cbSendTaskList+0xc>
  }
}
 80033da:	bf00      	nop
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033e4:	20012da8 	.word	0x20012da8
 80033e8:	20012e48 	.word	0x20012e48

080033ec <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80033ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80033f4:	f7ff f8be 	bl	8002574 <xTaskGetTickCountFromISR>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2200      	movs	r2, #0
 80033fc:	469a      	mov	sl, r3
 80033fe:	4693      	mov	fp, r2
 8003400:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003404:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	f04f 0a00 	mov.w	sl, #0
 8003410:	f04f 0b00 	mov.w	fp, #0
 8003414:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003418:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800341c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003420:	4652      	mov	r2, sl
 8003422:	465b      	mov	r3, fp
 8003424:	1a14      	subs	r4, r2, r0
 8003426:	eb63 0501 	sbc.w	r5, r3, r1
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	f04f 0300 	mov.w	r3, #0
 8003432:	00ab      	lsls	r3, r5, #2
 8003434:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003438:	00a2      	lsls	r2, r4, #2
 800343a:	4614      	mov	r4, r2
 800343c:	461d      	mov	r5, r3
 800343e:	eb14 0800 	adds.w	r8, r4, r0
 8003442:	eb45 0901 	adc.w	r9, r5, r1
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003452:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003456:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800345a:	4690      	mov	r8, r2
 800345c:	4699      	mov	r9, r3
 800345e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003462:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003466:	4610      	mov	r0, r2
 8003468:	4619      	mov	r1, r3
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003474 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af02      	add	r7, sp, #8
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003482:	2205      	movs	r2, #5
 8003484:	492b      	ldr	r1, [pc, #172]	@ (8003534 <SYSVIEW_AddTask+0xc0>)
 8003486:	68b8      	ldr	r0, [r7, #8]
 8003488:	f001 ff2a 	bl	80052e0 <memcmp>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d04b      	beq.n	800352a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003492:	4b29      	ldr	r3, [pc, #164]	@ (8003538 <SYSVIEW_AddTask+0xc4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b07      	cmp	r3, #7
 8003498:	d903      	bls.n	80034a2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800349a:	4828      	ldr	r0, [pc, #160]	@ (800353c <SYSVIEW_AddTask+0xc8>)
 800349c:	f001 fe96 	bl	80051cc <SEGGER_SYSVIEW_Warn>
    return;
 80034a0:	e044      	b.n	800352c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80034a2:	4b25      	ldr	r3, [pc, #148]	@ (8003538 <SYSVIEW_AddTask+0xc4>)
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	4926      	ldr	r1, [pc, #152]	@ (8003540 <SYSVIEW_AddTask+0xcc>)
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80034b6:	4b20      	ldr	r3, [pc, #128]	@ (8003538 <SYSVIEW_AddTask+0xc4>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	4921      	ldr	r1, [pc, #132]	@ (8003540 <SYSVIEW_AddTask+0xcc>)
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	3304      	adds	r3, #4
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80034cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003538 <SYSVIEW_AddTask+0xc4>)
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	491b      	ldr	r1, [pc, #108]	@ (8003540 <SYSVIEW_AddTask+0xcc>)
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	3308      	adds	r3, #8
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80034e2:	4b15      	ldr	r3, [pc, #84]	@ (8003538 <SYSVIEW_AddTask+0xc4>)
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	4916      	ldr	r1, [pc, #88]	@ (8003540 <SYSVIEW_AddTask+0xcc>)
 80034e8:	4613      	mov	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	330c      	adds	r3, #12
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80034f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003538 <SYSVIEW_AddTask+0xc4>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	4910      	ldr	r1, [pc, #64]	@ (8003540 <SYSVIEW_AddTask+0xcc>)
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	3310      	adds	r3, #16
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800350e:	4b0a      	ldr	r3, [pc, #40]	@ (8003538 <SYSVIEW_AddTask+0xc4>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	3301      	adds	r3, #1
 8003514:	4a08      	ldr	r2, [pc, #32]	@ (8003538 <SYSVIEW_AddTask+0xc4>)
 8003516:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	68b9      	ldr	r1, [r7, #8]
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 f8ca 	bl	80036bc <SYSVIEW_SendTaskInfo>
 8003528:	e000      	b.n	800352c <SYSVIEW_AddTask+0xb8>
    return;
 800352a:	bf00      	nop

}
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	080053f8 	.word	0x080053f8
 8003538:	20012e48 	.word	0x20012e48
 800353c:	08005400 	.word	0x08005400
 8003540:	20012da8 	.word	0x20012da8

08003544 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 800354c:	4b59      	ldr	r3, [pc, #356]	@ (80036b4 <SYSVIEW_DeleteTask+0x170>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 80ab 	beq.w	80036ac <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8003556:	2300      	movs	r3, #0
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	e00d      	b.n	8003578 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 800355c:	4956      	ldr	r1, [pc, #344]	@ (80036b8 <SYSVIEW_DeleteTask+0x174>)
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	429a      	cmp	r2, r3
 8003570:	d008      	beq.n	8003584 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	3301      	adds	r3, #1
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	4b4e      	ldr	r3, [pc, #312]	@ (80036b4 <SYSVIEW_DeleteTask+0x170>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	429a      	cmp	r2, r3
 8003580:	d3ec      	bcc.n	800355c <SYSVIEW_DeleteTask+0x18>
 8003582:	e000      	b.n	8003586 <SYSVIEW_DeleteTask+0x42>
      break;
 8003584:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8003586:	4b4b      	ldr	r3, [pc, #300]	@ (80036b4 <SYSVIEW_DeleteTask+0x170>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	3b01      	subs	r3, #1
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	429a      	cmp	r2, r3
 8003590:	d111      	bne.n	80035b6 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4a46      	ldr	r2, [pc, #280]	@ (80036b8 <SYSVIEW_DeleteTask+0x174>)
 800359e:	4413      	add	r3, r2
 80035a0:	2214      	movs	r2, #20
 80035a2:	2100      	movs	r1, #0
 80035a4:	4618      	mov	r0, r3
 80035a6:	f001 feab 	bl	8005300 <memset>
    _NumTasks--;
 80035aa:	4b42      	ldr	r3, [pc, #264]	@ (80036b4 <SYSVIEW_DeleteTask+0x170>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	4a40      	ldr	r2, [pc, #256]	@ (80036b4 <SYSVIEW_DeleteTask+0x170>)
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	e07b      	b.n	80036ae <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80035b6:	4b3f      	ldr	r3, [pc, #252]	@ (80036b4 <SYSVIEW_DeleteTask+0x170>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d276      	bcs.n	80036ae <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80035c0:	4b3c      	ldr	r3, [pc, #240]	@ (80036b4 <SYSVIEW_DeleteTask+0x170>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	1e5a      	subs	r2, r3, #1
 80035c6:	493c      	ldr	r1, [pc, #240]	@ (80036b8 <SYSVIEW_DeleteTask+0x174>)
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	6819      	ldr	r1, [r3, #0]
 80035d4:	4838      	ldr	r0, [pc, #224]	@ (80036b8 <SYSVIEW_DeleteTask+0x174>)
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	4613      	mov	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4403      	add	r3, r0
 80035e2:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 80035e4:	4b33      	ldr	r3, [pc, #204]	@ (80036b4 <SYSVIEW_DeleteTask+0x170>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	1e5a      	subs	r2, r3, #1
 80035ea:	4933      	ldr	r1, [pc, #204]	@ (80036b8 <SYSVIEW_DeleteTask+0x174>)
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	3304      	adds	r3, #4
 80035f8:	6819      	ldr	r1, [r3, #0]
 80035fa:	482f      	ldr	r0, [pc, #188]	@ (80036b8 <SYSVIEW_DeleteTask+0x174>)
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	4613      	mov	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4403      	add	r3, r0
 8003608:	3304      	adds	r3, #4
 800360a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 800360c:	4b29      	ldr	r3, [pc, #164]	@ (80036b4 <SYSVIEW_DeleteTask+0x170>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	1e5a      	subs	r2, r3, #1
 8003612:	4929      	ldr	r1, [pc, #164]	@ (80036b8 <SYSVIEW_DeleteTask+0x174>)
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	3308      	adds	r3, #8
 8003620:	6819      	ldr	r1, [r3, #0]
 8003622:	4825      	ldr	r0, [pc, #148]	@ (80036b8 <SYSVIEW_DeleteTask+0x174>)
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	4613      	mov	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4403      	add	r3, r0
 8003630:	3308      	adds	r3, #8
 8003632:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8003634:	4b1f      	ldr	r3, [pc, #124]	@ (80036b4 <SYSVIEW_DeleteTask+0x170>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	1e5a      	subs	r2, r3, #1
 800363a:	491f      	ldr	r1, [pc, #124]	@ (80036b8 <SYSVIEW_DeleteTask+0x174>)
 800363c:	4613      	mov	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	330c      	adds	r3, #12
 8003648:	6819      	ldr	r1, [r3, #0]
 800364a:	481b      	ldr	r0, [pc, #108]	@ (80036b8 <SYSVIEW_DeleteTask+0x174>)
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	4613      	mov	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4403      	add	r3, r0
 8003658:	330c      	adds	r3, #12
 800365a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 800365c:	4b15      	ldr	r3, [pc, #84]	@ (80036b4 <SYSVIEW_DeleteTask+0x170>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	1e5a      	subs	r2, r3, #1
 8003662:	4915      	ldr	r1, [pc, #84]	@ (80036b8 <SYSVIEW_DeleteTask+0x174>)
 8003664:	4613      	mov	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	3310      	adds	r3, #16
 8003670:	6819      	ldr	r1, [r3, #0]
 8003672:	4811      	ldr	r0, [pc, #68]	@ (80036b8 <SYSVIEW_DeleteTask+0x174>)
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4613      	mov	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4403      	add	r3, r0
 8003680:	3310      	adds	r3, #16
 8003682:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8003684:	4b0b      	ldr	r3, [pc, #44]	@ (80036b4 <SYSVIEW_DeleteTask+0x170>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	1e5a      	subs	r2, r3, #1
 800368a:	4613      	mov	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4a09      	ldr	r2, [pc, #36]	@ (80036b8 <SYSVIEW_DeleteTask+0x174>)
 8003694:	4413      	add	r3, r2
 8003696:	2214      	movs	r2, #20
 8003698:	2100      	movs	r1, #0
 800369a:	4618      	mov	r0, r3
 800369c:	f001 fe30 	bl	8005300 <memset>
    _NumTasks--;
 80036a0:	4b04      	ldr	r3, [pc, #16]	@ (80036b4 <SYSVIEW_DeleteTask+0x170>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	3b01      	subs	r3, #1
 80036a6:	4a03      	ldr	r2, [pc, #12]	@ (80036b4 <SYSVIEW_DeleteTask+0x170>)
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	e000      	b.n	80036ae <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 80036ac:	bf00      	nop
  }
}
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	20012e48 	.word	0x20012e48
 80036b8:	20012da8 	.word	0x20012da8

080036bc <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08a      	sub	sp, #40	@ 0x28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80036ca:	f107 0314 	add.w	r3, r7, #20
 80036ce:	2214      	movs	r2, #20
 80036d0:	2100      	movs	r1, #0
 80036d2:	4618      	mov	r0, r3
 80036d4:	f001 fe14 	bl	8005300 <memset>
  TaskInfo.TaskID     = TaskID;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80036e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ea:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80036ec:	f107 0314 	add.w	r3, r7, #20
 80036f0:	4618      	mov	r0, r3
 80036f2:	f001 f9d5 	bl	8004aa0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80036f6:	bf00      	nop
 80036f8:	3728      	adds	r7, #40	@ 0x28
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <__NVIC_EnableIRQ>:
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	4603      	mov	r3, r0
 8003708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800370a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370e:	2b00      	cmp	r3, #0
 8003710:	db0b      	blt.n	800372a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003712:	79fb      	ldrb	r3, [r7, #7]
 8003714:	f003 021f 	and.w	r2, r3, #31
 8003718:	4907      	ldr	r1, [pc, #28]	@ (8003738 <__NVIC_EnableIRQ+0x38>)
 800371a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371e:	095b      	lsrs	r3, r3, #5
 8003720:	2001      	movs	r0, #1
 8003722:	fa00 f202 	lsl.w	r2, r0, r2
 8003726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	e000e100 	.word	0xe000e100

0800373c <__NVIC_SetPriority>:
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	4603      	mov	r3, r0
 8003744:	6039      	str	r1, [r7, #0]
 8003746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374c:	2b00      	cmp	r3, #0
 800374e:	db0a      	blt.n	8003766 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	b2da      	uxtb	r2, r3
 8003754:	490c      	ldr	r1, [pc, #48]	@ (8003788 <__NVIC_SetPriority+0x4c>)
 8003756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375a:	0112      	lsls	r2, r2, #4
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	440b      	add	r3, r1
 8003760:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003764:	e00a      	b.n	800377c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	b2da      	uxtb	r2, r3
 800376a:	4908      	ldr	r1, [pc, #32]	@ (800378c <__NVIC_SetPriority+0x50>)
 800376c:	79fb      	ldrb	r3, [r7, #7]
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	3b04      	subs	r3, #4
 8003774:	0112      	lsls	r2, r2, #4
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	440b      	add	r3, r1
 800377a:	761a      	strb	r2, [r3, #24]
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	e000e100 	.word	0xe000e100
 800378c:	e000ed00 	.word	0xe000ed00

08003790 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003796:	f001 fd75 	bl	8005284 <SEGGER_SYSVIEW_IsStarted>
 800379a:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80037a2:	f001 f801 	bl	80047a8 <SEGGER_SYSVIEW_Start>
  }
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80037ba:	4b0c      	ldr	r3, [pc, #48]	@ (80037ec <_cbOnUARTRx+0x3c>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d806      	bhi.n	80037d0 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80037c2:	4b0a      	ldr	r3, [pc, #40]	@ (80037ec <_cbOnUARTRx+0x3c>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	3301      	adds	r3, #1
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	4b08      	ldr	r3, [pc, #32]	@ (80037ec <_cbOnUARTRx+0x3c>)
 80037cc:	701a      	strb	r2, [r3, #0]
    goto Done;
 80037ce:	e009      	b.n	80037e4 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80037d0:	f7ff ffde 	bl	8003790 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80037d4:	4b05      	ldr	r3, [pc, #20]	@ (80037ec <_cbOnUARTRx+0x3c>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	4618      	mov	r0, r3
 80037da:	1dfb      	adds	r3, r7, #7
 80037dc:	2201      	movs	r2, #1
 80037de:	4619      	mov	r1, r3
 80037e0:	f000 fb9a 	bl	8003f18 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80037e4:	bf00      	nop
}
 80037e6:	3708      	adds	r7, #8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	20000014 	.word	0x20000014

080037f0 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80037f8:	4b14      	ldr	r3, [pc, #80]	@ (800384c <_cbOnUARTTx+0x5c>)
 80037fa:	785b      	ldrb	r3, [r3, #1]
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d80f      	bhi.n	8003820 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8003800:	4b12      	ldr	r3, [pc, #72]	@ (800384c <_cbOnUARTTx+0x5c>)
 8003802:	785b      	ldrb	r3, [r3, #1]
 8003804:	461a      	mov	r2, r3
 8003806:	4b12      	ldr	r3, [pc, #72]	@ (8003850 <_cbOnUARTTx+0x60>)
 8003808:	5c9a      	ldrb	r2, [r3, r2]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800380e:	4b0f      	ldr	r3, [pc, #60]	@ (800384c <_cbOnUARTTx+0x5c>)
 8003810:	785b      	ldrb	r3, [r3, #1]
 8003812:	3301      	adds	r3, #1
 8003814:	b2da      	uxtb	r2, r3
 8003816:	4b0d      	ldr	r3, [pc, #52]	@ (800384c <_cbOnUARTTx+0x5c>)
 8003818:	705a      	strb	r2, [r3, #1]
    r = 1;
 800381a:	2301      	movs	r3, #1
 800381c:	60fb      	str	r3, [r7, #12]
    goto Done;
 800381e:	e00f      	b.n	8003840 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003820:	4b0a      	ldr	r3, [pc, #40]	@ (800384c <_cbOnUARTTx+0x5c>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	4618      	mov	r0, r3
 800382a:	f000 fa19 	bl	8003c60 <SEGGER_RTT_ReadUpBufferNoLock>
 800382e:	4603      	mov	r3, r0
 8003830:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2b00      	cmp	r3, #0
 8003836:	da02      	bge.n	800383e <_cbOnUARTTx+0x4e>
    r = 0;
 8003838:	2300      	movs	r3, #0
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	e000      	b.n	8003840 <_cbOnUARTTx+0x50>
  }
Done:
 800383e:	bf00      	nop
  return r;
 8003840:	68fb      	ldr	r3, [r7, #12]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20000014 	.word	0x20000014
 8003850:	08005490 	.word	0x08005490

08003854 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 800385c:	4a04      	ldr	r2, [pc, #16]	@ (8003870 <SEGGER_UART_init+0x1c>)
 800385e:	4905      	ldr	r1, [pc, #20]	@ (8003874 <SEGGER_UART_init+0x20>)
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f863 	bl	800392c <HIF_UART_Init>
}
 8003866:	bf00      	nop
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	080037b1 	.word	0x080037b1
 8003874:	080037f1 	.word	0x080037f1

08003878 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800387e:	4b1e      	ldr	r3, [pc, #120]	@ (80038f8 <USART2_IRQHandler+0x80>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b00      	cmp	r3, #0
 800388c:	d011      	beq.n	80038b2 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800388e:	4b1b      	ldr	r3, [pc, #108]	@ (80038fc <USART2_IRQHandler+0x84>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	b2db      	uxtb	r3, r3
 8003894:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f003 030b 	and.w	r3, r3, #11
 800389c:	2b00      	cmp	r3, #0
 800389e:	d108      	bne.n	80038b2 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80038a0:	4b17      	ldr	r3, [pc, #92]	@ (8003900 <USART2_IRQHandler+0x88>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d004      	beq.n	80038b2 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80038a8:	4b15      	ldr	r3, [pc, #84]	@ (8003900 <USART2_IRQHandler+0x88>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	79fa      	ldrb	r2, [r7, #7]
 80038ae:	4610      	mov	r0, r2
 80038b0:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d01a      	beq.n	80038f2 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80038bc:	4b11      	ldr	r3, [pc, #68]	@ (8003904 <USART2_IRQHandler+0x8c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d015      	beq.n	80038f0 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80038c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003904 <USART2_IRQHandler+0x8c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	1dfa      	adds	r2, r7, #7
 80038ca:	4610      	mov	r0, r2
 80038cc:	4798      	blx	r3
 80038ce:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d106      	bne.n	80038e4 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80038d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003908 <USART2_IRQHandler+0x90>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a0b      	ldr	r2, [pc, #44]	@ (8003908 <USART2_IRQHandler+0x90>)
 80038dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	e006      	b.n	80038f2 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80038e4:	4b04      	ldr	r3, [pc, #16]	@ (80038f8 <USART2_IRQHandler+0x80>)
 80038e6:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80038e8:	79fa      	ldrb	r2, [r7, #7]
 80038ea:	4b04      	ldr	r3, [pc, #16]	@ (80038fc <USART2_IRQHandler+0x84>)
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	e000      	b.n	80038f2 <USART2_IRQHandler+0x7a>
      return;
 80038f0:	bf00      	nop
    }
  }
}
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40004400 	.word	0x40004400
 80038fc:	40004404 	.word	0x40004404
 8003900:	20012e4c 	.word	0x20012e4c
 8003904:	20012e50 	.word	0x20012e50
 8003908:	4000440c 	.word	0x4000440c

0800390c <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003910:	4b05      	ldr	r3, [pc, #20]	@ (8003928 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a04      	ldr	r2, [pc, #16]	@ (8003928 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800391a:	6013      	str	r3, [r2, #0]
}
 800391c:	bf00      	nop
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	4000440c 	.word	0x4000440c

0800392c <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003938:	4b2e      	ldr	r3, [pc, #184]	@ (80039f4 <HIF_UART_Init+0xc8>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a2d      	ldr	r2, [pc, #180]	@ (80039f4 <HIF_UART_Init+0xc8>)
 800393e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003942:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003944:	4b2c      	ldr	r3, [pc, #176]	@ (80039f8 <HIF_UART_Init+0xcc>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a2b      	ldr	r2, [pc, #172]	@ (80039f8 <HIF_UART_Init+0xcc>)
 800394a:	f043 0301 	orr.w	r3, r3, #1
 800394e:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8003950:	4b2a      	ldr	r3, [pc, #168]	@ (80039fc <HIF_UART_Init+0xd0>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800395c:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8003964:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003966:	4a25      	ldr	r2, [pc, #148]	@ (80039fc <HIF_UART_Init+0xd0>)
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 800396c:	4b24      	ldr	r3, [pc, #144]	@ (8003a00 <HIF_UART_Init+0xd4>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003978:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8003980:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8003982:	4a1f      	ldr	r2, [pc, #124]	@ (8003a00 <HIF_UART_Init+0xd4>)
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003988:	4b1e      	ldr	r3, [pc, #120]	@ (8003a04 <HIF_UART_Init+0xd8>)
 800398a:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 800398e:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003990:	4b1d      	ldr	r3, [pc, #116]	@ (8003a08 <HIF_UART_Init+0xdc>)
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003996:	4b1d      	ldr	r3, [pc, #116]	@ (8003a0c <HIF_UART_Init+0xe0>)
 8003998:	2280      	movs	r2, #128	@ 0x80
 800399a:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80039a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003a10 <HIF_UART_Init+0xe4>)
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039aa:	3301      	adds	r3, #1
 80039ac:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	085b      	lsrs	r3, r3, #1
 80039b2:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039ba:	d302      	bcc.n	80039c2 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80039bc:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80039c0:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d004      	beq.n	80039d2 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	4a11      	ldr	r2, [pc, #68]	@ (8003a14 <HIF_UART_Init+0xe8>)
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80039d2:	4a11      	ldr	r2, [pc, #68]	@ (8003a18 <HIF_UART_Init+0xec>)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80039d8:	4a10      	ldr	r2, [pc, #64]	@ (8003a1c <HIF_UART_Init+0xf0>)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80039de:	2106      	movs	r1, #6
 80039e0:	2026      	movs	r0, #38	@ 0x26
 80039e2:	f7ff feab 	bl	800373c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80039e6:	2026      	movs	r0, #38	@ 0x26
 80039e8:	f7ff fe8a 	bl	8003700 <__NVIC_EnableIRQ>
}
 80039ec:	bf00      	nop
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40023840 	.word	0x40023840
 80039f8:	40023830 	.word	0x40023830
 80039fc:	40020020 	.word	0x40020020
 8003a00:	40020000 	.word	0x40020000
 8003a04:	4000440c 	.word	0x4000440c
 8003a08:	40004410 	.word	0x40004410
 8003a0c:	40004414 	.word	0x40004414
 8003a10:	0501bd00 	.word	0x0501bd00
 8003a14:	40004408 	.word	0x40004408
 8003a18:	20012e4c 	.word	0x20012e4c
 8003a1c:	20012e50 	.word	0x20012e50

08003a20 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003a26:	4b24      	ldr	r3, [pc, #144]	@ (8003ab8 <_DoInit+0x98>)
 8003a28:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2203      	movs	r2, #3
 8003a2e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2203      	movs	r2, #3
 8003a34:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a20      	ldr	r2, [pc, #128]	@ (8003abc <_DoInit+0x9c>)
 8003a3a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a20      	ldr	r2, [pc, #128]	@ (8003ac0 <_DoInit+0xa0>)
 8003a40:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a48:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a17      	ldr	r2, [pc, #92]	@ (8003abc <_DoInit+0x9c>)
 8003a60:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a17      	ldr	r2, [pc, #92]	@ (8003ac4 <_DoInit+0xa4>)
 8003a66:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2210      	movs	r2, #16
 8003a6c:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3307      	adds	r3, #7
 8003a84:	4a10      	ldr	r2, [pc, #64]	@ (8003ac8 <_DoInit+0xa8>)
 8003a86:	6810      	ldr	r0, [r2, #0]
 8003a88:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003a8a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a0e      	ldr	r2, [pc, #56]	@ (8003acc <_DoInit+0xac>)
 8003a92:	6810      	ldr	r0, [r2, #0]
 8003a94:	6018      	str	r0, [r3, #0]
 8003a96:	8891      	ldrh	r1, [r2, #4]
 8003a98:	7992      	ldrb	r2, [r2, #6]
 8003a9a:	8099      	strh	r1, [r3, #4]
 8003a9c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003a9e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003aa8:	f3bf 8f5f 	dmb	sy
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	20012e54 	.word	0x20012e54
 8003abc:	08005450 	.word	0x08005450
 8003ac0:	20012efc 	.word	0x20012efc
 8003ac4:	200132fc 	.word	0x200132fc
 8003ac8:	0800545c 	.word	0x0800545c
 8003acc:	08005460 	.word	0x08005460

08003ad0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08a      	sub	sp, #40	@ 0x28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003adc:	2300      	movs	r3, #0
 8003ade:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d905      	bls.n	8003b00 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	3b01      	subs	r3, #1
 8003afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003afe:	e007      	b.n	8003b10 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	69b9      	ldr	r1, [r7, #24]
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	1acb      	subs	r3, r1, r3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	bf28      	it	cs
 8003b1e:	4613      	movcs	r3, r2
 8003b20:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003b22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4293      	cmp	r3, r2
 8003b28:	bf28      	it	cs
 8003b2a:	4613      	movcs	r3, r2
 8003b2c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	4413      	add	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003b38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b3a:	68b9      	ldr	r1, [r7, #8]
 8003b3c:	6978      	ldr	r0, [r7, #20]
 8003b3e:	f001 fc0b 	bl	8005358 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003b42:	6a3a      	ldr	r2, [r7, #32]
 8003b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b46:	4413      	add	r3, r2
 8003b48:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4e:	4413      	add	r3, r2
 8003b50:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003b5a:	69fa      	ldr	r2, [r7, #28]
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5e:	4413      	add	r3, r2
 8003b60:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	69fa      	ldr	r2, [r7, #28]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d101      	bne.n	8003b70 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003b70:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	69fa      	ldr	r2, [r7, #28]
 8003b78:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1b2      	bne.n	8003ae6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003b80:	6a3b      	ldr	r3, [r7, #32]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3728      	adds	r7, #40	@ 0x28
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b088      	sub	sp, #32
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	60f8      	str	r0, [r7, #12]
 8003b92:	60b9      	str	r1, [r7, #8]
 8003b94:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d911      	bls.n	8003bd2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	6938      	ldr	r0, [r7, #16]
 8003bbe:	f001 fbcb 	bl	8005358 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003bc2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003bc6:	69fa      	ldr	r2, [r7, #28]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	441a      	add	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003bd0:	e01f      	b.n	8003c12 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	4413      	add	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	68b9      	ldr	r1, [r7, #8]
 8003be4:	6938      	ldr	r0, [r7, #16]
 8003be6:	f001 fbb7 	bl	8005358 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	4619      	mov	r1, r3
 8003c02:	6938      	ldr	r0, [r7, #16]
 8003c04:	f001 fba8 	bl	8005358 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003c08:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	60da      	str	r2, [r3, #12]
}
 8003c12:	bf00      	nop
 8003c14:	3720      	adds	r7, #32
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003c1a:	b480      	push	{r7}
 8003c1c:	b087      	sub	sp, #28
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d808      	bhi.n	8003c48 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	1ad2      	subs	r2, r2, r3
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4413      	add	r3, r2
 8003c42:	3b01      	subs	r3, #1
 8003c44:	617b      	str	r3, [r7, #20]
 8003c46:	e004      	b.n	8003c52 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003c52:	697b      	ldr	r3, [r7, #20]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	371c      	adds	r7, #28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08c      	sub	sp, #48	@ 0x30
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003c6c:	4b3e      	ldr	r3, [pc, #248]	@ (8003d68 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003c6e:	623b      	str	r3, [r7, #32]
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003c7a:	f7ff fed1 	bl	8003a20 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	4613      	mov	r3, r2
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	4413      	add	r3, r2
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	4a37      	ldr	r2, [pc, #220]	@ (8003d68 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003c8c:	4413      	add	r3, r2
 8003c8e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003ca4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d92b      	bls.n	8003d04 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	bf28      	it	cs
 8003cbe:	4613      	movcs	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc8:	4413      	add	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	6939      	ldr	r1, [r7, #16]
 8003cd0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003cd2:	f001 fb41 	bl	8005358 <memcpy>
    NumBytesRead += NumBytesRem;
 8003cd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	4413      	add	r3, r2
 8003cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003cee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d101      	bne.n	8003d04 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003d00:	2300      	movs	r3, #0
 8003d02:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4293      	cmp	r3, r2
 8003d12:	bf28      	it	cs
 8003d14:	4613      	movcs	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d019      	beq.n	8003d52 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d24:	4413      	add	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	6939      	ldr	r1, [r7, #16]
 8003d2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d2e:	f001 fb13 	bl	8005358 <memcpy>
    NumBytesRead += NumBytesRem;
 8003d32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	4413      	add	r3, r2
 8003d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	4413      	add	r3, r2
 8003d40:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003d4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	4413      	add	r3, r2
 8003d50:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d5c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3730      	adds	r7, #48	@ 0x30
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	20012e54 	.word	0x20012e54

08003d6c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08c      	sub	sp, #48	@ 0x30
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003d78:	4b3e      	ldr	r3, [pc, #248]	@ (8003e74 <SEGGER_RTT_ReadNoLock+0x108>)
 8003d7a:	623b      	str	r3, [r7, #32]
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <SEGGER_RTT_ReadNoLock+0x1e>
 8003d86:	f7ff fe4b 	bl	8003a20 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	4413      	add	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	3360      	adds	r3, #96	@ 0x60
 8003d96:	4a37      	ldr	r2, [pc, #220]	@ (8003e74 <SEGGER_RTT_ReadNoLock+0x108>)
 8003d98:	4413      	add	r3, r2
 8003d9a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003dac:	2300      	movs	r3, #0
 8003dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003db0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d92b      	bls.n	8003e10 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	bf28      	it	cs
 8003dca:	4613      	movcs	r3, r2
 8003dcc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd4:	4413      	add	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	6939      	ldr	r1, [r7, #16]
 8003ddc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003dde:	f001 fabb 	bl	8005358 <memcpy>
    NumBytesRead += NumBytesRem;
 8003de2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	4413      	add	r3, r2
 8003de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	4413      	add	r3, r2
 8003df0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003dfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	4413      	add	r3, r2
 8003e00:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d101      	bne.n	8003e10 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	bf28      	it	cs
 8003e20:	4613      	movcs	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d019      	beq.n	8003e5e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e30:	4413      	add	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	6939      	ldr	r1, [r7, #16]
 8003e38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e3a:	f001 fa8d 	bl	8005358 <memcpy>
    NumBytesRead += NumBytesRem;
 8003e3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	4413      	add	r3, r2
 8003e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003e56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8003e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e68:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3730      	adds	r7, #48	@ 0x30
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	20012e54 	.word	0x20012e54

08003e78 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b088      	sub	sp, #32
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	4413      	add	r3, r2
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	3360      	adds	r3, #96	@ 0x60
 8003e94:	4a1f      	ldr	r2, [pc, #124]	@ (8003f14 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8003e96:	4413      	add	r3, r2
 8003e98:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d029      	beq.n	8003ef6 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d82e      	bhi.n	8003f04 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d013      	beq.n	8003ed6 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8003eae:	e029      	b.n	8003f04 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003eb0:	6978      	ldr	r0, [r7, #20]
 8003eb2:	f7ff feb2 	bl	8003c1a <_GetAvailWriteSpace>
 8003eb6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d202      	bcs.n	8003ec6 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003ec4:	e021      	b.n	8003f0a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	69b9      	ldr	r1, [r7, #24]
 8003ece:	6978      	ldr	r0, [r7, #20]
 8003ed0:	f7ff fe5b 	bl	8003b8a <_WriteNoCheck>
    break;
 8003ed4:	e019      	b.n	8003f0a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003ed6:	6978      	ldr	r0, [r7, #20]
 8003ed8:	f7ff fe9f 	bl	8003c1a <_GetAvailWriteSpace>
 8003edc:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	bf28      	it	cs
 8003ee6:	4613      	movcs	r3, r2
 8003ee8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003eea:	69fa      	ldr	r2, [r7, #28]
 8003eec:	69b9      	ldr	r1, [r7, #24]
 8003eee:	6978      	ldr	r0, [r7, #20]
 8003ef0:	f7ff fe4b 	bl	8003b8a <_WriteNoCheck>
    break;
 8003ef4:	e009      	b.n	8003f0a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	69b9      	ldr	r1, [r7, #24]
 8003efa:	6978      	ldr	r0, [r7, #20]
 8003efc:	f7ff fde8 	bl	8003ad0 <_WriteBlocking>
 8003f00:	61f8      	str	r0, [r7, #28]
    break;
 8003f02:	e002      	b.n	8003f0a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003f04:	2300      	movs	r3, #0
 8003f06:	61fb      	str	r3, [r7, #28]
    break;
 8003f08:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003f0a:	69fb      	ldr	r3, [r7, #28]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3720      	adds	r7, #32
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	20012e54 	.word	0x20012e54

08003f18 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003f24:	4b0e      	ldr	r3, [pc, #56]	@ (8003f60 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003f26:	61fb      	str	r3, [r7, #28]
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003f32:	f7ff fd75 	bl	8003a20 <_DoInit>
  SEGGER_RTT_LOCK();
 8003f36:	f3ef 8311 	mrs	r3, BASEPRI
 8003f3a:	f04f 0120 	mov.w	r1, #32
 8003f3e:	f381 8811 	msr	BASEPRI, r1
 8003f42:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	68b9      	ldr	r1, [r7, #8]
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f7ff ff95 	bl	8003e78 <SEGGER_RTT_WriteDownBufferNoLock>
 8003f4e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003f56:	697b      	ldr	r3, [r7, #20]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3720      	adds	r7, #32
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	20012e54 	.word	0x20012e54

08003f64 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
 8003f70:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003f72:	4b3d      	ldr	r3, [pc, #244]	@ (8004068 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003f74:	61bb      	str	r3, [r7, #24]
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003f80:	f7ff fd4e 	bl	8003a20 <_DoInit>
  SEGGER_RTT_LOCK();
 8003f84:	f3ef 8311 	mrs	r3, BASEPRI
 8003f88:	f04f 0120 	mov.w	r1, #32
 8003f8c:	f381 8811 	msr	BASEPRI, r1
 8003f90:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f92:	4b35      	ldr	r3, [pc, #212]	@ (8004068 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003f94:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003f96:	2300      	movs	r3, #0
 8003f98:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003f9a:	6939      	ldr	r1, [r7, #16]
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	1c5a      	adds	r2, r3, #1
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	4413      	add	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	440b      	add	r3, r1
 8003faa:	3304      	adds	r3, #4
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d008      	beq.n	8003fc4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	69fa      	ldr	r2, [r7, #28]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	dbeb      	blt.n	8003f9a <SEGGER_RTT_AllocUpBuffer+0x36>
 8003fc2:	e000      	b.n	8003fc6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003fc4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	69fa      	ldr	r2, [r7, #28]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	da3f      	bge.n	8004050 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003fd0:	6939      	ldr	r1, [r7, #16]
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	4413      	add	r3, r2
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	440b      	add	r3, r1
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003fe4:	6939      	ldr	r1, [r7, #16]
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	1c5a      	adds	r2, r3, #1
 8003fea:	4613      	mov	r3, r2
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	4413      	add	r3, r2
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	440b      	add	r3, r1
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003ffa:	6939      	ldr	r1, [r7, #16]
 8003ffc:	69fa      	ldr	r2, [r7, #28]
 8003ffe:	4613      	mov	r3, r2
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	4413      	add	r3, r2
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	440b      	add	r3, r1
 8004008:	3320      	adds	r3, #32
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800400e:	6939      	ldr	r1, [r7, #16]
 8004010:	69fa      	ldr	r2, [r7, #28]
 8004012:	4613      	mov	r3, r2
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	4413      	add	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	440b      	add	r3, r1
 800401c:	3328      	adds	r3, #40	@ 0x28
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004022:	6939      	ldr	r1, [r7, #16]
 8004024:	69fa      	ldr	r2, [r7, #28]
 8004026:	4613      	mov	r3, r2
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	4413      	add	r3, r2
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	440b      	add	r3, r1
 8004030:	3324      	adds	r3, #36	@ 0x24
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004036:	6939      	ldr	r1, [r7, #16]
 8004038:	69fa      	ldr	r2, [r7, #28]
 800403a:	4613      	mov	r3, r2
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	4413      	add	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	440b      	add	r3, r1
 8004044:	332c      	adds	r3, #44	@ 0x2c
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800404a:	f3bf 8f5f 	dmb	sy
 800404e:	e002      	b.n	8004056 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004050:	f04f 33ff 	mov.w	r3, #4294967295
 8004054:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800405c:	69fb      	ldr	r3, [r7, #28]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3720      	adds	r7, #32
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	20012e54 	.word	0x20012e54

0800406c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800406c:	b580      	push	{r7, lr}
 800406e:	b088      	sub	sp, #32
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
 8004078:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800407a:	4b33      	ldr	r3, [pc, #204]	@ (8004148 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800407c:	61bb      	str	r3, [r7, #24]
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004088:	f7ff fcca 	bl	8003a20 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800408c:	4b2e      	ldr	r3, [pc, #184]	@ (8004148 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800408e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	461a      	mov	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4293      	cmp	r3, r2
 800409a:	d24d      	bcs.n	8004138 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 800409c:	f3ef 8311 	mrs	r3, BASEPRI
 80040a0:	f04f 0120 	mov.w	r1, #32
 80040a4:	f381 8811 	msr	BASEPRI, r1
 80040a8:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d031      	beq.n	8004114 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80040b0:	6979      	ldr	r1, [r7, #20]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	4613      	mov	r3, r2
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	4413      	add	r3, r2
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	440b      	add	r3, r1
 80040be:	3360      	adds	r3, #96	@ 0x60
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80040c4:	6979      	ldr	r1, [r7, #20]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4613      	mov	r3, r2
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	4413      	add	r3, r2
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	440b      	add	r3, r1
 80040d2:	3364      	adds	r3, #100	@ 0x64
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80040d8:	6979      	ldr	r1, [r7, #20]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4613      	mov	r3, r2
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	4413      	add	r3, r2
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	440b      	add	r3, r1
 80040e6:	3368      	adds	r3, #104	@ 0x68
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80040ec:	6979      	ldr	r1, [r7, #20]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4613      	mov	r3, r2
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	4413      	add	r3, r2
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	440b      	add	r3, r1
 80040fa:	3370      	adds	r3, #112	@ 0x70
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8004100:	6979      	ldr	r1, [r7, #20]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	4613      	mov	r3, r2
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	4413      	add	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	440b      	add	r3, r1
 800410e:	336c      	adds	r3, #108	@ 0x6c
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004114:	6979      	ldr	r1, [r7, #20]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4613      	mov	r3, r2
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	4413      	add	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	440b      	add	r3, r1
 8004122:	3374      	adds	r3, #116	@ 0x74
 8004124:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004126:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004128:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004132:	2300      	movs	r3, #0
 8004134:	61fb      	str	r3, [r7, #28]
 8004136:	e002      	b.n	800413e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8004138:	f04f 33ff 	mov.w	r3, #4294967295
 800413c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800413e:	69fb      	ldr	r3, [r7, #28]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3720      	adds	r7, #32
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	20012e54 	.word	0x20012e54

0800414c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004158:	2300      	movs	r3, #0
 800415a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800415c:	e002      	b.n	8004164 <_EncodeStr+0x18>
    Len++;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	3301      	adds	r3, #1
 8004162:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	4413      	add	r3, r2
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1f6      	bne.n	800415e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	429a      	cmp	r2, r3
 8004176:	d901      	bls.n	800417c <_EncodeStr+0x30>
    Len = Limit;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	2bfe      	cmp	r3, #254	@ 0xfe
 8004180:	d806      	bhi.n	8004190 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	60fa      	str	r2, [r7, #12]
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]
 800418e:	e011      	b.n	80041b4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	60fa      	str	r2, [r7, #12]
 8004196:	22ff      	movs	r2, #255	@ 0xff
 8004198:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	1c5a      	adds	r2, r3, #1
 800419e:	60fa      	str	r2, [r7, #12]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	0a19      	lsrs	r1, r3, #8
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	60fa      	str	r2, [r7, #12]
 80041b0:	b2ca      	uxtb	r2, r1
 80041b2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80041b8:	e00a      	b.n	80041d0 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	1c53      	adds	r3, r2, #1
 80041be:	60bb      	str	r3, [r7, #8]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	1c59      	adds	r1, r3, #1
 80041c4:	60f9      	str	r1, [r7, #12]
 80041c6:	7812      	ldrb	r2, [r2, #0]
 80041c8:	701a      	strb	r2, [r3, #0]
    n++;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	3301      	adds	r3, #1
 80041ce:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d3f0      	bcc.n	80041ba <_EncodeStr+0x6e>
  }
  return pPayload;
 80041d8:	68fb      	ldr	r3, [r7, #12]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	371c      	adds	r7, #28
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3304      	adds	r3, #4
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
	...

08004200 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004206:	4b35      	ldr	r3, [pc, #212]	@ (80042dc <_HandleIncomingPacket+0xdc>)
 8004208:	7e1b      	ldrb	r3, [r3, #24]
 800420a:	4618      	mov	r0, r3
 800420c:	1cfb      	adds	r3, r7, #3
 800420e:	2201      	movs	r2, #1
 8004210:	4619      	mov	r1, r3
 8004212:	f7ff fdab 	bl	8003d6c <SEGGER_RTT_ReadNoLock>
 8004216:	4603      	mov	r3, r0
 8004218:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	dd59      	ble.n	80042d4 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8004220:	78fb      	ldrb	r3, [r7, #3]
 8004222:	2b80      	cmp	r3, #128	@ 0x80
 8004224:	d032      	beq.n	800428c <_HandleIncomingPacket+0x8c>
 8004226:	2b80      	cmp	r3, #128	@ 0x80
 8004228:	dc42      	bgt.n	80042b0 <_HandleIncomingPacket+0xb0>
 800422a:	2b07      	cmp	r3, #7
 800422c:	dc16      	bgt.n	800425c <_HandleIncomingPacket+0x5c>
 800422e:	2b00      	cmp	r3, #0
 8004230:	dd3e      	ble.n	80042b0 <_HandleIncomingPacket+0xb0>
 8004232:	3b01      	subs	r3, #1
 8004234:	2b06      	cmp	r3, #6
 8004236:	d83b      	bhi.n	80042b0 <_HandleIncomingPacket+0xb0>
 8004238:	a201      	add	r2, pc, #4	@ (adr r2, 8004240 <_HandleIncomingPacket+0x40>)
 800423a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423e:	bf00      	nop
 8004240:	08004263 	.word	0x08004263
 8004244:	08004269 	.word	0x08004269
 8004248:	0800426f 	.word	0x0800426f
 800424c:	08004275 	.word	0x08004275
 8004250:	0800427b 	.word	0x0800427b
 8004254:	08004281 	.word	0x08004281
 8004258:	08004287 	.word	0x08004287
 800425c:	2b7f      	cmp	r3, #127	@ 0x7f
 800425e:	d034      	beq.n	80042ca <_HandleIncomingPacket+0xca>
 8004260:	e026      	b.n	80042b0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004262:	f000 faa1 	bl	80047a8 <SEGGER_SYSVIEW_Start>
      break;
 8004266:	e035      	b.n	80042d4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004268:	f000 fb5a 	bl	8004920 <SEGGER_SYSVIEW_Stop>
      break;
 800426c:	e032      	b.n	80042d4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800426e:	f000 fd33 	bl	8004cd8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004272:	e02f      	b.n	80042d4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004274:	f000 fcf8 	bl	8004c68 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004278:	e02c      	b.n	80042d4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800427a:	f000 fb77 	bl	800496c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800427e:	e029      	b.n	80042d4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004280:	f000 ff66 	bl	8005150 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004284:	e026      	b.n	80042d4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004286:	f000 ff45 	bl	8005114 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800428a:	e023      	b.n	80042d4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800428c:	4b13      	ldr	r3, [pc, #76]	@ (80042dc <_HandleIncomingPacket+0xdc>)
 800428e:	7e1b      	ldrb	r3, [r3, #24]
 8004290:	4618      	mov	r0, r3
 8004292:	1cfb      	adds	r3, r7, #3
 8004294:	2201      	movs	r2, #1
 8004296:	4619      	mov	r1, r3
 8004298:	f7ff fd68 	bl	8003d6c <SEGGER_RTT_ReadNoLock>
 800429c:	4603      	mov	r3, r0
 800429e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	dd13      	ble.n	80042ce <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80042a6:	78fb      	ldrb	r3, [r7, #3]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 feb3 	bl	8005014 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80042ae:	e00e      	b.n	80042ce <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80042b0:	78fb      	ldrb	r3, [r7, #3]
 80042b2:	b25b      	sxtb	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	da0c      	bge.n	80042d2 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80042b8:	4b08      	ldr	r3, [pc, #32]	@ (80042dc <_HandleIncomingPacket+0xdc>)
 80042ba:	7e1b      	ldrb	r3, [r3, #24]
 80042bc:	4618      	mov	r0, r3
 80042be:	1cfb      	adds	r3, r7, #3
 80042c0:	2201      	movs	r2, #1
 80042c2:	4619      	mov	r1, r3
 80042c4:	f7ff fd52 	bl	8003d6c <SEGGER_RTT_ReadNoLock>
      }
      break;
 80042c8:	e003      	b.n	80042d2 <_HandleIncomingPacket+0xd2>
      break;
 80042ca:	bf00      	nop
 80042cc:	e002      	b.n	80042d4 <_HandleIncomingPacket+0xd4>
      break;
 80042ce:	bf00      	nop
 80042d0:	e000      	b.n	80042d4 <_HandleIncomingPacket+0xd4>
      break;
 80042d2:	bf00      	nop
    }
  }
}
 80042d4:	bf00      	nop
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	20014314 	.word	0x20014314

080042e0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08c      	sub	sp, #48	@ 0x30
 80042e4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80042e6:	2301      	movs	r3, #1
 80042e8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80042ea:	1d3b      	adds	r3, r7, #4
 80042ec:	3301      	adds	r3, #1
 80042ee:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042f4:	4b32      	ldr	r3, [pc, #200]	@ (80043c0 <_TrySendOverflowPacket+0xe0>)
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042fa:	e00b      	b.n	8004314 <_TrySendOverflowPacket+0x34>
 80042fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004302:	1c59      	adds	r1, r3, #1
 8004304:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004306:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	701a      	strb	r2, [r3, #0]
 800430e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004310:	09db      	lsrs	r3, r3, #7
 8004312:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004316:	2b7f      	cmp	r3, #127	@ 0x7f
 8004318:	d8f0      	bhi.n	80042fc <_TrySendOverflowPacket+0x1c>
 800431a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004320:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	701a      	strb	r2, [r3, #0]
 8004326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004328:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800432a:	4b26      	ldr	r3, [pc, #152]	@ (80043c4 <_TrySendOverflowPacket+0xe4>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004330:	4b23      	ldr	r3, [pc, #140]	@ (80043c0 <_TrySendOverflowPacket+0xe0>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	627b      	str	r3, [r7, #36]	@ 0x24
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	623b      	str	r3, [r7, #32]
 8004342:	e00b      	b.n	800435c <_TrySendOverflowPacket+0x7c>
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	b2da      	uxtb	r2, r3
 8004348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434a:	1c59      	adds	r1, r3, #1
 800434c:	6279      	str	r1, [r7, #36]	@ 0x24
 800434e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	701a      	strb	r2, [r3, #0]
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	09db      	lsrs	r3, r3, #7
 800435a:	623b      	str	r3, [r7, #32]
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004360:	d8f0      	bhi.n	8004344 <_TrySendOverflowPacket+0x64>
 8004362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	627a      	str	r2, [r7, #36]	@ 0x24
 8004368:	6a3a      	ldr	r2, [r7, #32]
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	701a      	strb	r2, [r3, #0]
 800436e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004370:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004372:	4b13      	ldr	r3, [pc, #76]	@ (80043c0 <_TrySendOverflowPacket+0xe0>)
 8004374:	785b      	ldrb	r3, [r3, #1]
 8004376:	4618      	mov	r0, r3
 8004378:	1d3b      	adds	r3, r7, #4
 800437a:	69fa      	ldr	r2, [r7, #28]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	461a      	mov	r2, r3
 8004380:	1d3b      	adds	r3, r7, #4
 8004382:	4619      	mov	r1, r3
 8004384:	f7fb ff24 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004388:	4603      	mov	r3, r0
 800438a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800438c:	f7ff fabe 	bl	800390c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d009      	beq.n	80043aa <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004396:	4a0a      	ldr	r2, [pc, #40]	@ (80043c0 <_TrySendOverflowPacket+0xe0>)
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800439c:	4b08      	ldr	r3, [pc, #32]	@ (80043c0 <_TrySendOverflowPacket+0xe0>)
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	4b06      	ldr	r3, [pc, #24]	@ (80043c0 <_TrySendOverflowPacket+0xe0>)
 80043a6:	701a      	strb	r2, [r3, #0]
 80043a8:	e004      	b.n	80043b4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80043aa:	4b05      	ldr	r3, [pc, #20]	@ (80043c0 <_TrySendOverflowPacket+0xe0>)
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	3301      	adds	r3, #1
 80043b0:	4a03      	ldr	r2, [pc, #12]	@ (80043c0 <_TrySendOverflowPacket+0xe0>)
 80043b2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80043b4:	693b      	ldr	r3, [r7, #16]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3730      	adds	r7, #48	@ 0x30
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	20014314 	.word	0x20014314
 80043c4:	e0001004 	.word	0xe0001004

080043c8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08a      	sub	sp, #40	@ 0x28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80043d4:	4b6d      	ldr	r3, [pc, #436]	@ (800458c <_SendPacket+0x1c4>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d010      	beq.n	80043fe <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80043dc:	4b6b      	ldr	r3, [pc, #428]	@ (800458c <_SendPacket+0x1c4>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 80a5 	beq.w	8004530 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80043e6:	4b69      	ldr	r3, [pc, #420]	@ (800458c <_SendPacket+0x1c4>)
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d109      	bne.n	8004402 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80043ee:	f7ff ff77 	bl	80042e0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80043f2:	4b66      	ldr	r3, [pc, #408]	@ (800458c <_SendPacket+0x1c4>)
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	f040 809c 	bne.w	8004534 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80043fc:	e001      	b.n	8004402 <_SendPacket+0x3a>
    goto Send;
 80043fe:	bf00      	nop
 8004400:	e000      	b.n	8004404 <_SendPacket+0x3c>
Send:
 8004402:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b1f      	cmp	r3, #31
 8004408:	d809      	bhi.n	800441e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800440a:	4b60      	ldr	r3, [pc, #384]	@ (800458c <_SendPacket+0x1c4>)
 800440c:	69da      	ldr	r2, [r3, #28]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	fa22 f303 	lsr.w	r3, r2, r3
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	f040 808d 	bne.w	8004538 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b17      	cmp	r3, #23
 8004422:	d807      	bhi.n	8004434 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	3b01      	subs	r3, #1
 8004428:	60fb      	str	r3, [r7, #12]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	b2da      	uxtb	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	701a      	strb	r2, [r3, #0]
 8004432:	e03d      	b.n	80044b0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004440:	d912      	bls.n	8004468 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	09da      	lsrs	r2, r3, #7
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3b01      	subs	r3, #1
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	b2d2      	uxtb	r2, r2
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	b2db      	uxtb	r3, r3
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	3a01      	subs	r2, #1
 800445a:	60fa      	str	r2, [r7, #12]
 800445c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004460:	b2da      	uxtb	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	701a      	strb	r2, [r3, #0]
 8004466:	e006      	b.n	8004476 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	3b01      	subs	r3, #1
 800446c:	60fb      	str	r3, [r7, #12]
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	b2da      	uxtb	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b7f      	cmp	r3, #127	@ 0x7f
 800447a:	d912      	bls.n	80044a2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	09da      	lsrs	r2, r3, #7
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	3b01      	subs	r3, #1
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	b2db      	uxtb	r3, r3
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	3a01      	subs	r2, #1
 8004494:	60fa      	str	r2, [r7, #12]
 8004496:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800449a:	b2da      	uxtb	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	701a      	strb	r2, [r3, #0]
 80044a0:	e006      	b.n	80044b0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	3b01      	subs	r3, #1
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80044b0:	4b37      	ldr	r3, [pc, #220]	@ (8004590 <_SendPacket+0x1c8>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80044b6:	4b35      	ldr	r3, [pc, #212]	@ (800458c <_SendPacket+0x1c4>)
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	623b      	str	r3, [r7, #32]
 80044c8:	e00b      	b.n	80044e2 <_SendPacket+0x11a>
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d0:	1c59      	adds	r1, r3, #1
 80044d2:	6279      	str	r1, [r7, #36]	@ 0x24
 80044d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	701a      	strb	r2, [r3, #0]
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	09db      	lsrs	r3, r3, #7
 80044e0:	623b      	str	r3, [r7, #32]
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80044e6:	d8f0      	bhi.n	80044ca <_SendPacket+0x102>
 80044e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ea:	1c5a      	adds	r2, r3, #1
 80044ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80044ee:	6a3a      	ldr	r2, [r7, #32]
 80044f0:	b2d2      	uxtb	r2, r2
 80044f2:	701a      	strb	r2, [r3, #0]
 80044f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80044f8:	4b24      	ldr	r3, [pc, #144]	@ (800458c <_SendPacket+0x1c4>)
 80044fa:	785b      	ldrb	r3, [r3, #1]
 80044fc:	4618      	mov	r0, r3
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	461a      	mov	r2, r3
 8004506:	68f9      	ldr	r1, [r7, #12]
 8004508:	f7fb fe62 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800450c:	4603      	mov	r3, r0
 800450e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004510:	f7ff f9fc 	bl	800390c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800451a:	4a1c      	ldr	r2, [pc, #112]	@ (800458c <_SendPacket+0x1c4>)
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	60d3      	str	r3, [r2, #12]
 8004520:	e00b      	b.n	800453a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004522:	4b1a      	ldr	r3, [pc, #104]	@ (800458c <_SendPacket+0x1c4>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	3301      	adds	r3, #1
 8004528:	b2da      	uxtb	r2, r3
 800452a:	4b18      	ldr	r3, [pc, #96]	@ (800458c <_SendPacket+0x1c4>)
 800452c:	701a      	strb	r2, [r3, #0]
 800452e:	e004      	b.n	800453a <_SendPacket+0x172>
    goto SendDone;
 8004530:	bf00      	nop
 8004532:	e002      	b.n	800453a <_SendPacket+0x172>
      goto SendDone;
 8004534:	bf00      	nop
 8004536:	e000      	b.n	800453a <_SendPacket+0x172>
      goto SendDone;
 8004538:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800453a:	4b14      	ldr	r3, [pc, #80]	@ (800458c <_SendPacket+0x1c4>)
 800453c:	7e1b      	ldrb	r3, [r3, #24]
 800453e:	4619      	mov	r1, r3
 8004540:	4a14      	ldr	r2, [pc, #80]	@ (8004594 <_SendPacket+0x1cc>)
 8004542:	460b      	mov	r3, r1
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	440b      	add	r3, r1
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	4413      	add	r3, r2
 800454c:	336c      	adds	r3, #108	@ 0x6c
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	4b0e      	ldr	r3, [pc, #56]	@ (800458c <_SendPacket+0x1c4>)
 8004552:	7e1b      	ldrb	r3, [r3, #24]
 8004554:	4618      	mov	r0, r3
 8004556:	490f      	ldr	r1, [pc, #60]	@ (8004594 <_SendPacket+0x1cc>)
 8004558:	4603      	mov	r3, r0
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	4403      	add	r3, r0
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	440b      	add	r3, r1
 8004562:	3370      	adds	r3, #112	@ 0x70
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d00b      	beq.n	8004582 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800456a:	4b08      	ldr	r3, [pc, #32]	@ (800458c <_SendPacket+0x1c4>)
 800456c:	789b      	ldrb	r3, [r3, #2]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d107      	bne.n	8004582 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004572:	4b06      	ldr	r3, [pc, #24]	@ (800458c <_SendPacket+0x1c4>)
 8004574:	2201      	movs	r2, #1
 8004576:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004578:	f7ff fe42 	bl	8004200 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800457c:	4b03      	ldr	r3, [pc, #12]	@ (800458c <_SendPacket+0x1c4>)
 800457e:	2200      	movs	r2, #0
 8004580:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004582:	bf00      	nop
 8004584:	3728      	adds	r7, #40	@ 0x28
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	20014314 	.word	0x20014314
 8004590:	e0001004 	.word	0xe0001004
 8004594:	20012e54 	.word	0x20012e54

08004598 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af02      	add	r7, sp, #8
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
 80045a4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80045a6:	2300      	movs	r3, #0
 80045a8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80045ac:	4917      	ldr	r1, [pc, #92]	@ (800460c <SEGGER_SYSVIEW_Init+0x74>)
 80045ae:	4818      	ldr	r0, [pc, #96]	@ (8004610 <SEGGER_SYSVIEW_Init+0x78>)
 80045b0:	f7ff fcd8 	bl	8003f64 <SEGGER_RTT_AllocUpBuffer>
 80045b4:	4603      	mov	r3, r0
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	4b16      	ldr	r3, [pc, #88]	@ (8004614 <SEGGER_SYSVIEW_Init+0x7c>)
 80045ba:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80045bc:	4b15      	ldr	r3, [pc, #84]	@ (8004614 <SEGGER_SYSVIEW_Init+0x7c>)
 80045be:	785a      	ldrb	r2, [r3, #1]
 80045c0:	4b14      	ldr	r3, [pc, #80]	@ (8004614 <SEGGER_SYSVIEW_Init+0x7c>)
 80045c2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80045c4:	4b13      	ldr	r3, [pc, #76]	@ (8004614 <SEGGER_SYSVIEW_Init+0x7c>)
 80045c6:	7e1b      	ldrb	r3, [r3, #24]
 80045c8:	4618      	mov	r0, r3
 80045ca:	2300      	movs	r3, #0
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	2308      	movs	r3, #8
 80045d0:	4a11      	ldr	r2, [pc, #68]	@ (8004618 <SEGGER_SYSVIEW_Init+0x80>)
 80045d2:	490f      	ldr	r1, [pc, #60]	@ (8004610 <SEGGER_SYSVIEW_Init+0x78>)
 80045d4:	f7ff fd4a 	bl	800406c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80045d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004614 <SEGGER_SYSVIEW_Init+0x7c>)
 80045da:	2200      	movs	r2, #0
 80045dc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80045de:	4b0f      	ldr	r3, [pc, #60]	@ (800461c <SEGGER_SYSVIEW_Init+0x84>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a0c      	ldr	r2, [pc, #48]	@ (8004614 <SEGGER_SYSVIEW_Init+0x7c>)
 80045e4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80045e6:	4a0b      	ldr	r2, [pc, #44]	@ (8004614 <SEGGER_SYSVIEW_Init+0x7c>)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80045ec:	4a09      	ldr	r2, [pc, #36]	@ (8004614 <SEGGER_SYSVIEW_Init+0x7c>)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80045f2:	4a08      	ldr	r2, [pc, #32]	@ (8004614 <SEGGER_SYSVIEW_Init+0x7c>)
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80045f8:	4a06      	ldr	r2, [pc, #24]	@ (8004614 <SEGGER_SYSVIEW_Init+0x7c>)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80045fe:	4b05      	ldr	r3, [pc, #20]	@ (8004614 <SEGGER_SYSVIEW_Init+0x7c>)
 8004600:	2200      	movs	r2, #0
 8004602:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004604:	bf00      	nop
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	2001330c 	.word	0x2001330c
 8004610:	08005468 	.word	0x08005468
 8004614:	20014314 	.word	0x20014314
 8004618:	2001430c 	.word	0x2001430c
 800461c:	e0001004 	.word	0xe0001004

08004620 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004628:	4a04      	ldr	r2, [pc, #16]	@ (800463c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6113      	str	r3, [r2, #16]
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	20014314 	.word	0x20014314

08004640 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004648:	f3ef 8311 	mrs	r3, BASEPRI
 800464c:	f04f 0120 	mov.w	r1, #32
 8004650:	f381 8811 	msr	BASEPRI, r1
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	4808      	ldr	r0, [pc, #32]	@ (8004678 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004658:	f7ff fdc5 	bl	80041e6 <_PreparePacket>
 800465c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	68b9      	ldr	r1, [r7, #8]
 8004662:	68b8      	ldr	r0, [r7, #8]
 8004664:	f7ff feb0 	bl	80043c8 <_SendPacket>
  RECORD_END();
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f383 8811 	msr	BASEPRI, r3
}
 800466e:	bf00      	nop
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	20014344 	.word	0x20014344

0800467c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800467c:	b580      	push	{r7, lr}
 800467e:	b088      	sub	sp, #32
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004686:	f3ef 8311 	mrs	r3, BASEPRI
 800468a:	f04f 0120 	mov.w	r1, #32
 800468e:	f381 8811 	msr	BASEPRI, r1
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	4816      	ldr	r0, [pc, #88]	@ (80046f0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004696:	f7ff fda6 	bl	80041e6 <_PreparePacket>
 800469a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	61fb      	str	r3, [r7, #28]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	61bb      	str	r3, [r7, #24]
 80046a8:	e00b      	b.n	80046c2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	1c59      	adds	r1, r3, #1
 80046b2:	61f9      	str	r1, [r7, #28]
 80046b4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	701a      	strb	r2, [r3, #0]
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	09db      	lsrs	r3, r3, #7
 80046c0:	61bb      	str	r3, [r7, #24]
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80046c6:	d8f0      	bhi.n	80046aa <SEGGER_SYSVIEW_RecordU32+0x2e>
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	1c5a      	adds	r2, r3, #1
 80046cc:	61fa      	str	r2, [r7, #28]
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	701a      	strb	r2, [r3, #0]
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	68f9      	ldr	r1, [r7, #12]
 80046dc:	6938      	ldr	r0, [r7, #16]
 80046de:	f7ff fe73 	bl	80043c8 <_SendPacket>
  RECORD_END();
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f383 8811 	msr	BASEPRI, r3
}
 80046e8:	bf00      	nop
 80046ea:	3720      	adds	r7, #32
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	20014344 	.word	0x20014344

080046f4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08c      	sub	sp, #48	@ 0x30
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004700:	f3ef 8311 	mrs	r3, BASEPRI
 8004704:	f04f 0120 	mov.w	r1, #32
 8004708:	f381 8811 	msr	BASEPRI, r1
 800470c:	61fb      	str	r3, [r7, #28]
 800470e:	4825      	ldr	r0, [pc, #148]	@ (80047a4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004710:	f7ff fd69 	bl	80041e6 <_PreparePacket>
 8004714:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004722:	e00b      	b.n	800473c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004726:	b2da      	uxtb	r2, r3
 8004728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800472a:	1c59      	adds	r1, r3, #1
 800472c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800472e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004732:	b2d2      	uxtb	r2, r2
 8004734:	701a      	strb	r2, [r3, #0]
 8004736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004738:	09db      	lsrs	r3, r3, #7
 800473a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800473c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800473e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004740:	d8f0      	bhi.n	8004724 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004744:	1c5a      	adds	r2, r3, #1
 8004746:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004748:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	701a      	strb	r2, [r3, #0]
 800474e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004750:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	627b      	str	r3, [r7, #36]	@ 0x24
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	623b      	str	r3, [r7, #32]
 800475a:	e00b      	b.n	8004774 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	b2da      	uxtb	r2, r3
 8004760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004762:	1c59      	adds	r1, r3, #1
 8004764:	6279      	str	r1, [r7, #36]	@ 0x24
 8004766:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	701a      	strb	r2, [r3, #0]
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	09db      	lsrs	r3, r3, #7
 8004772:	623b      	str	r3, [r7, #32]
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	2b7f      	cmp	r3, #127	@ 0x7f
 8004778:	d8f0      	bhi.n	800475c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800477a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477c:	1c5a      	adds	r2, r3, #1
 800477e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004780:	6a3a      	ldr	r2, [r7, #32]
 8004782:	b2d2      	uxtb	r2, r2
 8004784:	701a      	strb	r2, [r3, #0]
 8004786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004788:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	6979      	ldr	r1, [r7, #20]
 800478e:	69b8      	ldr	r0, [r7, #24]
 8004790:	f7ff fe1a 	bl	80043c8 <_SendPacket>
  RECORD_END();
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	f383 8811 	msr	BASEPRI, r3
}
 800479a:	bf00      	nop
 800479c:	3730      	adds	r7, #48	@ 0x30
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	20014344 	.word	0x20014344

080047a8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08c      	sub	sp, #48	@ 0x30
 80047ac:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80047ae:	4b59      	ldr	r3, [pc, #356]	@ (8004914 <SEGGER_SYSVIEW_Start+0x16c>)
 80047b0:	2201      	movs	r2, #1
 80047b2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80047b4:	f3ef 8311 	mrs	r3, BASEPRI
 80047b8:	f04f 0120 	mov.w	r1, #32
 80047bc:	f381 8811 	msr	BASEPRI, r1
 80047c0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80047c2:	4b54      	ldr	r3, [pc, #336]	@ (8004914 <SEGGER_SYSVIEW_Start+0x16c>)
 80047c4:	785b      	ldrb	r3, [r3, #1]
 80047c6:	220a      	movs	r2, #10
 80047c8:	4953      	ldr	r1, [pc, #332]	@ (8004918 <SEGGER_SYSVIEW_Start+0x170>)
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fb fd00 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80047d6:	f7ff f899 	bl	800390c <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80047da:	200a      	movs	r0, #10
 80047dc:	f7ff ff30 	bl	8004640 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80047e0:	f3ef 8311 	mrs	r3, BASEPRI
 80047e4:	f04f 0120 	mov.w	r1, #32
 80047e8:	f381 8811 	msr	BASEPRI, r1
 80047ec:	60bb      	str	r3, [r7, #8]
 80047ee:	484b      	ldr	r0, [pc, #300]	@ (800491c <SEGGER_SYSVIEW_Start+0x174>)
 80047f0:	f7ff fcf9 	bl	80041e6 <_PreparePacket>
 80047f4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047fe:	4b45      	ldr	r3, [pc, #276]	@ (8004914 <SEGGER_SYSVIEW_Start+0x16c>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004804:	e00b      	b.n	800481e <SEGGER_SYSVIEW_Start+0x76>
 8004806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004808:	b2da      	uxtb	r2, r3
 800480a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800480c:	1c59      	adds	r1, r3, #1
 800480e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004810:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004814:	b2d2      	uxtb	r2, r2
 8004816:	701a      	strb	r2, [r3, #0]
 8004818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800481a:	09db      	lsrs	r3, r3, #7
 800481c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800481e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004820:	2b7f      	cmp	r3, #127	@ 0x7f
 8004822:	d8f0      	bhi.n	8004806 <SEGGER_SYSVIEW_Start+0x5e>
 8004824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800482a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	701a      	strb	r2, [r3, #0]
 8004830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004832:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	627b      	str	r3, [r7, #36]	@ 0x24
 8004838:	4b36      	ldr	r3, [pc, #216]	@ (8004914 <SEGGER_SYSVIEW_Start+0x16c>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	623b      	str	r3, [r7, #32]
 800483e:	e00b      	b.n	8004858 <SEGGER_SYSVIEW_Start+0xb0>
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	b2da      	uxtb	r2, r3
 8004844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004846:	1c59      	adds	r1, r3, #1
 8004848:	6279      	str	r1, [r7, #36]	@ 0x24
 800484a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	701a      	strb	r2, [r3, #0]
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	09db      	lsrs	r3, r3, #7
 8004856:	623b      	str	r3, [r7, #32]
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	2b7f      	cmp	r3, #127	@ 0x7f
 800485c:	d8f0      	bhi.n	8004840 <SEGGER_SYSVIEW_Start+0x98>
 800485e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004860:	1c5a      	adds	r2, r3, #1
 8004862:	627a      	str	r2, [r7, #36]	@ 0x24
 8004864:	6a3a      	ldr	r2, [r7, #32]
 8004866:	b2d2      	uxtb	r2, r2
 8004868:	701a      	strb	r2, [r3, #0]
 800486a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	61fb      	str	r3, [r7, #28]
 8004872:	4b28      	ldr	r3, [pc, #160]	@ (8004914 <SEGGER_SYSVIEW_Start+0x16c>)
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	61bb      	str	r3, [r7, #24]
 8004878:	e00b      	b.n	8004892 <SEGGER_SYSVIEW_Start+0xea>
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	b2da      	uxtb	r2, r3
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	1c59      	adds	r1, r3, #1
 8004882:	61f9      	str	r1, [r7, #28]
 8004884:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	701a      	strb	r2, [r3, #0]
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	09db      	lsrs	r3, r3, #7
 8004890:	61bb      	str	r3, [r7, #24]
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	2b7f      	cmp	r3, #127	@ 0x7f
 8004896:	d8f0      	bhi.n	800487a <SEGGER_SYSVIEW_Start+0xd2>
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	1c5a      	adds	r2, r3, #1
 800489c:	61fa      	str	r2, [r7, #28]
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	701a      	strb	r2, [r3, #0]
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	2300      	movs	r3, #0
 80048ae:	613b      	str	r3, [r7, #16]
 80048b0:	e00b      	b.n	80048ca <SEGGER_SYSVIEW_Start+0x122>
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	b2da      	uxtb	r2, r3
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	1c59      	adds	r1, r3, #1
 80048ba:	6179      	str	r1, [r7, #20]
 80048bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80048c0:	b2d2      	uxtb	r2, r2
 80048c2:	701a      	strb	r2, [r3, #0]
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	09db      	lsrs	r3, r3, #7
 80048c8:	613b      	str	r3, [r7, #16]
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80048ce:	d8f0      	bhi.n	80048b2 <SEGGER_SYSVIEW_Start+0x10a>
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	1c5a      	adds	r2, r3, #1
 80048d4:	617a      	str	r2, [r7, #20]
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	b2d2      	uxtb	r2, r2
 80048da:	701a      	strb	r2, [r3, #0]
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80048e0:	2218      	movs	r2, #24
 80048e2:	6839      	ldr	r1, [r7, #0]
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f7ff fd6f 	bl	80043c8 <_SendPacket>
      RECORD_END();
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80048f0:	4b08      	ldr	r3, [pc, #32]	@ (8004914 <SEGGER_SYSVIEW_Start+0x16c>)
 80048f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d002      	beq.n	80048fe <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80048f8:	4b06      	ldr	r3, [pc, #24]	@ (8004914 <SEGGER_SYSVIEW_Start+0x16c>)
 80048fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80048fe:	f000 f9eb 	bl	8004cd8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004902:	f000 f9b1 	bl	8004c68 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004906:	f000 fc23 	bl	8005150 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800490a:	bf00      	nop
 800490c:	3730      	adds	r7, #48	@ 0x30
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	20014314 	.word	0x20014314
 8004918:	08005494 	.word	0x08005494
 800491c:	20014344 	.word	0x20014344

08004920 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004926:	f3ef 8311 	mrs	r3, BASEPRI
 800492a:	f04f 0120 	mov.w	r1, #32
 800492e:	f381 8811 	msr	BASEPRI, r1
 8004932:	607b      	str	r3, [r7, #4]
 8004934:	480b      	ldr	r0, [pc, #44]	@ (8004964 <SEGGER_SYSVIEW_Stop+0x44>)
 8004936:	f7ff fc56 	bl	80041e6 <_PreparePacket>
 800493a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800493c:	4b0a      	ldr	r3, [pc, #40]	@ (8004968 <SEGGER_SYSVIEW_Stop+0x48>)
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d007      	beq.n	8004954 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004944:	220b      	movs	r2, #11
 8004946:	6839      	ldr	r1, [r7, #0]
 8004948:	6838      	ldr	r0, [r7, #0]
 800494a:	f7ff fd3d 	bl	80043c8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800494e:	4b06      	ldr	r3, [pc, #24]	@ (8004968 <SEGGER_SYSVIEW_Stop+0x48>)
 8004950:	2200      	movs	r2, #0
 8004952:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f383 8811 	msr	BASEPRI, r3
}
 800495a:	bf00      	nop
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	20014344 	.word	0x20014344
 8004968:	20014314 	.word	0x20014314

0800496c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800496c:	b580      	push	{r7, lr}
 800496e:	b08c      	sub	sp, #48	@ 0x30
 8004970:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004972:	f3ef 8311 	mrs	r3, BASEPRI
 8004976:	f04f 0120 	mov.w	r1, #32
 800497a:	f381 8811 	msr	BASEPRI, r1
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	4845      	ldr	r0, [pc, #276]	@ (8004a98 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004982:	f7ff fc30 	bl	80041e6 <_PreparePacket>
 8004986:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004990:	4b42      	ldr	r3, [pc, #264]	@ (8004a9c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004996:	e00b      	b.n	80049b0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800499a:	b2da      	uxtb	r2, r3
 800499c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800499e:	1c59      	adds	r1, r3, #1
 80049a0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80049a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	701a      	strb	r2, [r3, #0]
 80049aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ac:	09db      	lsrs	r3, r3, #7
 80049ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80049b4:	d8f0      	bhi.n	8004998 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80049b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]
 80049c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049c4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80049ca:	4b34      	ldr	r3, [pc, #208]	@ (8004a9c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	623b      	str	r3, [r7, #32]
 80049d0:	e00b      	b.n	80049ea <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d8:	1c59      	adds	r1, r3, #1
 80049da:	6279      	str	r1, [r7, #36]	@ 0x24
 80049dc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80049e0:	b2d2      	uxtb	r2, r2
 80049e2:	701a      	strb	r2, [r3, #0]
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	09db      	lsrs	r3, r3, #7
 80049e8:	623b      	str	r3, [r7, #32]
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80049ee:	d8f0      	bhi.n	80049d2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80049f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80049f6:	6a3a      	ldr	r2, [r7, #32]
 80049f8:	b2d2      	uxtb	r2, r2
 80049fa:	701a      	strb	r2, [r3, #0]
 80049fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	61fb      	str	r3, [r7, #28]
 8004a04:	4b25      	ldr	r3, [pc, #148]	@ (8004a9c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	61bb      	str	r3, [r7, #24]
 8004a0a:	e00b      	b.n	8004a24 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	1c59      	adds	r1, r3, #1
 8004a14:	61f9      	str	r1, [r7, #28]
 8004a16:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	09db      	lsrs	r3, r3, #7
 8004a22:	61bb      	str	r3, [r7, #24]
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a28:	d8f0      	bhi.n	8004a0c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	61fa      	str	r2, [r7, #28]
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	701a      	strb	r2, [r3, #0]
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	617b      	str	r3, [r7, #20]
 8004a3e:	2300      	movs	r3, #0
 8004a40:	613b      	str	r3, [r7, #16]
 8004a42:	e00b      	b.n	8004a5c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	1c59      	adds	r1, r3, #1
 8004a4c:	6179      	str	r1, [r7, #20]
 8004a4e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a52:	b2d2      	uxtb	r2, r2
 8004a54:	701a      	strb	r2, [r3, #0]
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	09db      	lsrs	r3, r3, #7
 8004a5a:	613b      	str	r3, [r7, #16]
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a60:	d8f0      	bhi.n	8004a44 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	617a      	str	r2, [r7, #20]
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	b2d2      	uxtb	r2, r2
 8004a6c:	701a      	strb	r2, [r3, #0]
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004a72:	2218      	movs	r2, #24
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	68b8      	ldr	r0, [r7, #8]
 8004a78:	f7ff fca6 	bl	80043c8 <_SendPacket>
  RECORD_END();
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004a82:	4b06      	ldr	r3, [pc, #24]	@ (8004a9c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d002      	beq.n	8004a90 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004a8a:	4b04      	ldr	r3, [pc, #16]	@ (8004a9c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8e:	4798      	blx	r3
  }
}
 8004a90:	bf00      	nop
 8004a92:	3730      	adds	r7, #48	@ 0x30
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	20014344 	.word	0x20014344
 8004a9c:	20014314 	.word	0x20014314

08004aa0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b092      	sub	sp, #72	@ 0x48
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004aa8:	f3ef 8311 	mrs	r3, BASEPRI
 8004aac:	f04f 0120 	mov.w	r1, #32
 8004ab0:	f381 8811 	msr	BASEPRI, r1
 8004ab4:	617b      	str	r3, [r7, #20]
 8004ab6:	486a      	ldr	r0, [pc, #424]	@ (8004c60 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004ab8:	f7ff fb95 	bl	80041e6 <_PreparePacket>
 8004abc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	4b66      	ldr	r3, [pc, #408]	@ (8004c64 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ad2:	e00b      	b.n	8004aec <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004ad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ada:	1c59      	adds	r1, r3, #1
 8004adc:	6479      	str	r1, [r7, #68]	@ 0x44
 8004ade:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	701a      	strb	r2, [r3, #0]
 8004ae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ae8:	09db      	lsrs	r3, r3, #7
 8004aea:	643b      	str	r3, [r7, #64]	@ 0x40
 8004aec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004aee:	2b7f      	cmp	r3, #127	@ 0x7f
 8004af0:	d8f0      	bhi.n	8004ad4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004af2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004af4:	1c5a      	adds	r2, r3, #1
 8004af6:	647a      	str	r2, [r7, #68]	@ 0x44
 8004af8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	701a      	strb	r2, [r3, #0]
 8004afe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b00:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b0c:	e00b      	b.n	8004b26 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b14:	1c59      	adds	r1, r3, #1
 8004b16:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004b18:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	701a      	strb	r2, [r3, #0]
 8004b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b22:	09db      	lsrs	r3, r3, #7
 8004b24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b28:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b2a:	d8f0      	bhi.n	8004b0e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b2e:	1c5a      	adds	r2, r3, #1
 8004b30:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004b32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	701a      	strb	r2, [r3, #0]
 8004b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b3a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	2220      	movs	r2, #32
 8004b42:	4619      	mov	r1, r3
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f7ff fb01 	bl	800414c <_EncodeStr>
 8004b4a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004b4c:	2209      	movs	r2, #9
 8004b4e:	68f9      	ldr	r1, [r7, #12]
 8004b50:	6938      	ldr	r0, [r7, #16]
 8004b52:	f7ff fc39 	bl	80043c8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	4b40      	ldr	r3, [pc, #256]	@ (8004c64 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b6a:	e00b      	b.n	8004b84 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b72:	1c59      	adds	r1, r3, #1
 8004b74:	6379      	str	r1, [r7, #52]	@ 0x34
 8004b76:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	701a      	strb	r2, [r3, #0]
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b80:	09db      	lsrs	r3, r3, #7
 8004b82:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b86:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b88:	d8f0      	bhi.n	8004b6c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b8c:	1c5a      	adds	r2, r3, #1
 8004b8e:	637a      	str	r2, [r7, #52]	@ 0x34
 8004b90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	701a      	strb	r2, [r3, #0]
 8004b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b98:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ba4:	e00b      	b.n	8004bbe <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bac:	1c59      	adds	r1, r3, #1
 8004bae:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004bb0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	701a      	strb	r2, [r3, #0]
 8004bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bba:	09db      	lsrs	r3, r3, #7
 8004bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bc2:	d8f0      	bhi.n	8004ba6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc6:	1c5a      	adds	r2, r3, #1
 8004bc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bcc:	b2d2      	uxtb	r2, r2
 8004bce:	701a      	strb	r2, [r3, #0]
 8004bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	623b      	str	r3, [r7, #32]
 8004bde:	e00b      	b.n	8004bf8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be6:	1c59      	adds	r1, r3, #1
 8004be8:	6279      	str	r1, [r7, #36]	@ 0x24
 8004bea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004bee:	b2d2      	uxtb	r2, r2
 8004bf0:	701a      	strb	r2, [r3, #0]
 8004bf2:	6a3b      	ldr	r3, [r7, #32]
 8004bf4:	09db      	lsrs	r3, r3, #7
 8004bf6:	623b      	str	r3, [r7, #32]
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bfc:	d8f0      	bhi.n	8004be0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c04:	6a3a      	ldr	r2, [r7, #32]
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	61fb      	str	r3, [r7, #28]
 8004c12:	2300      	movs	r3, #0
 8004c14:	61bb      	str	r3, [r7, #24]
 8004c16:	e00b      	b.n	8004c30 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	b2da      	uxtb	r2, r3
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	1c59      	adds	r1, r3, #1
 8004c20:	61f9      	str	r1, [r7, #28]
 8004c22:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c26:	b2d2      	uxtb	r2, r2
 8004c28:	701a      	strb	r2, [r3, #0]
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	09db      	lsrs	r3, r3, #7
 8004c2e:	61bb      	str	r3, [r7, #24]
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c34:	d8f0      	bhi.n	8004c18 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	1c5a      	adds	r2, r3, #1
 8004c3a:	61fa      	str	r2, [r7, #28]
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	b2d2      	uxtb	r2, r2
 8004c40:	701a      	strb	r2, [r3, #0]
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004c46:	2215      	movs	r2, #21
 8004c48:	68f9      	ldr	r1, [r7, #12]
 8004c4a:	6938      	ldr	r0, [r7, #16]
 8004c4c:	f7ff fbbc 	bl	80043c8 <_SendPacket>
  RECORD_END();
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f383 8811 	msr	BASEPRI, r3
}
 8004c56:	bf00      	nop
 8004c58:	3748      	adds	r7, #72	@ 0x48
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20014344 	.word	0x20014344
 8004c64:	20014314 	.word	0x20014314

08004c68 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004c6c:	4b07      	ldr	r3, [pc, #28]	@ (8004c8c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d008      	beq.n	8004c86 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004c74:	4b05      	ldr	r3, [pc, #20]	@ (8004c8c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004c7e:	4b03      	ldr	r3, [pc, #12]	@ (8004c8c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	4798      	blx	r3
  }
}
 8004c86:	bf00      	nop
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20014314 	.word	0x20014314

08004c90 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c98:	f3ef 8311 	mrs	r3, BASEPRI
 8004c9c:	f04f 0120 	mov.w	r1, #32
 8004ca0:	f381 8811 	msr	BASEPRI, r1
 8004ca4:	617b      	str	r3, [r7, #20]
 8004ca6:	480b      	ldr	r0, [pc, #44]	@ (8004cd4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004ca8:	f7ff fa9d 	bl	80041e6 <_PreparePacket>
 8004cac:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004cae:	2280      	movs	r2, #128	@ 0x80
 8004cb0:	6879      	ldr	r1, [r7, #4]
 8004cb2:	6938      	ldr	r0, [r7, #16]
 8004cb4:	f7ff fa4a 	bl	800414c <_EncodeStr>
 8004cb8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004cba:	220e      	movs	r2, #14
 8004cbc:	68f9      	ldr	r1, [r7, #12]
 8004cbe:	6938      	ldr	r0, [r7, #16]
 8004cc0:	f7ff fb82 	bl	80043c8 <_SendPacket>
  RECORD_END();
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f383 8811 	msr	BASEPRI, r3
}
 8004cca:	bf00      	nop
 8004ccc:	3718      	adds	r7, #24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20014344 	.word	0x20014344

08004cd8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004cd8:	b590      	push	{r4, r7, lr}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004cde:	4b15      	ldr	r3, [pc, #84]	@ (8004d34 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d01a      	beq.n	8004d1c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004ce6:	4b13      	ldr	r3, [pc, #76]	@ (8004d34 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d015      	beq.n	8004d1c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004cf0:	4b10      	ldr	r3, [pc, #64]	@ (8004d34 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4798      	blx	r3
 8004cf8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004cfc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004cfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	000a      	movs	r2, r1
 8004d0c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004d0e:	4613      	mov	r3, r2
 8004d10:	461a      	mov	r2, r3
 8004d12:	4621      	mov	r1, r4
 8004d14:	200d      	movs	r0, #13
 8004d16:	f7ff fced 	bl	80046f4 <SEGGER_SYSVIEW_RecordU32x2>
 8004d1a:	e006      	b.n	8004d2a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004d1c:	4b06      	ldr	r3, [pc, #24]	@ (8004d38 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4619      	mov	r1, r3
 8004d22:	200c      	movs	r0, #12
 8004d24:	f7ff fcaa 	bl	800467c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004d28:	bf00      	nop
 8004d2a:	bf00      	nop
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd90      	pop	{r4, r7, pc}
 8004d32:	bf00      	nop
 8004d34:	20014314 	.word	0x20014314
 8004d38:	e0001004 	.word	0xe0001004

08004d3c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004d42:	f3ef 8311 	mrs	r3, BASEPRI
 8004d46:	f04f 0120 	mov.w	r1, #32
 8004d4a:	f381 8811 	msr	BASEPRI, r1
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	4819      	ldr	r0, [pc, #100]	@ (8004db8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004d52:	f7ff fa48 	bl	80041e6 <_PreparePacket>
 8004d56:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004d5c:	4b17      	ldr	r3, [pc, #92]	@ (8004dbc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d64:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	617b      	str	r3, [r7, #20]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	613b      	str	r3, [r7, #16]
 8004d6e:	e00b      	b.n	8004d88 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	b2da      	uxtb	r2, r3
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	1c59      	adds	r1, r3, #1
 8004d78:	6179      	str	r1, [r7, #20]
 8004d7a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	701a      	strb	r2, [r3, #0]
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	09db      	lsrs	r3, r3, #7
 8004d86:	613b      	str	r3, [r7, #16]
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d8c:	d8f0      	bhi.n	8004d70 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	617a      	str	r2, [r7, #20]
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	b2d2      	uxtb	r2, r2
 8004d98:	701a      	strb	r2, [r3, #0]
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004d9e:	2202      	movs	r2, #2
 8004da0:	6879      	ldr	r1, [r7, #4]
 8004da2:	68b8      	ldr	r0, [r7, #8]
 8004da4:	f7ff fb10 	bl	80043c8 <_SendPacket>
  RECORD_END();
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f383 8811 	msr	BASEPRI, r3
}
 8004dae:	bf00      	nop
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20014344 	.word	0x20014344
 8004dbc:	e000ed04 	.word	0xe000ed04

08004dc0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004dc6:	f3ef 8311 	mrs	r3, BASEPRI
 8004dca:	f04f 0120 	mov.w	r1, #32
 8004dce:	f381 8811 	msr	BASEPRI, r1
 8004dd2:	607b      	str	r3, [r7, #4]
 8004dd4:	4807      	ldr	r0, [pc, #28]	@ (8004df4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004dd6:	f7ff fa06 	bl	80041e6 <_PreparePacket>
 8004dda:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004ddc:	2203      	movs	r2, #3
 8004dde:	6839      	ldr	r1, [r7, #0]
 8004de0:	6838      	ldr	r0, [r7, #0]
 8004de2:	f7ff faf1 	bl	80043c8 <_SendPacket>
  RECORD_END();
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f383 8811 	msr	BASEPRI, r3
}
 8004dec:	bf00      	nop
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	20014344 	.word	0x20014344

08004df8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004dfe:	f3ef 8311 	mrs	r3, BASEPRI
 8004e02:	f04f 0120 	mov.w	r1, #32
 8004e06:	f381 8811 	msr	BASEPRI, r1
 8004e0a:	607b      	str	r3, [r7, #4]
 8004e0c:	4807      	ldr	r0, [pc, #28]	@ (8004e2c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004e0e:	f7ff f9ea 	bl	80041e6 <_PreparePacket>
 8004e12:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004e14:	2212      	movs	r2, #18
 8004e16:	6839      	ldr	r1, [r7, #0]
 8004e18:	6838      	ldr	r0, [r7, #0]
 8004e1a:	f7ff fad5 	bl	80043c8 <_SendPacket>
  RECORD_END();
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f383 8811 	msr	BASEPRI, r3
}
 8004e24:	bf00      	nop
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	20014344 	.word	0x20014344

08004e30 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004e36:	f3ef 8311 	mrs	r3, BASEPRI
 8004e3a:	f04f 0120 	mov.w	r1, #32
 8004e3e:	f381 8811 	msr	BASEPRI, r1
 8004e42:	607b      	str	r3, [r7, #4]
 8004e44:	4807      	ldr	r0, [pc, #28]	@ (8004e64 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004e46:	f7ff f9ce 	bl	80041e6 <_PreparePacket>
 8004e4a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004e4c:	2211      	movs	r2, #17
 8004e4e:	6839      	ldr	r1, [r7, #0]
 8004e50:	6838      	ldr	r0, [r7, #0]
 8004e52:	f7ff fab9 	bl	80043c8 <_SendPacket>
  RECORD_END();
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f383 8811 	msr	BASEPRI, r3
}
 8004e5c:	bf00      	nop
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	20014344 	.word	0x20014344

08004e68 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b088      	sub	sp, #32
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e70:	f3ef 8311 	mrs	r3, BASEPRI
 8004e74:	f04f 0120 	mov.w	r1, #32
 8004e78:	f381 8811 	msr	BASEPRI, r1
 8004e7c:	617b      	str	r3, [r7, #20]
 8004e7e:	4819      	ldr	r0, [pc, #100]	@ (8004ee4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004e80:	f7ff f9b1 	bl	80041e6 <_PreparePacket>
 8004e84:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004e8a:	4b17      	ldr	r3, [pc, #92]	@ (8004ee8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	61fb      	str	r3, [r7, #28]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	61bb      	str	r3, [r7, #24]
 8004e9c:	e00b      	b.n	8004eb6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	1c59      	adds	r1, r3, #1
 8004ea6:	61f9      	str	r1, [r7, #28]
 8004ea8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004eac:	b2d2      	uxtb	r2, r2
 8004eae:	701a      	strb	r2, [r3, #0]
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	09db      	lsrs	r3, r3, #7
 8004eb4:	61bb      	str	r3, [r7, #24]
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004eba:	d8f0      	bhi.n	8004e9e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	61fa      	str	r2, [r7, #28]
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	701a      	strb	r2, [r3, #0]
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004ecc:	2208      	movs	r2, #8
 8004ece:	68f9      	ldr	r1, [r7, #12]
 8004ed0:	6938      	ldr	r0, [r7, #16]
 8004ed2:	f7ff fa79 	bl	80043c8 <_SendPacket>
  RECORD_END();
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f383 8811 	msr	BASEPRI, r3
}
 8004edc:	bf00      	nop
 8004ede:	3720      	adds	r7, #32
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	20014344 	.word	0x20014344
 8004ee8:	20014314 	.word	0x20014314

08004eec <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b088      	sub	sp, #32
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ef4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ef8:	f04f 0120 	mov.w	r1, #32
 8004efc:	f381 8811 	msr	BASEPRI, r1
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	4819      	ldr	r0, [pc, #100]	@ (8004f68 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004f04:	f7ff f96f 	bl	80041e6 <_PreparePacket>
 8004f08:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004f0e:	4b17      	ldr	r3, [pc, #92]	@ (8004f6c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	61fb      	str	r3, [r7, #28]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	61bb      	str	r3, [r7, #24]
 8004f20:	e00b      	b.n	8004f3a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	1c59      	adds	r1, r3, #1
 8004f2a:	61f9      	str	r1, [r7, #28]
 8004f2c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f30:	b2d2      	uxtb	r2, r2
 8004f32:	701a      	strb	r2, [r3, #0]
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	09db      	lsrs	r3, r3, #7
 8004f38:	61bb      	str	r3, [r7, #24]
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f3e:	d8f0      	bhi.n	8004f22 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	1c5a      	adds	r2, r3, #1
 8004f44:	61fa      	str	r2, [r7, #28]
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	b2d2      	uxtb	r2, r2
 8004f4a:	701a      	strb	r2, [r3, #0]
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004f50:	2204      	movs	r2, #4
 8004f52:	68f9      	ldr	r1, [r7, #12]
 8004f54:	6938      	ldr	r0, [r7, #16]
 8004f56:	f7ff fa37 	bl	80043c8 <_SendPacket>
  RECORD_END();
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f383 8811 	msr	BASEPRI, r3
}
 8004f60:	bf00      	nop
 8004f62:	3720      	adds	r7, #32
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	20014344 	.word	0x20014344
 8004f6c:	20014314 	.word	0x20014314

08004f70 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b088      	sub	sp, #32
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004f78:	f3ef 8311 	mrs	r3, BASEPRI
 8004f7c:	f04f 0120 	mov.w	r1, #32
 8004f80:	f381 8811 	msr	BASEPRI, r1
 8004f84:	617b      	str	r3, [r7, #20]
 8004f86:	4819      	ldr	r0, [pc, #100]	@ (8004fec <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004f88:	f7ff f92d 	bl	80041e6 <_PreparePacket>
 8004f8c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004f92:	4b17      	ldr	r3, [pc, #92]	@ (8004ff0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	61fb      	str	r3, [r7, #28]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	61bb      	str	r3, [r7, #24]
 8004fa4:	e00b      	b.n	8004fbe <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	b2da      	uxtb	r2, r3
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	1c59      	adds	r1, r3, #1
 8004fae:	61f9      	str	r1, [r7, #28]
 8004fb0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004fb4:	b2d2      	uxtb	r2, r2
 8004fb6:	701a      	strb	r2, [r3, #0]
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	09db      	lsrs	r3, r3, #7
 8004fbc:	61bb      	str	r3, [r7, #24]
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fc2:	d8f0      	bhi.n	8004fa6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	61fa      	str	r2, [r7, #28]
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	b2d2      	uxtb	r2, r2
 8004fce:	701a      	strb	r2, [r3, #0]
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004fd4:	2206      	movs	r2, #6
 8004fd6:	68f9      	ldr	r1, [r7, #12]
 8004fd8:	6938      	ldr	r0, [r7, #16]
 8004fda:	f7ff f9f5 	bl	80043c8 <_SendPacket>
  RECORD_END();
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f383 8811 	msr	BASEPRI, r3
}
 8004fe4:	bf00      	nop
 8004fe6:	3720      	adds	r7, #32
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	20014344 	.word	0x20014344
 8004ff0:	20014314 	.word	0x20014314

08004ff4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004ffc:	4b04      	ldr	r3, [pc, #16]	@ (8005010 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	1ad3      	subs	r3, r2, r3
}
 8005004:	4618      	mov	r0, r3
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	20014314 	.word	0x20014314

08005014 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005014:	b580      	push	{r7, lr}
 8005016:	b08c      	sub	sp, #48	@ 0x30
 8005018:	af00      	add	r7, sp, #0
 800501a:	4603      	mov	r3, r0
 800501c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800501e:	4b3b      	ldr	r3, [pc, #236]	@ (800510c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d06d      	beq.n	8005102 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005026:	4b39      	ldr	r3, [pc, #228]	@ (800510c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800502c:	2300      	movs	r3, #0
 800502e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005030:	e008      	b.n	8005044 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8005038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800503a:	2b00      	cmp	r3, #0
 800503c:	d007      	beq.n	800504e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800503e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005040:	3301      	adds	r3, #1
 8005042:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005044:	79fb      	ldrb	r3, [r7, #7]
 8005046:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005048:	429a      	cmp	r2, r3
 800504a:	d3f2      	bcc.n	8005032 <SEGGER_SYSVIEW_SendModule+0x1e>
 800504c:	e000      	b.n	8005050 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800504e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005052:	2b00      	cmp	r3, #0
 8005054:	d055      	beq.n	8005102 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005056:	f3ef 8311 	mrs	r3, BASEPRI
 800505a:	f04f 0120 	mov.w	r1, #32
 800505e:	f381 8811 	msr	BASEPRI, r1
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	482a      	ldr	r0, [pc, #168]	@ (8005110 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005066:	f7ff f8be 	bl	80041e6 <_PreparePacket>
 800506a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	627b      	str	r3, [r7, #36]	@ 0x24
 8005074:	79fb      	ldrb	r3, [r7, #7]
 8005076:	623b      	str	r3, [r7, #32]
 8005078:	e00b      	b.n	8005092 <SEGGER_SYSVIEW_SendModule+0x7e>
 800507a:	6a3b      	ldr	r3, [r7, #32]
 800507c:	b2da      	uxtb	r2, r3
 800507e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005080:	1c59      	adds	r1, r3, #1
 8005082:	6279      	str	r1, [r7, #36]	@ 0x24
 8005084:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005088:	b2d2      	uxtb	r2, r2
 800508a:	701a      	strb	r2, [r3, #0]
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	09db      	lsrs	r3, r3, #7
 8005090:	623b      	str	r3, [r7, #32]
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	2b7f      	cmp	r3, #127	@ 0x7f
 8005096:	d8f0      	bhi.n	800507a <SEGGER_SYSVIEW_SendModule+0x66>
 8005098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	627a      	str	r2, [r7, #36]	@ 0x24
 800509e:	6a3a      	ldr	r2, [r7, #32]
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	701a      	strb	r2, [r3, #0]
 80050a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	61fb      	str	r3, [r7, #28]
 80050ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	61bb      	str	r3, [r7, #24]
 80050b2:	e00b      	b.n	80050cc <SEGGER_SYSVIEW_SendModule+0xb8>
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	1c59      	adds	r1, r3, #1
 80050bc:	61f9      	str	r1, [r7, #28]
 80050be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050c2:	b2d2      	uxtb	r2, r2
 80050c4:	701a      	strb	r2, [r3, #0]
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	09db      	lsrs	r3, r3, #7
 80050ca:	61bb      	str	r3, [r7, #24]
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80050d0:	d8f0      	bhi.n	80050b4 <SEGGER_SYSVIEW_SendModule+0xa0>
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	1c5a      	adds	r2, r3, #1
 80050d6:	61fa      	str	r2, [r7, #28]
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	701a      	strb	r2, [r3, #0]
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80050e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2280      	movs	r2, #128	@ 0x80
 80050e8:	4619      	mov	r1, r3
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f7ff f82e 	bl	800414c <_EncodeStr>
 80050f0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80050f2:	2216      	movs	r2, #22
 80050f4:	68f9      	ldr	r1, [r7, #12]
 80050f6:	6938      	ldr	r0, [r7, #16]
 80050f8:	f7ff f966 	bl	80043c8 <_SendPacket>
      RECORD_END();
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005102:	bf00      	nop
 8005104:	3730      	adds	r7, #48	@ 0x30
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	2001433c 	.word	0x2001433c
 8005110:	20014344 	.word	0x20014344

08005114 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800511a:	4b0c      	ldr	r3, [pc, #48]	@ (800514c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00f      	beq.n	8005142 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005122:	4b0a      	ldr	r3, [pc, #40]	@ (800514c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d002      	beq.n	8005136 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1f2      	bne.n	8005128 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005142:	bf00      	nop
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	2001433c 	.word	0x2001433c

08005150 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005156:	f3ef 8311 	mrs	r3, BASEPRI
 800515a:	f04f 0120 	mov.w	r1, #32
 800515e:	f381 8811 	msr	BASEPRI, r1
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	4817      	ldr	r0, [pc, #92]	@ (80051c4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005166:	f7ff f83e 	bl	80041e6 <_PreparePacket>
 800516a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	617b      	str	r3, [r7, #20]
 8005174:	4b14      	ldr	r3, [pc, #80]	@ (80051c8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	613b      	str	r3, [r7, #16]
 800517a:	e00b      	b.n	8005194 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	b2da      	uxtb	r2, r3
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	1c59      	adds	r1, r3, #1
 8005184:	6179      	str	r1, [r7, #20]
 8005186:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800518a:	b2d2      	uxtb	r2, r2
 800518c:	701a      	strb	r2, [r3, #0]
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	09db      	lsrs	r3, r3, #7
 8005192:	613b      	str	r3, [r7, #16]
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	2b7f      	cmp	r3, #127	@ 0x7f
 8005198:	d8f0      	bhi.n	800517c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	617a      	str	r2, [r7, #20]
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	701a      	strb	r2, [r3, #0]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80051aa:	221b      	movs	r2, #27
 80051ac:	6879      	ldr	r1, [r7, #4]
 80051ae:	68b8      	ldr	r0, [r7, #8]
 80051b0:	f7ff f90a 	bl	80043c8 <_SendPacket>
  RECORD_END();
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f383 8811 	msr	BASEPRI, r3
}
 80051ba:	bf00      	nop
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	20014344 	.word	0x20014344
 80051c8:	20014340 	.word	0x20014340

080051cc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08a      	sub	sp, #40	@ 0x28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80051d4:	f3ef 8311 	mrs	r3, BASEPRI
 80051d8:	f04f 0120 	mov.w	r1, #32
 80051dc:	f381 8811 	msr	BASEPRI, r1
 80051e0:	617b      	str	r3, [r7, #20]
 80051e2:	4827      	ldr	r0, [pc, #156]	@ (8005280 <SEGGER_SYSVIEW_Warn+0xb4>)
 80051e4:	f7fe ffff 	bl	80041e6 <_PreparePacket>
 80051e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80051ea:	2280      	movs	r2, #128	@ 0x80
 80051ec:	6879      	ldr	r1, [r7, #4]
 80051ee:	6938      	ldr	r0, [r7, #16]
 80051f0:	f7fe ffac 	bl	800414c <_EncodeStr>
 80051f4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80051fa:	2301      	movs	r3, #1
 80051fc:	623b      	str	r3, [r7, #32]
 80051fe:	e00b      	b.n	8005218 <SEGGER_SYSVIEW_Warn+0x4c>
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	b2da      	uxtb	r2, r3
 8005204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005206:	1c59      	adds	r1, r3, #1
 8005208:	6279      	str	r1, [r7, #36]	@ 0x24
 800520a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	701a      	strb	r2, [r3, #0]
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	09db      	lsrs	r3, r3, #7
 8005216:	623b      	str	r3, [r7, #32]
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	2b7f      	cmp	r3, #127	@ 0x7f
 800521c:	d8f0      	bhi.n	8005200 <SEGGER_SYSVIEW_Warn+0x34>
 800521e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005220:	1c5a      	adds	r2, r3, #1
 8005222:	627a      	str	r2, [r7, #36]	@ 0x24
 8005224:	6a3a      	ldr	r2, [r7, #32]
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	701a      	strb	r2, [r3, #0]
 800522a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	61fb      	str	r3, [r7, #28]
 8005232:	2300      	movs	r3, #0
 8005234:	61bb      	str	r3, [r7, #24]
 8005236:	e00b      	b.n	8005250 <SEGGER_SYSVIEW_Warn+0x84>
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	b2da      	uxtb	r2, r3
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	1c59      	adds	r1, r3, #1
 8005240:	61f9      	str	r1, [r7, #28]
 8005242:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	701a      	strb	r2, [r3, #0]
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	09db      	lsrs	r3, r3, #7
 800524e:	61bb      	str	r3, [r7, #24]
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	2b7f      	cmp	r3, #127	@ 0x7f
 8005254:	d8f0      	bhi.n	8005238 <SEGGER_SYSVIEW_Warn+0x6c>
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	61fa      	str	r2, [r7, #28]
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	b2d2      	uxtb	r2, r2
 8005260:	701a      	strb	r2, [r3, #0]
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005266:	221a      	movs	r2, #26
 8005268:	68f9      	ldr	r1, [r7, #12]
 800526a:	6938      	ldr	r0, [r7, #16]
 800526c:	f7ff f8ac 	bl	80043c8 <_SendPacket>
  RECORD_END();
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f383 8811 	msr	BASEPRI, r3
}
 8005276:	bf00      	nop
 8005278:	3728      	adds	r7, #40	@ 0x28
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	20014344 	.word	0x20014344

08005284 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005288:	4b13      	ldr	r3, [pc, #76]	@ (80052d8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800528a:	7e1b      	ldrb	r3, [r3, #24]
 800528c:	4619      	mov	r1, r3
 800528e:	4a13      	ldr	r2, [pc, #76]	@ (80052dc <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005290:	460b      	mov	r3, r1
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	440b      	add	r3, r1
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	4413      	add	r3, r2
 800529a:	336c      	adds	r3, #108	@ 0x6c
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	4b0e      	ldr	r3, [pc, #56]	@ (80052d8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80052a0:	7e1b      	ldrb	r3, [r3, #24]
 80052a2:	4618      	mov	r0, r3
 80052a4:	490d      	ldr	r1, [pc, #52]	@ (80052dc <SEGGER_SYSVIEW_IsStarted+0x58>)
 80052a6:	4603      	mov	r3, r0
 80052a8:	005b      	lsls	r3, r3, #1
 80052aa:	4403      	add	r3, r0
 80052ac:	00db      	lsls	r3, r3, #3
 80052ae:	440b      	add	r3, r1
 80052b0:	3370      	adds	r3, #112	@ 0x70
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d00b      	beq.n	80052d0 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80052b8:	4b07      	ldr	r3, [pc, #28]	@ (80052d8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80052ba:	789b      	ldrb	r3, [r3, #2]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d107      	bne.n	80052d0 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80052c0:	4b05      	ldr	r3, [pc, #20]	@ (80052d8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80052c2:	2201      	movs	r2, #1
 80052c4:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80052c6:	f7fe ff9b 	bl	8004200 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80052ca:	4b03      	ldr	r3, [pc, #12]	@ (80052d8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80052d0:	4b01      	ldr	r3, [pc, #4]	@ (80052d8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80052d2:	781b      	ldrb	r3, [r3, #0]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	20014314 	.word	0x20014314
 80052dc:	20012e54 	.word	0x20012e54

080052e0 <memcmp>:
 80052e0:	b510      	push	{r4, lr}
 80052e2:	3901      	subs	r1, #1
 80052e4:	4402      	add	r2, r0
 80052e6:	4290      	cmp	r0, r2
 80052e8:	d101      	bne.n	80052ee <memcmp+0xe>
 80052ea:	2000      	movs	r0, #0
 80052ec:	e005      	b.n	80052fa <memcmp+0x1a>
 80052ee:	7803      	ldrb	r3, [r0, #0]
 80052f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80052f4:	42a3      	cmp	r3, r4
 80052f6:	d001      	beq.n	80052fc <memcmp+0x1c>
 80052f8:	1b18      	subs	r0, r3, r4
 80052fa:	bd10      	pop	{r4, pc}
 80052fc:	3001      	adds	r0, #1
 80052fe:	e7f2      	b.n	80052e6 <memcmp+0x6>

08005300 <memset>:
 8005300:	4402      	add	r2, r0
 8005302:	4603      	mov	r3, r0
 8005304:	4293      	cmp	r3, r2
 8005306:	d100      	bne.n	800530a <memset+0xa>
 8005308:	4770      	bx	lr
 800530a:	f803 1b01 	strb.w	r1, [r3], #1
 800530e:	e7f9      	b.n	8005304 <memset+0x4>

08005310 <__libc_init_array>:
 8005310:	b570      	push	{r4, r5, r6, lr}
 8005312:	4d0d      	ldr	r5, [pc, #52]	@ (8005348 <__libc_init_array+0x38>)
 8005314:	4c0d      	ldr	r4, [pc, #52]	@ (800534c <__libc_init_array+0x3c>)
 8005316:	1b64      	subs	r4, r4, r5
 8005318:	10a4      	asrs	r4, r4, #2
 800531a:	2600      	movs	r6, #0
 800531c:	42a6      	cmp	r6, r4
 800531e:	d109      	bne.n	8005334 <__libc_init_array+0x24>
 8005320:	4d0b      	ldr	r5, [pc, #44]	@ (8005350 <__libc_init_array+0x40>)
 8005322:	4c0c      	ldr	r4, [pc, #48]	@ (8005354 <__libc_init_array+0x44>)
 8005324:	f000 f826 	bl	8005374 <_init>
 8005328:	1b64      	subs	r4, r4, r5
 800532a:	10a4      	asrs	r4, r4, #2
 800532c:	2600      	movs	r6, #0
 800532e:	42a6      	cmp	r6, r4
 8005330:	d105      	bne.n	800533e <__libc_init_array+0x2e>
 8005332:	bd70      	pop	{r4, r5, r6, pc}
 8005334:	f855 3b04 	ldr.w	r3, [r5], #4
 8005338:	4798      	blx	r3
 800533a:	3601      	adds	r6, #1
 800533c:	e7ee      	b.n	800531c <__libc_init_array+0xc>
 800533e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005342:	4798      	blx	r3
 8005344:	3601      	adds	r6, #1
 8005346:	e7f2      	b.n	800532e <__libc_init_array+0x1e>
 8005348:	080054a8 	.word	0x080054a8
 800534c:	080054a8 	.word	0x080054a8
 8005350:	080054a8 	.word	0x080054a8
 8005354:	080054ac 	.word	0x080054ac

08005358 <memcpy>:
 8005358:	440a      	add	r2, r1
 800535a:	4291      	cmp	r1, r2
 800535c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005360:	d100      	bne.n	8005364 <memcpy+0xc>
 8005362:	4770      	bx	lr
 8005364:	b510      	push	{r4, lr}
 8005366:	f811 4b01 	ldrb.w	r4, [r1], #1
 800536a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800536e:	4291      	cmp	r1, r2
 8005370:	d1f9      	bne.n	8005366 <memcpy+0xe>
 8005372:	bd10      	pop	{r4, pc}

08005374 <_init>:
 8005374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005376:	bf00      	nop
 8005378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800537a:	bc08      	pop	{r3}
 800537c:	469e      	mov	lr, r3
 800537e:	4770      	bx	lr

08005380 <_fini>:
 8005380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005382:	bf00      	nop
 8005384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005386:	bc08      	pop	{r3}
 8005388:	469e      	mov	lr, r3
 800538a:	4770      	bx	lr
